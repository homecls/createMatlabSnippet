{
"MultiProd": {
"prefix": "MultiProd",
"body": "${1:RHS = }MultiProd(${2:M}, ${3:X})$0",
"description": "function RHS = MultiProd(M, X)" 
},
"MultiSolver": {
"prefix": "MultiSolver",
"body": "${1:X = }MultiSolver(${2:M}, ${3:RHS})$0",
"description": "function X = MultiSolver(M, RHS)" 
},
"SliceMultiProd": {
"prefix": "SliceMultiProd",
"body": "${1:RHS = }SliceMultiProd(${2:M}, ${3:X})$0",
"description": "function RHS = SliceMultiProd(M, X)" 
},
"SliceMultiSolver": {
"prefix": "SliceMultiSolver",
"body": "${1:X = }SliceMultiSolver(${2:M}, ${3:RHS})$0",
"description": "function X = SliceMultiSolver(M, RHS)" 
},
"loc2loc": {
"prefix": "loc2loc",
"body": "${1:bP = }loc2loc(${2:aP}, ${3:gOa}, ${4:gRa}, ${5:gOb}, ${6:gRb}, ${7:dim})$0",
"description": "function bP = loc2loc(aP, gOa, gRa, gOb, gRb, dim)" 
},
"multiprod": {
"prefix": "multiprod",
"body": "${1:c = }multiprod(${2:a}, ${3:b}, ${4:idA}, ${5:idB})$0",
"description": "function c = multiprod(a, b, idA, idB)" 
},
"multitransp": {
"prefix": "multitransp",
"body": "${1:b = }multitransp(${2:a}, ${3:dim})$0",
"description": "function b = multitransp(a, dim)" 
},
"arraylab13": {
"prefix": "arraylab13",
"body": "${1:c = }arraylab13(${2:a}, ${3:b}, ${4:d1}, ${5:d2})$0",
"description": "function c = arraylab13(a,b,d1,d2)" 
},
"arraylab131": {
"prefix": "arraylab131",
"body": "${1:c = }arraylab131(${2:a}, ${3:b}, ${4:d1}, ${5:d2})$0",
"description": "function c = arraylab131(a,b,d1,d2)" 
},
"arraylab132": {
"prefix": "arraylab132",
"body": "${1:c = }arraylab132(${2:a}, ${3:b}, ${4:d1}, ${5:d2})$0",
"description": "function c = arraylab132(a,b,d1,d2)" 
},
"arraylab133": {
"prefix": "arraylab133",
"body": "${1:c = }arraylab133(${2:a}, ${3:b}, ${4:d1}, ${5:d2})$0",
"description": "function c = arraylab133(a,b,d1,d2)" 
},
"genop": {
"prefix": "genop",
"body": "${1:z = }genop(${2:op}, ${3:x}, ${4:y})$0",
"description": "function z = genop(op,x,y)" 
},
"multiprod13": {
"prefix": "multiprod13",
"body": "${1:c = }multiprod13(${2:a}, ${3:b}, ${4:rcA}, ${5:rcB})$0",
"description": "function c = multiprod(a, b, rcA, rcB)" 
},
"sysrequirements_for_testing": {
"prefix": "sysrequirements_for_testing",
"body": "${1:message = }sysrequirements_for_testing(${2:varargin})$0",
"description": "function message = sysrequirements_for_testing(varargin)" 
},
"testMULTIPROD": {
"prefix": "testMULTIPROD",
"body": "testMULTIPROD$0",
"description": "function testMULTIPROD" 
},
"testing_memory_usage": {
"prefix": "testing_memory_usage",
"body": "testing_memory_usage$0",
"description": "function testing_memory_usage" 
},
"timing_MX": {
"prefix": "timing_MX",
"body": "timing_MX$0",
"description": "function timing_MX" 
},
"timing_arraylab_engines": {
"prefix": "timing_arraylab_engines",
"body": "timing_arraylab_engines$0",
"description": "function timing_arraylab_engines" 
},
"timing_matlab_commands": {
"prefix": "timing_matlab_commands",
"body": "timing_matlab_commands$0",
"description": "function timing_matlab_commands" 
},
"build_mmx": {
"prefix": "build_mmx",
"body": "build_mmx(${2:verbose})$0",
"description": "function build_mmx(verbose)" 
},
"compare_chol_flops": {
"prefix": "compare_chol_flops",
"body": "compare_chol_flops$0",
"description": "compare_chol_flops" 
},
"compare_mult_flops": {
"prefix": "compare_mult_flops",
"body": "compare_mult_flops$0",
"description": "compare_mult_flops" 
},
"matlab_mprod": {
"prefix": "matlab_mprod",
"body": "${1:c = }matlab_mprod(${2:a}, ${3:b})$0",
"description": "function c = matlab_mprod(a,b)" 
},
"mmx": {
"prefix": "mmx",
"body": "${1:fake_output = }mmx(${2:varargin})$0",
"description": "function fake_output = mmx(varargin)" 
},
"mmx_web": {
"prefix": "mmx_web",
"body": "mmx_web$0",
"description": "mmx_web" 
},
"mtimesx": {
"prefix": "mtimesx",
"body": "${1:varargout = }mtimesx(${2:varargin})$0",
"description": "function varargout = mtimesx(varargin)" 
},
"mtimesx_build": {
"prefix": "mtimesx_build",
"body": "mtimesx_build(${2:x})$0",
"description": "function mtimesx_build(x)" 
},
"mtimesx_sparse": {
"prefix": "mtimesx_sparse",
"body": "${1:result = }mtimesx_sparse(${2:a}, ${3:transa}, ${4:b}, ${5:transb})$0",
"description": "function result = mtimesx_sparse(a,transa,b,transb)" 
},
"mtimesx_test_ddequal": {
"prefix": "mtimesx_test_ddequal",
"body": "${1:dtable = }mtimesx_test_ddequal$0",
"description": "function dtable = mtimesx_test_ddequal" 
},
"mtimesx_test_ddspeed": {
"prefix": "mtimesx_test_ddspeed",
"body": "${1:ttable = }mtimesx_test_ddspeed(${2:nn}, ${3:details})$0",
"description": "function ttable = mtimesx_test_ddspeed(nn,details)" 
},
"mtimesx_test_dsequal": {
"prefix": "mtimesx_test_dsequal",
"body": "${1:dtable = }mtimesx_test_dsequal$0",
"description": "function dtable = mtimesx_test_dsequal" 
},
"mtimesx_test_dsspeed": {
"prefix": "mtimesx_test_dsspeed",
"body": "${1:ttable = }mtimesx_test_dsspeed(${2:nn}, ${3:details})$0",
"description": "function ttable = mtimesx_test_dsspeed(nn,details)" 
},
"mtimesx_test_nd": {
"prefix": "mtimesx_test_nd",
"body": "${1:Cr = }mtimesx_test_nd(${2:n})$0",
"description": "function Cr = mtimesx_test_nd(n)" 
},
"mtimesx_test_sdequal": {
"prefix": "mtimesx_test_sdequal",
"body": "${1:dtable = }mtimesx_test_sdequal$0",
"description": "function dtable = mtimesx_test_sdequal" 
},
"mtimesx_test_sdspeed": {
"prefix": "mtimesx_test_sdspeed",
"body": "${1:ttable = }mtimesx_test_sdspeed(${2:nn}, ${3:details})$0",
"description": "function ttable = mtimesx_test_sdspeed(nn,details)" 
},
"mtimesx_test_ssequal": {
"prefix": "mtimesx_test_ssequal",
"body": "${1:dtable = }mtimesx_test_ssequal$0",
"description": "function dtable = mtimesx_test_ssequal" 
},
"mtimesx_test_ssspeed": {
"prefix": "mtimesx_test_ssspeed",
"body": "${1:ttable = }mtimesx_test_ssspeed(${2:nn}, ${3:details})$0",
"description": "function ttable = mtimesx_test_ssspeed(nn,details)" 
},
"ndfun": {
"prefix": "ndfun",
"body": "ndfun$0",
"description": "function NDFUN" 
},
"ndfunm": {
"prefix": "ndfunm",
"body": "${1:C = }ndfunm(${2:funtype}, ${3:A}, ${4:r})$0",
"description": "function C = ndfunm(funtype, A, r)" 
},
"ndmult": {
"prefix": "ndmult",
"body": "${1:C = }ndmult(${2:A}, ${3:B})$0",
"description": "function C = ndmulti(A,B)" 
},
"ndmult_d": {
"prefix": "ndmult_d",
"body": "ndmult_d$0",
"description": "ndmult_d" 
},
"ndmulti": {
"prefix": "ndmulti",
"body": "${1:y = }ndmulti(${2:A}, ${3:B})$0",
"description": "function y = ndmulti(A, B)" 
},
"ndsym2vec": {
"prefix": "ndsym2vec",
"body": "${1:Xvec = }ndsym2vec(${2:Xsym}, ${3:dim})$0",
"description": "function Xvec = ndsym2vec(Xsym, dim)" 
},
"mdix": {
"prefix": "mdix",
"body": "${1:C = }mdix(${2:A}, ${3:B})$0",
"description": "function C = mdix(A, B)" 
},
"mdx": {
"prefix": "mdx",
"body": "${1:C = }mdx(${2:A}, ${3:B})$0",
"description": "function C = mdx(A, B)" 
},
"ndix_d": {
"prefix": "ndix_d",
"body": "ndix_d$0",
"description": "ndix_d" 
},
"findnz_d": {
"prefix": "findnz_d",
"body": "findnz_d$0",
"description": "findnz_d" 
},
"mplus_d": {
"prefix": "mplus_d",
"body": "mplus_d$0",
"description": "mplus_d" 
},
"mytimes_d": {
"prefix": "mytimes_d",
"body": "mytimes_d$0",
"description": "mytimes_d" 
},
"ndml_d": {
"prefix": "ndml_d",
"body": "ndml_d$0",
"description": "ndml_d" 
},
"ndmm_d": {
"prefix": "ndmm_d",
"body": "ndmm_d$0",
"description": "ndmm_d" 
},
"ndmm_mex": {
"prefix": "ndmm_mex",
"body": "ndmm_mex$0",
"description": "ndmm_mex" 
},
"getStockInformation": {
"prefix": "getStockInformation",
"body": "${1:data = }getStockInformation(${2:tickers})$0",
"description": "function data = getStockInformation(tickers)" 
},
"ideasrepeccountry": {
"prefix": "ideasrepeccountry",
"body": "ideasrepeccountry$0",
"description": "ideasrepeccountry" 
},
"indicators": {
"prefix": "indicators",
"body": "indicators$0",
"description": "indicators" 
},
"processrank": {
"prefix": "processrank",
"body": "processrank$0",
"description": "processrank" 
},
"processscore": {
"prefix": "processscore",
"body": "processscore$0",
"description": "processscore" 
},
"regions": {
"prefix": "regions",
"body": "regions$0",
"description": "regions" 
},
"uiinspect": {
"prefix": "uiinspect",
"body": "${1:hFig = }uiinspect(${2:obj}, ${3:fig})$0",
"description": "function hFig = uiinspect(obj, fig)" 
},
"FestivalCompute_demo": {
"prefix": "FestivalCompute_demo",
"body": "FestivalCompute_demo$0",
"description": "FestivalCompute_demo" 
},
"LunarCalendar": {
"prefix": "LunarCalendar",
"body": "${1:xx = }LunarCalendar(${2:y}, ${3:m}, ${4:d})$0",
"description": "function xx = LunarCalendar(y,m,d)" 
},
"LunarCalendarLrw": {
"prefix": "LunarCalendarLrw",
"body": "${1:[monthcn, daycn, xx] = }LunarCalendarLrw(${2:ys}, ${3:ms}, ${4:ds})$0",
"description": "function [monthcn, daycn,xx] = LunarCalendarLrw(ys,ms,ds)" 
},
"SamplingQandA": {
"prefix": "SamplingQandA",
"body": "SamplingQandA(${2:fileA}, ${3:fileB})$0",
"description": "function SamplingQandA(fileA,fileB)" 
},
"getFestivalbyYear": {
"prefix": "getFestivalbyYear",
"body": "${1:[mapfestivals, mapfestivals2] = }getFestivalbyYear(${2:iYear})$0",
"description": "function [mapfestivals, mapfestivals2]= getFestivalbyYear(iYear)" 
},
"getQingmingjie": {
"prefix": "getQingmingjie",
"body": "${1:[Yuniques, MQingming, dateQingming] = }getQingmingjie(${2:Year})$0",
"description": "function [Yuniques, MQingming, dateQingming]= getQingmingjie(Year)" 
},
"gongli_nongli_demo": {
"prefix": "gongli_nongli_demo",
"body": "gongli_nongli_demo$0",
"description": "gongli_nongli_demo" 
},
"teamworkSetupArrange": {
"prefix": "teamworkSetupArrange",
"body": "teamworkSetupArrange$0",
"description": "teamworkSetupArrange" 
},
"weekday_demo": {
"prefix": "weekday_demo",
"body": "weekday_demo$0",
"description": "weekday_demo" 
},
"chineseEncoding_demo": {
"prefix": "chineseEncoding_demo",
"body": "chineseEncoding_demo$0",
"description": "function chineseEncoding_demo" 
},
"LRW2ExamtxtChoiceMulti": {
"prefix": "LRW2ExamtxtChoiceMulti",
"body": "${1:varargout = }LRW2ExamtxtChoiceMulti(${2:cellQ}, ${3:varargin})$0",
"description": "function varargout = LRW2ExamtxtChoiceMulti(cellQ, varargin)" 
},
"LRW2ExamtxtChoiceMultiRandStream": {
"prefix": "LRW2ExamtxtChoiceMultiRandStream",
"body": "${1:varargout = }LRW2ExamtxtChoiceMultiRandStream(${2:s}, ${3:cellQ}, ${4:varargin})$0",
"description": "function varargout = LRW2ExamtxtChoiceMultiRandStream(s,cellQ, varargin)" 
},
"LRW2ExamtxtTF": {
"prefix": "LRW2ExamtxtTF",
"body": "${1:varargout = }LRW2ExamtxtTF(${2:cellQ}, ${3:varargin})$0",
"description": "function varargout =LRW2ExamtxtTF(cellQ, varargin)" 
},
"LRW2ExamtxtTFONLY": {
"prefix": "LRW2ExamtxtTFONLY",
"body": "${1:varargout = }LRW2ExamtxtTFONLY(${2:cellQ}, ${3:varargin})$0",
"description": "function varargout =LRW2ExamtxtTFONLY(cellQ, varargin)" 
},
"LRW2ExamtxtTFRandStream": {
"prefix": "LRW2ExamtxtTFRandStream",
"body": "${1:varargout = }LRW2ExamtxtTFRandStream(${2:s}, ${3:cellQ}, ${4:varargin})$0",
"description": "function varargout =LRW2ExamtxtTFRandStream(s, cellQ, varargin)" 
},
"NL": {
"prefix": "NL",
"body": "${1:str = }NL(${2:varargin})$0",
"description": "function str = NL(varargin)" 
},
"NaN2Zero": {
"prefix": "NaN2Zero",
"body": "${1:x = }NaN2Zero(${2:x})$0",
"description": "function x = NaN2Zero(x)" 
},
"QA2xls": {
"prefix": "QA2xls",
"body": "QA2xls(${2:Q}, ${3:A}, ${4:chapter}, ${5:fxls}, ${6:sheetx})$0",
"description": "function QA2xls(Q, A, chapter, fxls, sheetx)" 
},
"Qlrw2QMatlab": {
"prefix": "Qlrw2QMatlab",
"body": "${1:[Qb, Ansb] = }Qlrw2QMatlab(${2:Qa}, ${3:Ansa})$0",
"description": "function [Qb, Ansb]= Qlrw2QMatlab(Qa,Ansa)" 
},
"QlrwWithmatlab2Qtxt": {
"prefix": "QlrwWithmatlab2Qtxt",
"body": "${1:[xx_Qb, xx_Ansb] = }QlrwWithmatlab2Qtxt(${2:xx_Qa}, ${3:xx_Ansa})$0",
"description": "function [xx_Qb, xx_Ansb]= QlrwWithmatlab2Qtxt(xx_Qa,xx_Ansa)" 
},
"QuestionChoice": {
"prefix": "QuestionChoice",
"body": "QuestionChoice$0",
"description": "QuestionChoice" 
},
"RandStream_demo": {
"prefix": "RandStream_demo",
"body": "RandStream_demo$0",
"description": "function RandStream_demo" 
},
"Untitled5": {
"prefix": "Untitled5",
"body": "Untitled5$0",
"description": "Untitled5" 
},
"calculateWeight": {
"prefix": "calculateWeight",
"body": "${1:w = }calculateWeight(${2:x1}, ${3:x2}, ${4:xw})$0",
"description": "function w = calculateWeight(x1,x2,xw)" 
},
"cell2blockcelldigital": {
"prefix": "cell2blockcelldigital",
"body": "${1:[strsplited, varargout] = }cell2blockcelldigital(${2:cellQ}, ${3:varargin})$0",
"description": "function [strsplited, varargout]= cell2blockcelldigital(cellQ, varargin)" 
},
"cell2blockcells": {
"prefix": "cell2blockcells",
"body": "${1:cellkids = }cell2blockcells(${2:cellmother}, ${3:cellNames})$0",
"description": "function cellkids = cell2blockcells(cellmother, cellNames)" 
},
"cell2strtxt": {
"prefix": "cell2strtxt",
"body": "${1:istr = }cell2strtxt(${2:cella})$0",
"description": "function istr = cell2strtxt(cella)" 
},
"cellstr2cellnumTable": {
"prefix": "cellstr2cellnumTable",
"body": "${1:T = }cellstr2cellnumTable(${2:T})$0",
"description": "function T = cellstr2cellnumTable(T)" 
},
"date2classtermnum": {
"prefix": "date2classtermnum",
"body": "${1:classtermnum = }date2classtermnum(${2:varargin})$0",
"description": "function classtermnum = date2classtermnum(varargin)" 
},
"degreeofDifficultyDist": {
"prefix": "degreeofDifficultyDist",
"body": "${1:[res, shares] = }degreeofDifficultyDist(${2:mygrade}, ${3:varargin})$0",
"description": "function [res, shares]= degreeofDifficultyDist(mygrade,varargin)" 
},
"emailGrade": {
"prefix": "emailGrade",
"body": "emailGrade(${2:filegradereport}, ${3:students}, ${4:varargin})$0",
"description": "function emailGrade(filegradereport, students, varargin)" 
},
"emaillrw": {
"prefix": "emaillrw",
"body": "emaillrw(${2:TargetAddress}, ${3:subject}, ${4:content})$0",
"description": "function emaillrw(TargetAddress, subject, content)" 
},
"examRepVarnames": {
"prefix": "examRepVarnames",
"body": "${1:examstr = }examRepVarnames(${2:examstr}, ${3:XX})$0",
"description": "function examstr =examRepVarnames(examstr, XX)" 
},
"examRepVarnamesClean": {
"prefix": "examRepVarnamesClean",
"body": "${1:examstr = }examRepVarnamesClean(${2:examstr}, ${3:XX})$0",
"description": "function examstr =examRepVarnamesClean(examstr, XX)" 
},
"fgetanstable": {
"prefix": "fgetanstable",
"body": "${1:stransTab = }fgetanstable(${2:nofans})$0",
"description": "function stransTab = fgetanstable(nofans)" 
},
"fgetanstableEN": {
"prefix": "fgetanstableEN",
"body": "${1:stransTab = }fgetanstableEN(${2:nofans})$0",
"description": "function stransTab = fgetanstableEN(nofans)" 
},
"fgetkeytable": {
"prefix": "fgetkeytable",
"body": "${1:stransTab = }fgetkeytable(${2:keytab})$0",
"description": "function stransTab = fgetkeytable(keytab)" 
},
"fgetkeytableEN": {
"prefix": "fgetkeytableEN",
"body": "${1:stransTab = }fgetkeytableEN(${2:keytab}, ${3:varargin})$0",
"description": "function stransTab = fgetkeytableEN(keytab,varargin)" 
},
"genExam": {
"prefix": "genExam",
"body": "genExam$0",
"description": "genExam" 
},
"genTestAllType": {
"prefix": "genTestAllType",
"body": "genTestAllType$0",
"description": "genTestAllType" 
},
"genTestChoiceMulti": {
"prefix": "genTestChoiceMulti",
"body": "${1:varargout = }genTestChoiceMulti(${2:forg}, ${3:sheetorg}, ${4:examSession}, ${5:varargin})$0",
"description": "function varargout = genTestChoiceMulti(forg, sheetorg, examSession,varargin)" 
},
"genTestTF": {
"prefix": "genTestTF",
"body": "${1:varargout = }genTestTF(${2:forg}, ${3:sheetorg}, ${4:ExamSession}, ${5:varargin})$0",
"description": "function varargout = genTestTF(forg, sheetorg,  ExamSession,varargin)" 
},
"genTestTF2": {
"prefix": "genTestTF2",
"body": "${1:varargout = }genTestTF2(${2:forg}, ${3:sheetorg}, ${4:ExamSession}, ${5:varargin})$0",
"description": "function varargout = genTestTF2(forg, sheetorg,  ExamSession,varargin)" 
},
"getABCDEF": {
"prefix": "getABCDEF",
"body": "${1:TFs = }getABCDEF(${2:str})$0",
"description": "function TFs = getABCDEF(str)" 
},
"getClassinfoFromGradeReportfile": {
"prefix": "getClassinfoFromGradeReportfile",
"body": "${1:E = }getClassinfoFromGradeReportfile(${2:file1})$0",
"description": "function E = getClassinfoFromGradeReportfile(file1)" 
},
"getExamQHead": {
"prefix": "getExamQHead",
"body": "${1:[TEXExamQHead, TEXExamKeyHead, TEXTail] = }getExamQHead(${2:E})$0",
"description": "function [TEXExamQHead,TEXExamKeyHead,TEXTail] = getExamQHead(E)" 
},
"getQ2017": {
"prefix": "getQ2017",
"body": "${1:[strQ, strA, varargout] = }getQ2017(${2:tbQ}, ${3:vspace})$0",
"description": "function [strQ,strA,varargout] = getQ2017(tbQ, vspace)" 
},
"getQAChoice2017": {
"prefix": "getQAChoice2017",
"body": "${1:[strQ, strA, varargout] = }getQAChoice2017(${2:tbQ}, ${3:vspace})$0",
"description": "function [strQ,strA,varargout] = getQAChoice2017(tbQ, vspace)" 
},
"getQAsLRW2txt": {
"prefix": "getQAsLRW2txt",
"body": "${1:QAs = }getQAsLRW2txt(${2:E}, ${3:varargin})$0",
"description": "function QAs = getQAsLRW2txt(E, varargin)" 
},
"getQAsLRW2txtRandStream": {
"prefix": "getQAsLRW2txtRandStream",
"body": "${1:QAs = }getQAsLRW2txtRandStream(${2:s}, ${3:E})$0",
"description": "function QAs = getQAsLRW2txtRandStream(s,E)" 
},
"getQAsLRW2txtRandStreamEN2017": {
"prefix": "getQAsLRW2txtRandStreamEN2017",
"body": "${1:[strQjoin, strAjoin] = }getQAsLRW2txtRandStreamEN2017(${2:E})$0",
"description": "function [strQjoin, strAjoin] = getQAsLRW2txtRandStreamEN2017(E)" 
},
"getQhead2017": {
"prefix": "getQhead2017",
"body": "${1:[strQhead, strAhead, iQ] = }getQhead2017(${2:qType}, ${3:ExamInfo})$0",
"description": "function [strQhead, strAhead, iQ] = getQhead2017(qType,ExamInfo)" 
},
"getQuestionAllType": {
"prefix": "getQuestionAllType",
"body": "getQuestionAllType$0",
"description": "getQuestionAllType" 
},
"getQuestionChoice": {
"prefix": "getQuestionChoice",
"body": "${1:Questions = }getQuestionChoice(${2:forg}, ${3:sheetQ}, ${4:sheetans}, ${5:ftarget}, ${6:sheettarget}, ${7:QuestionType}, ${8:ChapterNo}, ${9:strNoQ}, ${10:strOptQ})$0",
"description": "function Questions = getQuestionChoice(forg, sheetQ, sheetans, ftarget, sheettarget, QuestionType,ChapterNo,strNoQ, strOptQ)" 
},
"getQuestionChoice_demo": {
"prefix": "getQuestionChoice_demo",
"body": "getQuestionChoice_demo$0",
"description": "getQuestionChoice_demo" 
},
"getQuestionTF": {
"prefix": "getQuestionTF",
"body": "${1:Questions = }getQuestionTF(${2:forg}, ${3:sheetQ}, ${4:sheetans}, ${5:ftarget}, ${6:sheettarget}, ${7:QuestionType}, ${8:ChapterNo}, ${9:varargin})$0",
"description": "function Questions = getQuestionTF(forg, sheetQ, sheetans, ftarget, sheettarget, QuestionType,ChapterNo,varargin)" 
},
"getQuestionTF_demo": {
"prefix": "getQuestionTF_demo",
"body": "getQuestionTF_demo$0",
"description": "getQuestionTF_demo" 
},
"getTableFromMosoXlsx": {
"prefix": "getTableFromMosoXlsx",
"body": "${1:[TAtten, TAttenRaw, varNameCN] = }getTableFromMosoXlsx(${2:fmoso}, ${3:sheet}, ${4:varCN}, ${5:varEN})$0",
"description": "function [TAtten,TAttenRaw,varNameCN] = getTableFromMosoXlsx(fmoso,sheet,varCN,varEN)" 
},
"getTableFromMosoXlsxRows2": {
"prefix": "getTableFromMosoXlsxRows2",
"body": "${1:[TSelect, TRaw, varNames] = }getTableFromMosoXlsxRows2(${2:fmoso}, ${3:sheet}, ${4:varCN}, ${5:varCNRow1}, ${6:varEN})$0",
"description": "function [TSelect,TRaw,varNames] = getTableFromMosoXlsxRows2(fmoso,sheet,varCN,varCNRow1,varEN)" 
},
"gradeAdjust": {
"prefix": "gradeAdjust",
"body": "${1:cellgradeAdjust = }gradeAdjust(${2:cellGrade}, ${3:varargin})$0",
"description": "function cellgradeAdjust = gradeAdjust(cellGrade,varargin)" 
},
"gradeAdjustSpecialCase - 副本": {
"prefix": "gradeAdjustSpecialCase - 副本",
"body": "${1:cellGradeAdjustSpecialCase = }gradeAdjustSpecialCase - 副本(${2:cellGradeAdjust})$0",
"description": "function cellGradeAdjustSpecialCase = gradeAdjustSpecialCase(cellGradeAdjust)" 
},
"gradeAdjustSpecialCase": {
"prefix": "gradeAdjustSpecialCase",
"body": "${1:cellGrade = }gradeAdjustSpecialCase(${2:cellGrade}, ${3:varargin})$0",
"description": "function cellGrade = gradeAdjustSpecialCase(cellGrade, varargin)" 
},
"gradeAdjustSpecialCaseExemption": {
"prefix": "gradeAdjustSpecialCaseExemption",
"body": "${1:cellGrade = }gradeAdjustSpecialCaseExemption(${2:cellGrade}, ${3:varargin})$0",
"description": "function cellGrade = gradeAdjustSpecialCaseExemption(cellGrade, varargin)" 
},
"gradeAnalysis": {
"prefix": "gradeAnalysis",
"body": "${1:[G, cellgradereport] = }gradeAnalysis(${2:cellgrade}, ${3:headgrade})$0",
"description": "function [G, cellgradereport] = gradeAnalysis(cellgrade, headgrade)" 
},
"gradeAnalysisTable": {
"prefix": "gradeAnalysisTable",
"body": "${1:[G, cellgradereport] = }gradeAnalysisTable(${2:Tgrade}, ${3:v})$0",
"description": "function [G, cellgradereport] = gradeAnalysisTable(Tgrade, v)" 
},
"idsGradeReport": {
"prefix": "idsGradeReport",
"body": "${1:[ids, raw, varargout] = }idsGradeReport(${2:file1}, ${3:sheet1}, ${4:headcols}, ${5:varargin})$0",
"description": "function [ids, raw, varargout]= idsGradeReport(file1,sheet1,headcols,varargin)" 
},
"idsGradeReportCell": {
"prefix": "idsGradeReportCell",
"body": "${1:[ids, raw, varargout] = }idsGradeReportCell(${2:file1}, ${3:headcols}, ${4:varargin})$0",
"description": "function [ids, raw, varargout]= idsGradeReportCell(file1,headcols,varargin)" 
},
"idsGradeReportfile": {
"prefix": "idsGradeReportfile",
"body": "${1:[ids, raw, varargout] = }idsGradeReportfile(${2:file1}, ${3:sheet1}, ${4:headcols}, ${5:varargin})$0",
"description": "function [ids, raw, varargout ]= idsGradeReportfile(file1,sheet1,headcols,varargin)" 
},
"latex2pdf": {
"prefix": "latex2pdf",
"body": "${1:resExam = }latex2pdf(${2:TEXQ}, ${3:pathprj}, ${4:prjname})$0",
"description": "function resExam = latex2pdf(TEXQ, pathprj, prjname)" 
},
"latexAhead": {
"prefix": "latexAhead",
"body": "${1:Qheads = }latexAhead(${2:Qheads})$0",
"description": "function Qheads = latexAhead(Qheads)" 
},
"latexQhead": {
"prefix": "latexQhead",
"body": "${1:Qheads = }latexQhead(${2:Qheads})$0",
"description": "function Qheads = latexQhead(Qheads)" 
},
"lrwtestbank2mosotestbank": {
"prefix": "lrwtestbank2mosotestbank",
"body": "${1:TTX = }lrwtestbank2mosotestbank(${2:ftestbank}, ${3:ftestbankmoso}, ${4:chapternoset}, ${5:keyvar}, ${6:keyset})$0",
"description": "function TTX = lrwtestbank2mosotestbank(ftestbank, ftestbankmoso, chapternoset, keyvar, keyset)" 
},
"namecuttile": {
"prefix": "namecuttile",
"body": "${1:[y1, r2] = }namecuttile(${2:x})$0",
"description": "function [y1, r2] = namecuttile(x)" 
},
"namecuttileRemark": {
"prefix": "namecuttileRemark",
"body": "${1:[y1, varargout] = }namecuttileRemark(${2:x})$0",
"description": "function [y1, varargout] = namecuttileRemark(x)" 
},
"normalizeGrade": {
"prefix": "normalizeGrade",
"body": "${1:y = }normalizeGrade(${2:x}, ${3:ymean})$0",
"description": "function y = normalizeGrade(x,ymean)" 
},
"num2cellstrNaN": {
"prefix": "num2cellstrNaN",
"body": "${1:A = }num2cellstrNaN(${2:A})$0",
"description": "function A = num2cellstrNaN(A)" 
},
"num2cellstrTablecol": {
"prefix": "num2cellstrTablecol",
"body": "${1:T = }num2cellstrTablecol(${2:T}, ${3:cols})$0",
"description": "function T = num2cellstrTablecol(T, cols)" 
},
"num2percentagelatex": {
"prefix": "num2percentagelatex",
"body": "${1:b = }num2percentagelatex(${2:a}, ${3:varargin})$0",
"description": "function b = num2percentagelatex(a,varargin)" 
},
"opcolsxxx2y": {
"prefix": "opcolsxxx2y",
"body": "${1:A = }opcolsxxx2y(${2:A}, ${3:xxxcols}, ${4:ycols}, ${5:fn})$0",
"description": "function A = opcolsxxx2y(A, xxxcols,ycols, fn)" 
},
"questionRepVarnames": {
"prefix": "questionRepVarnames",
"body": "${1:[QQ, AA] = }questionRepVarnames(${2:Q}, ${3:A}, ${4:varargin})$0",
"description": "function [QQ, AA] =questionRepVarnames(Q, A, varargin)" 
},
"randSeedBydate": {
"prefix": "randSeedBydate",
"body": "${1:seed = }randSeedBydate(${2:SeedDate})$0",
"description": "function seed = randSeedBydate(SeedDate)" 
},
"randomizeChoiceOptions": {
"prefix": "randomizeChoiceOptions",
"body": "${1:TB = }randomizeChoiceOptions(${2:TB}, ${3:s})$0",
"description": "function TB = randomizeChoiceOptions(TB, s)" 
},
"regexpnumber_demo": {
"prefix": "regexpnumber_demo",
"body": "regexpnumber_demo$0",
"description": "regexpnumber_demo" 
},
"regexprepBlankline2TEX": {
"prefix": "regexprepBlankline2TEX",
"body": "${1:TEX = }regexprepBlankline2TEX(${2:stra})$0",
"description": "function TEX = regexprepBlankline2TEX(stra)" 
},
"regexprepDollar2TEX": {
"prefix": "regexprepDollar2TEX",
"body": "${1:TEX = }regexprepDollar2TEX(${2:stra})$0",
"description": "function TEX = regexprepDollar2TEX(stra)" 
},
"regexprepPercentage2TEX": {
"prefix": "regexprepPercentage2TEX",
"body": "${1:TEX = }regexprepPercentage2TEX(${2:stra})$0",
"description": "function TEX = regexprepPercentage2TEX(stra)" 
},
"regexprepSharpVarWithStructFields": {
"prefix": "regexprepSharpVarWithStructFields",
"body": "${1:TEX = }regexprepSharpVarWithStructFields(${2:stra}, ${3:E})$0",
"description": "function TEX = regexprepSharpVarWithStructFields(stra,E)" 
},
"regexprepTestBank": {
"prefix": "regexprepTestBank",
"body": "${1:TEX = }regexprepTestBank(${2:stra})$0",
"description": "function TEX = regexprepTestBank(stra)" 
},
"regexpreptokensfn_demo": {
"prefix": "regexpreptokensfn_demo",
"body": "regexpreptokensfn_demo$0",
"description": "regexpreptokensfn_demo" 
},
"reorganizeQAChoice": {
"prefix": "reorganizeQAChoice",
"body": "${1:cellQAinOrder = }reorganizeQAChoice(${2:cellQ}, ${3:cellA}, ${4:varargin})$0",
"description": "function cellQAinOrder = reorganizeQAChoice(cellQ, cellA, varargin)" 
},
"reorganizeQAChoice_OLDVERSION": {
"prefix": "reorganizeQAChoice_OLDVERSION",
"body": "${1:cellQAinOrder = }reorganizeQAChoice_OLDVERSION(${2:cellQ}, ${3:cellA}, ${4:varargin})$0",
"description": "function cellQAinOrder = reorganizeQAChoice(cellQ, cellA, varargin)" 
},
"reorganizeQAKey": {
"prefix": "reorganizeQAKey",
"body": "${1:cellQAinOrder = }reorganizeQAKey(${2:cellQ}, ${3:cellA}, ${4:varargin})$0",
"description": "function cellQAinOrder = reorganizeQAKey(cellQ, cellA, varargin)" 
},
"reorganizeQAShort": {
"prefix": "reorganizeQAShort",
"body": "${1:cellQAinOrder = }reorganizeQAShort(${2:cellQ}, ${3:cellA}, ${4:varargin})$0",
"description": "function cellQAinOrder = reorganizeQAShort(cellQ, cellA, varargin)" 
},
"reorganizeQATF": {
"prefix": "reorganizeQATF",
"body": "${1:cellQAinOrder = }reorganizeQATF(${2:cellQ}, ${3:cellA}, ${4:varargin})$0",
"description": "function cellQAinOrder = reorganizeQATF(cellQ, cellA, varargin)" 
},
"repvarInstr": {
"prefix": "repvarInstr",
"body": "${1:str = }repvarInstr(${2:str}, ${3:varsStruct})$0",
"description": "function str = repvarInstr(str,varsStruct)" 
},
"setcolsGradeReport": {
"prefix": "setcolsGradeReport",
"body": "${1:cellA = }setcolsGradeReport(${2:cellA}, ${3:cols})$0",
"description": "function cellA = setcolsGradeReport(cellA, cols)" 
},
"setcolsGradeReportfile": {
"prefix": "setcolsGradeReportfile",
"body": "${1:cellA = }setcolsGradeReportfile(${2:file1}, ${3:sheet1}, ${4:cellA})$0",
"description": "function cellA = setcolsGradeReportfile(file1, sheet1,cellA)" 
},
"splitmatlabeval": {
"prefix": "splitmatlabeval",
"body": "${1:[strcell, tokBlockid, remBlockid, tokremid] = }splitmatlabeval(${2:str}, ${3:tokpattern})$0",
"description": "function [strcell, tokBlockid, remBlockid, tokremid] = splitmatlabeval(str, tokpattern)" 
},
"splitmatlabeval_demo": {
"prefix": "splitmatlabeval_demo",
"body": "splitmatlabeval_demo$0",
"description": "splitmatlabeval_demo" 
},
"stackquestions2str": {
"prefix": "stackquestions2str",
"body": "${1:[strQA, varargout] = }stackquestions2str(${2:Q}, ${3:A}, ${4:INCLUDE})$0",
"description": "function [strQA, varargout]= stackquestions2str(Q,A,INCLUDE)" 
},
"stacksubquestions": {
"prefix": "stacksubquestions",
"body": "${1:Q = }stacksubquestions(${2:q})$0",
"description": "function Q = stacksubquestions(q)" 
},
"strmatlabeval2strlatexQA": {
"prefix": "strmatlabeval2strlatexQA",
"body": "${1:[Qstr, Astr] = }strmatlabeval2strlatexQA(${2:Qstrmatlab}, ${3:Astrmatlab})$0",
"description": "function [Qstr, Astr] = strmatlabeval2strlatexQA(Qstrmatlab, Astrmatlab)" 
},
"strmatlabeval2strlatexQARandStream": {
"prefix": "strmatlabeval2strlatexQARandStream",
"body": "${1:[Qstr, Astr] = }strmatlabeval2strlatexQARandStream(${2:s}, ${3:Qstrmatlab}, ${4:Astrmatlab})$0",
"description": "function [Qstr, Astr] = strmatlabeval2strlatexQARandStream(s,Qstrmatlab, Astrmatlab)" 
},
"strmatlabeval2strlatexRandStream": {
"prefix": "strmatlabeval2strlatexRandStream",
"body": "${1:xx_strlatex = }strmatlabeval2strlatexRandStream(${2:ss}, ${3:xx_strmatlab})$0",
"description": "function xx_strlatex = strmatlabeval2strlatexRandStream(ss,xx_strmatlab)" 
},
"strmatlabeval2strlatexRandStream2017": {
"prefix": "strmatlabeval2strlatexRandStream2017",
"body": "${1:[strQ, strA] = }strmatlabeval2strlatexRandStream2017(${2:ss}, ${3:strQ}, ${4:strA})$0",
"description": "function [strQ, strA] = strmatlabeval2strlatexRandStream2017(ss,strQ, strA)" 
},
"table2structVars": {
"prefix": "table2structVars",
"body": "${1:stru = }table2structVars(${2:Tab}, ${3:vars})$0",
"description": "function stru = table2structVars(Tab,vars)" 
},
"table2structarrayVars": {
"prefix": "table2structarrayVars",
"body": "${1:stru = }table2structarrayVars(${2:Tab}, ${3:vars})$0",
"description": "function stru = table2structarrayVars(Tab,vars)" 
},
"exam": {
"prefix": "exam",
"body": "${1:obj = }exam(${2:fExamInfo}, ${3:varCol}, ${4:examIDCol}, ${5:languageID})$0",
"description": "function obj = exam(fExamInfo,varCol,examIDCol,languageID)" 
},
"getQandACalculate": {
"prefix": "getQandACalculate",
"body": "${1:[QTEX, ATEX] = }getQandACalculate(${2:obj})$0",
"description": "function [QTEX,ATEX] = getQandACalculate(obj)" 
},
"getQandACalculateV2": {
"prefix": "getQandACalculateV2",
"body": "${1:[QTEX, ATEX] = }getQandACalculateV2(${2:obj})$0",
"description": "function [QTEX,ATEX] = getQandACalculateV2(obj)" 
},
"getQandAChoice": {
"prefix": "getQandAChoice",
"body": "${1:[QTEX, ATEX] = }getQandAChoice(${2:obj})$0",
"description": "function [QTEX,ATEX] = getQandAChoice(obj)" 
},
"getQandAKey": {
"prefix": "getQandAKey",
"body": "${1:[QTEX, ATEX] = }getQandAKey(${2:obj})$0",
"description": "function [QTEX,ATEX] = getQandAKey(obj)" 
},
"getQandALong": {
"prefix": "getQandALong",
"body": "${1:[QTEX, ATEX] = }getQandALong(${2:obj})$0",
"description": "function [QTEX,ATEX] = getQandALong(obj)" 
},
"getQandAShort": {
"prefix": "getQandAShort",
"body": "${1:[QTEX, ATEX] = }getQandAShort(${2:obj})$0",
"description": "function [QTEX,ATEX] = getQandAShort(obj)" 
},
"getQandATEX": {
"prefix": "getQandATEX",
"body": "${1:obj = }getQandATEX(${2:obj})$0",
"description": "function  obj  = getQandATEX(obj)" 
},
"getQandATF": {
"prefix": "getQandATF",
"body": "${1:[QTEX, ATEX] = }getQandATF(${2:obj})$0",
"description": "function [QTEX,ATEX] = getQandATF(obj)" 
},
"getQhead": {
"prefix": "getQhead",
"body": "${1:[QheadTEX, AheadTEX, iQ] = }getQhead(${2:obj}, ${3:qType})$0",
"description": "function [QheadTEX, AheadTEX, iQ] = getQhead(obj,qType)" 
},
"language": {
"prefix": "language",
"body": "${1:obj = }language(${2:langID})$0",
"description": "function obj = language(langID)" 
},
"blankunderlineLatex": {
"prefix": "blankunderlineLatex",
"body": "${1:str = }blankunderlineLatex(${2:varargin})$0",
"description": "function str = blankunderlineLatex(varargin)" 
},
"buildExam2018": {
"prefix": "buildExam2018",
"body": "${1:Exam = }buildExam2018(${2:fExamInfo}, ${3:vExamid}, ${4:vlanguageID})$0",
"description": "function [Exam] = buildExam2018(fExamInfo,vExamid,vlanguageID)" 
},
"freadUTF8": {
"prefix": "freadUTF8",
"body": "${1:str = }freadUTF8(${2:file1})$0",
"description": "function str = freadUTF8(file1)" 
},
"getExamQHead2017": {
"prefix": "getExamQHead2017",
"body": "${1:[TEXExamQHead, TEXExamKeyHead, TEXTail] = }getExamQHead2017(${2:E})$0",
"description": "function [TEXExamQHead,TEXExamKeyHead,TEXTail] = getExamQHead2017(E)" 
},
"getExamQHead2018": {
"prefix": "getExamQHead2018",
"body": "${1:[TEXExamQHead, TEXExamKeyHead, TEXExamTail] = }getExamQHead2018(${2:obj})$0",
"description": "function [TEXExamQHead,TEXExamKeyHead,TEXExamTail] = getExamQHead2018(obj)" 
},
"getExamQHeadAHeadTailTex": {
"prefix": "getExamQHeadAHeadTailTex",
"body": "${1:[TEXExamQHead, TEXExamKeyHead, TEXExamTail] = }getExamQHeadAHeadTailTex(${2:obj})$0",
"description": "function [TEXExamQHead,TEXExamKeyHead,TEXExamTail] = getExamQHeadAHeadTailTex(obj)" 
},
"getQ2017Seed": {
"prefix": "getQ2017Seed",
"body": "${1:[strQ, strA] = }getQ2017Seed(${2:tbQ}, ${3:vspace}, ${4:seedi})$0",
"description": "function [strQ,strA] = getQ2017Seed(tbQ, vspace,seedi)" 
},
"mergeQustionStrmatStrtex": {
"prefix": "mergeQustionStrmatStrtex",
"body": "${1:[STRTEX2, strArray, idbetween] = }mergeQustionStrmatStrtex(${2:STRMAT}, ${3:STRTEX})$0",
"description": "function [STRTEX2, strArray, idbetween] = mergeQustionStrmatStrtex(STRMAT,STRTEX)" 
},
"question": {
"prefix": "question",
"body": "${1:self = }question(${2:fmat}, ${3:ftex}, ${4:varargin})$0",
"description": "function self = question(fmat,ftex,varargin)" 
},
"readtableGradeReport_V1": {
"prefix": "readtableGradeReport_V1",
"body": "${1:[T, ids, raw] = }readtableGradeReport(${2:file1}, ${3:sheet1}, ${4:headcols}, ${5:varsintable}, ${6:varargin})$0",
"description": "function [T, ids, raw]= readtableGradeReport(file1,sheet1,headcols,varsintable,varargin)" 
},
"strrepBetweenWithStruct": {
"prefix": "strrepBetweenWithStruct",
"body": "${1:[strB, strArray, idbetween, idbetweenMatched] = }strrepBetweenWithStruct(${2:strA}, ${3:s1}, ${4:s2}, ${5:obj})$0",
"description": "function [strB, strArray,idbetween,idbetweenMatched] = strrepBetweenWithStruct(strA,s1,s2,obj)" 
},
"strrepBetweenWithStruct_demo": {
"prefix": "strrepBetweenWithStruct_demo",
"body": "strrepBetweenWithStruct_demo$0",
"description": "strrepBetweenWithStruct_demo" 
},
"texfile": {
"prefix": "texfile",
"body": "${1:self = }texfile(${2:f})$0",
"description": "function self = texfile(f)" 
},
"Quiz_Moso_2018Spring_demo": {
"prefix": "Quiz_Moso_2018Spring_demo",
"body": "Quiz_Moso_2018Spring_demo$0",
"description": "Quiz_Moso_2018Spring_demo" 
},
"randSelectmosotestbank": {
"prefix": "randSelectmosotestbank",
"body": "${1:TBsetPool = }randSelectmosotestbank(${2:s}, ${3:nQ}, ${4:ftestbankmoso}, ${5:ftestbank}, ${6:chapternoset})$0",
"description": "function TBsetPool = randSelectmosotestbank(s,nQ, ftestbankmoso, ftestbank, chapternoset)" 
},
"ExchangeABAC2BC": {
"prefix": "ExchangeABAC2BC",
"body": "${1:[YZ, ZY, cellYZ] = }ExchangeABAC2BC(${2:AB}, ${3:AC})$0",
"description": "function [YZ, ZY, cellYZ] = ExchangeABAC2BC(AB,AC)" 
},
"computeReturnRateStockBondDivOnBond": {
"prefix": "computeReturnRateStockBondDivOnBond",
"body": "${1:[V, ValueStock, ValueBond] = }computeReturnRateStockBondDivOnBond(${2:TStock}, ${3:rBond})$0",
"description": "function [V, ValueStock, ValueBond] = computeReturnRateStockBondDivOnBond(TStock, rBond)" 
},
"exchangeA2B": {
"prefix": "exchangeA2B",
"body": "${1:[Bprice, varargout] = }exchangeA2B(${2:Aprice}, ${3:AB}, ${4:varargin})$0",
"description": "function [Bprice, varargout] = exchangeA2Bmin(Aprice, AB, varargin)" 
},
"exchangeA2Bmax": {
"prefix": "exchangeA2Bmax",
"body": "${1:Bprice = }exchangeA2Bmax(${2:Aprice}, ${3:AB})$0",
"description": "function Bprice = exchangeA2Bmax(Aprice, AB)" 
},
"exchangeArbitrageTri": {
"prefix": "exchangeArbitrageTri",
"body": "${1:[profit, trace, varargout] = }exchangeArbitrageTri(${2:PA}, ${3:EX11}, ${4:EX22}, ${5:EX33})$0",
"description": "function [profit, trace, varargout] = exchangeArbitrageTri(PA, EX11, EX22, EX33)" 
},
"exchangeSpoint2Future": {
"prefix": "exchangeSpoint2Future",
"body": "${1:USDCHF1M = }exchangeSpoint2Future(${2:USDCHF}, ${3:USDCHFpoint}, ${4:USDCHFbase})$0",
"description": "function USDCHF1M = exchangeSpoint2Future(USDCHF,USDCHFpoint, USDCHFbase )" 
},
"futurevalueStock": {
"prefix": "futurevalueStock",
"body": "${1:[fvstock, netfvstock, ytms, rreal] = }futurevalueStock(${2:stockprice}, ${3:div}, ${4:ke})$0",
"description": "function [fvstock, netfvstock, ytms, rreal] = futurevalueStock(stockprice, div, ke)" 
},
"getFrontierPortfolios": {
"prefix": "getFrontierPortfolios",
"body": "${1:[varp, x, mupMin, pMin] = }getFrontierPortfolios(${2:mu}, ${3:cov}, ${4:mup0})$0",
"description": "function [varp, x, mupMin,pMin] = getFrontierPortfolios(mu, cov, mup0)" 
},
"getTangentPortfolio": {
"prefix": "getTangentPortfolio",
"body": "${1:[varpTangence, mupTangence, wTangence] = }getTangentPortfolio(${2:mu}, ${3:cov}, ${4:rf})$0",
"description": "function [varpTangence,mupTangence,wTangence] = getTangentPortfolio(mu, cov, rf);" 
},
"holdperiodvalueStock": {
"prefix": "holdperiodvalueStock",
"body": "${1:[hpv, r, share] = }holdperiodvalueStock(${2:stockprice}, ${3:div})$0",
"description": "function [hpv, r, share] = holdperiodvalueStock(stockprice, div)" 
},
"indexStockMarketvalue": {
"prefix": "indexStockMarketvalue",
"body": "${1:[idxPortfolio1, Returnrate, SharesT1, ValueT1] = }indexStockMarketvalue(${2:P}, ${3:Q})$0",
"description": "function [idxPortfolio1,  Returnrate,SharesT1,ValueT1] = indexStockMarketvalue(P,Q)" 
},
"indexStockPrice": {
"prefix": "indexStockPrice",
"body": "${1:[idxPrice, ReturnRate, divisorT, idxShareEqual] = }indexStockPrice(${2:P}, ${3:Q})$0",
"description": "function [idxPrice, ReturnRate, divisorT, idxShareEqual] = indexStockPriceWeight(P,Q)" 
},
"indexStockfixedPortfolio": {
"prefix": "indexStockfixedPortfolio",
"body": "${1:[idxPortfolio, SharesT, ValueT] = }indexStockfixedPortfolio(${2:P}, ${3:Q}, ${4:SharesInitial})$0",
"description": "function [idxPortfolio, SharesT,ValueT] = indexStockfixedPortfolio(P,Q,SharesInitial)" 
},
"indexWeightEqual": {
"prefix": "indexWeightEqual",
"body": "${1:[idxWEqual, ReturnRate] = }indexWeightEqual(${2:P}, ${3:Q})$0",
"description": "function [idxWEqual, ReturnRate] = indexWeightEqual(P,Q)" 
},
"irrCoupon": {
"prefix": "irrCoupon",
"body": "${1:ytm = }irrCoupon(${2:maturity}, ${3:facevalue}, ${4:couponrate}, ${5:initialprice})$0",
"description": "function ytm = irrCoupon(maturity, facevalue, couponrate, initialprice)" 
},
"irr_lrw": {
"prefix": "irr_lrw",
"body": "${1:r = }irr_lrw(${2:cf})$0",
"description": "function r = irr_lrw(cf)" 
},
"irrstock": {
"prefix": "irrstock",
"body": "${1:rstock = }irrstock(${2:stockprice}, ${3:div})$0",
"description": "function rstock = irrstock(stockprice, div)" 
},
"meanDiscrete": {
"prefix": "meanDiscrete",
"body": "${1:imean = }meanDiscrete(${2:P}, ${3:X})$0",
"description": "function imean = meanDiscrete(P,X)" 
},
"presentvalueStock": {
"prefix": "presentvalueStock",
"body": "${1:[pvstock, netpvstock, ytms] = }presentvalueStock(${2:stockprice}, ${3:div}, ${4:ke})$0",
"description": "function [pvstock, netpvstock, ytms] = presentvalueStock(stockprice, div, ke)" 
},
"pvvarCoupon": {
"prefix": "pvvarCoupon",
"body": "${1:pv = }pvvarCoupon(${2:maturity}, ${3:facevalue}, ${4:couponrate}, ${5:ytm})$0",
"description": "function pv = pvvarCoupon(maturity, facevalue, couponrate, ytm)" 
},
"stockreturn_demo": {
"prefix": "stockreturn_demo",
"body": "stockreturn_demo$0",
"description": "stockreturn_demo" 
},
"varDiscrete": {
"prefix": "varDiscrete",
"body": "${1:iVar = }varDiscrete(${2:P}, ${3:X})$0",
"description": "function iVar = varDiscrete(P,X)" 
},
"Demo1_CIWebinar": {
"prefix": "Demo1_CIWebinar",
"body": "Demo1_CIWebinar$0",
"description": "Demo1_CIWebinar" 
},
"Demo2_Pairs_Trading": {
"prefix": "Demo2_Pairs_Trading",
"body": "Demo2_Pairs_Trading$0",
"description": "Demo2_Pairs_Trading" 
},
"README": {
"prefix": "README",
"body": "README$0",
"description": "README" 
},
"demo_mysqlODBC": {
"prefix": "demo_mysqlODBC",
"body": "demo_mysqlODBC$0",
"description": "demo_mysqlODBC" 
},
"pairsChart": {
"prefix": "pairsChart",
"body": "pairsChart(${2:LCO}, ${3:WTI})$0",
"description": "function pairsChart(LCO, WTI)" 
},
"getMinuteDataFromDB": {
"prefix": "getMinuteDataFromDB",
"body": "${1:out = }getMinuteDataFromDB(${2:tableName})$0",
"description": "function out = getMinuteDataFromDB(tableName)" 
},
"pairs_V1": {
"prefix": "pairs_V1",
"body": "${1:varargout = }pairs(${2:series2}, ${3:M}, ${4:N}, ${5:spread}, ${6:scaling}, ${7:cost})$0",
"description": "function varargout = pairs(series2, M, N, spread, scaling, cost)" 
},
"pairsFun": {
"prefix": "pairsFun",
"body": "${1:sh = }pairsFun(${2:x}, ${3:data}, ${4:scaling}, ${5:cost})$0",
"description": "function sh = pairsFun(x,data,scaling,cost)" 
},
"parameterSweep": {
"prefix": "parameterSweep",
"body": "${1:[respmax, varmax, resp, var] = }parameterSweep(${2:fun}, ${3:range})$0",
"description": "function [respmax,varmax,resp,var] = parameterSweep(fun,range)" 
},
"Main_tushare_pro_test": {
"prefix": "Main_tushare_pro_test",
"body": "Main_tushare_pro_test$0",
"description": "Main_tushare_pro_test" 
},
"pro_api": {
"prefix": "pro_api",
"body": "${1:api = }pro_api(${2:token})$0",
"description": "function api = pro_api(token)" 
},
"pro_bar": {
"prefix": "pro_bar",
"body": "${1:data = }pro_bar(${2:ts_code}, ${3:pro_api}, ${4:start_date}, ${5:end_date}, ${6:freq}, ${7:asset}, ${8:market}, ${9:adj}, ${10:ma}, ${11:factors}, ${12:retry_count})$0",
"description": "function data = pro_bar(ts_code, pro_api, start_date, end_date, freq, asset, market, adj, ma, factors, retry_count)" 
},
"tushare_pro_test": {
"prefix": "tushare_pro_test",
"body": "tushare_pro_test$0",
"description": "tushare_pro_test" 
},
"xxx": {
"prefix": "xxx",
"body": "xxx$0",
"description": "xxx" 
},
"addcell": {
"prefix": "addcell",
"body": "${1:C = }addcell(${2:A}, ${3:B})$0",
"description": "function C = addcell(A, B)" 
},
"gradeAttendance": {
"prefix": "gradeAttendance",
"body": "${1:cellGrade1 = }gradeAttendance(${2:fileAtten1})$0",
"description": "function cellGrade1 = GradeAttendance(fileAtten1)" 
},
"gradeIndividualWork": {
"prefix": "gradeIndividualWork",
"body": "${1:cellGradeIndividualwork = }gradeIndividualWork(${2:file1})$0",
"description": "function cellGradeIndividualwork = gradeIndividualWork(file1)" 
},
"gradeQandA": {
"prefix": "gradeQandA",
"body": "${1:cellGrade = }gradeQandA(${2:fileQA})$0",
"description": "function cellGrade = GradeQandA(fileQA)" 
},
"gradeTeamwork": {
"prefix": "gradeTeamwork",
"body": "${1:[cellGradeTeamwork, varargout] = }gradeTeamwork(${2:file1}, ${3:sheet1}, ${4:headmembers}, ${5:headGrades})$0",
"description": "function [cellGradeTeamwork, varargout] = gradeteamwork(file1, sheet1, headmembers, headGrades)" 
},
"gradingHomework": {
"prefix": "gradingHomework",
"body": "gradingHomework(${2:filein}, ${3:fileout}, ${4:filestudentid})$0",
"description": "function [] = gradingHomework(filein, fileout, filestudentid)" 
},
"gradingHomework2": {
"prefix": "gradingHomework2",
"body": "gradingHomework2(${2:filein}, ${3:fileout}, ${4:filestudentid})$0",
"description": "function [] = gradingHomework2(filein, fileout, filestudentid)" 
},
"mainGrading": {
"prefix": "mainGrading",
"body": "mainGrading$0",
"description": "mainGrading" 
},
"markceilIterpt": {
"prefix": "markceilIterpt",
"body": "${1:MarkCeilAdj = }markceilIterpt(${2:MarkCeil})$0",
"description": "function MarkCeilAdj =  markceilIterpt(MarkCeil)" 
},
"randnlimit": {
"prefix": "randnlimit",
"body": "${1:x = }randnlimit(${2:mu}, ${3:sigma}, ${4:minVal}, ${5:maxVal}, ${6:varargin})$0",
"description": "function x = randnlimit(mu, sigma, minVal, maxVal, varargin);" 
},
"randnlimitlrw": {
"prefix": "randnlimitlrw",
"body": "${1:x = }randnlimitlrw(${2:imean}, ${3:istd}, ${4:a}, ${5:b}, ${6:nstudent}, ${7:varargin})$0",
"description": "function x = randnlimitlrw(imean, istd, a, b, nstudent, varargin)" 
},
"randnlimitv2": {
"prefix": "randnlimitv2",
"body": "${1:X = }randnlimitv2(${2:n}, ${3:x_max}, ${4:x_min})$0",
"description": "function X=randnlimitv2(n, x_max, x_min)" 
},
"seatingplan": {
"prefix": "seatingplan",
"body": "${1:cellseating = }seatingplan(${2:cellnamelist}, ${3:NameIDName}, ${4:nCol})$0",
"description": "function cellseating = seatingplan(cellnamelist, NameIDName, nCol)" 
},
"normal_01_cdf": {
"prefix": "normal_01_cdf",
"body": "${1:cdf = }normal_01_cdf(${2:x})$0",
"description": "function cdf = normal_01_cdf ( x )" 
},
"normal_01_cdf_inv": {
"prefix": "normal_01_cdf_inv",
"body": "${1:value = }normal_01_cdf_inv(${2:p})$0",
"description": "function value = normal_01_cdf_inv ( p )" 
},
"normal_01_mean": {
"prefix": "normal_01_mean",
"body": "${1:mean = }normal_01_mean$0",
"description": "function mean = normal_01_mean ( )" 
},
"normal_01_moment": {
"prefix": "normal_01_moment",
"body": "${1:value = }normal_01_moment(${2:order})$0",
"description": "function value = normal_01_moment ( order )" 
},
"normal_01_pdf": {
"prefix": "normal_01_pdf",
"body": "${1:pdf = }normal_01_pdf(${2:x})$0",
"description": "function pdf = normal_01_pdf ( x )" 
},
"normal_01_sample": {
"prefix": "normal_01_sample",
"body": "${1:[x, seed] = }normal_01_sample(${2:seed})$0",
"description": "function [ x, seed ] = normal_01_sample ( seed )" 
},
"normal_01_variance": {
"prefix": "normal_01_variance",
"body": "${1:variance = }normal_01_variance$0",
"description": "function variance = normal_01_variance ( )" 
},
"normal_cdf": {
"prefix": "normal_cdf",
"body": "${1:cdf = }normal_cdf(${2:x}, ${3:a}, ${4:b})$0",
"description": "function cdf = normal_cdf ( x, a, b )" 
},
"normal_cdf_inv": {
"prefix": "normal_cdf_inv",
"body": "${1:x = }normal_cdf_inv(${2:cdf}, ${3:a}, ${4:b})$0",
"description": "function x = normal_cdf_inv ( cdf, a, b )" 
},
"normal_mean": {
"prefix": "normal_mean",
"body": "${1:mean = }normal_mean(${2:a}, ${3:b})$0",
"description": "function mean = normal_mean ( a, b )" 
},
"normal_moment": {
"prefix": "normal_moment",
"body": "${1:value = }normal_moment(${2:order}, ${3:mu}, ${4:sigma})$0",
"description": "function value = normal_moment ( order, mu, sigma )" 
},
"normal_moment_central": {
"prefix": "normal_moment_central",
"body": "${1:value = }normal_moment_central(${2:order}, ${3:mu}, ${4:sigma})$0",
"description": "function value = normal_moment_central ( order, mu, sigma )" 
},
"normal_moment_central_values": {
"prefix": "normal_moment_central_values",
"body": "${1:value = }normal_moment_central_values(${2:order}, ${3:mu}, ${4:sigma})$0",
"description": "function value = normal_moment_central_values ( order, mu, sigma )" 
},
"normal_moment_values": {
"prefix": "normal_moment_values",
"body": "${1:value = }normal_moment_values(${2:order}, ${3:mu}, ${4:sigma})$0",
"description": "function value = normal_moment_values ( order, mu, sigma )" 
},
"normal_pdf": {
"prefix": "normal_pdf",
"body": "${1:pdf = }normal_pdf(${2:x}, ${3:a}, ${4:b})$0",
"description": "function pdf = normal_pdf ( x, a, b )" 
},
"normal_sample": {
"prefix": "normal_sample",
"body": "${1:[x, seed] = }normal_sample(${2:a}, ${3:b}, ${4:seed})$0",
"description": "function [ x, seed ] = normal_sample ( a, b, seed )" 
},
"normal_variance": {
"prefix": "normal_variance",
"body": "${1:variance = }normal_variance(${2:a}, ${3:b})$0",
"description": "function variance = normal_variance ( a, b )" 
},
"r8_mop": {
"prefix": "r8_mop",
"body": "${1:value = }r8_mop(${2:i})$0",
"description": "function value = r8_mop ( i )" 
},
"r8_uniform_01": {
"prefix": "r8_uniform_01",
"body": "${1:[r, seed] = }r8_uniform_01(${2:seed})$0",
"description": "function [ r, seed ] = r8_uniform_01 ( seed )" 
},
"r8poly_value": {
"prefix": "r8poly_value",
"body": "${1:value = }r8poly_value(${2:n}, ${3:a}, ${4:x})$0",
"description": "function value = r8poly_value ( n, a, x )" 
},
"timestamp": {
"prefix": "timestamp",
"body": "timestamp$0",
"description": "function timestamp ( )" 
},
"truncated_normal_a_cdf": {
"prefix": "truncated_normal_a_cdf",
"body": "${1:cdf = }truncated_normal_a_cdf(${2:x}, ${3:mu}, ${4:s}, ${5:a})$0",
"description": "function cdf = truncated_normal_a_cdf ( x, mu, s, a )" 
},
"truncated_normal_a_cdf_inv": {
"prefix": "truncated_normal_a_cdf_inv",
"body": "${1:x = }truncated_normal_a_cdf_inv(${2:cdf}, ${3:mu}, ${4:s}, ${5:a})$0",
"description": "function x = truncated_normal_a_cdf_inv ( cdf, mu, s, a )" 
},
"truncated_normal_a_cdf_values": {
"prefix": "truncated_normal_a_cdf_values",
"body": "${1:[n_data, mu, sigma, a, x, fx] = }truncated_normal_a_cdf_values(${2:n_data})$0",
"description": "function [ n_data, mu, sigma, a, x, fx ] = truncated_normal_a_cdf_values ( n_data )" 
},
"truncated_normal_a_mean": {
"prefix": "truncated_normal_a_mean",
"body": "${1:mean = }truncated_normal_a_mean(${2:mu}, ${3:s}, ${4:a})$0",
"description": "function mean = truncated_normal_a_mean ( mu, s, a )" 
},
"truncated_normal_a_moment": {
"prefix": "truncated_normal_a_moment",
"body": "${1:moment = }truncated_normal_a_moment(${2:order}, ${3:mu}, ${4:s}, ${5:a})$0",
"description": "function moment = truncated_normal_a_moment ( order, mu, s, a )" 
},
"truncated_normal_a_pdf": {
"prefix": "truncated_normal_a_pdf",
"body": "${1:pdf = }truncated_normal_a_pdf(${2:x}, ${3:mu}, ${4:s}, ${5:a})$0",
"description": "function pdf = truncated_normal_a_pdf ( x, mu, s, a )" 
},
"truncated_normal_a_pdf_values": {
"prefix": "truncated_normal_a_pdf_values",
"body": "${1:[n_data, mu, sigma, a, x, fx] = }truncated_normal_a_pdf_values(${2:n_data})$0",
"description": "function [ n_data, mu, sigma, a, x, fx ] = truncated_normal_a_pdf_values ( n_data )" 
},
"truncated_normal_a_sample": {
"prefix": "truncated_normal_a_sample",
"body": "${1:[x, seed] = }truncated_normal_a_sample(${2:mu}, ${3:s}, ${4:a}, ${5:seed})$0",
"description": "function [ x, seed ] = truncated_normal_a_sample ( mu, s, a, seed )" 
},
"truncated_normal_a_variance": {
"prefix": "truncated_normal_a_variance",
"body": "${1:variance = }truncated_normal_a_variance(${2:mu}, ${3:s}, ${4:a})$0",
"description": "function variance = truncated_normal_a_variance ( mu, s, a )" 
},
"truncated_normal_ab_cdf": {
"prefix": "truncated_normal_ab_cdf",
"body": "${1:cdf = }truncated_normal_ab_cdf(${2:x}, ${3:mu}, ${4:s}, ${5:a}, ${6:b})$0",
"description": "function cdf = truncated_normal_ab_cdf ( x, mu, s, a, b )" 
},
"truncated_normal_ab_cdf_inv": {
"prefix": "truncated_normal_ab_cdf_inv",
"body": "${1:x = }truncated_normal_ab_cdf_inv(${2:cdf}, ${3:mu}, ${4:s}, ${5:a}, ${6:b})$0",
"description": "function x = truncated_normal_ab_cdf_inv ( cdf, mu, s, a, b )" 
},
"truncated_normal_ab_cdf_values": {
"prefix": "truncated_normal_ab_cdf_values",
"body": "${1:[n_data, mu, sigma, a, b, x, fx] = }truncated_normal_ab_cdf_values(${2:n_data})$0",
"description": "function [ n_data, mu, sigma, a, b, x, fx ] = truncated_normal_ab_cdf_values ( n_data )" 
},
"truncated_normal_ab_mean": {
"prefix": "truncated_normal_ab_mean",
"body": "${1:mean = }truncated_normal_ab_mean(${2:mu}, ${3:s}, ${4:a}, ${5:b})$0",
"description": "function mean = truncated_normal_ab_mean ( mu, s, a, b )" 
},
"truncated_normal_ab_moment": {
"prefix": "truncated_normal_ab_moment",
"body": "${1:moment = }truncated_normal_ab_moment(${2:order}, ${3:mu}, ${4:s}, ${5:a}, ${6:b})$0",
"description": "function moment = truncated_normal_ab_moment ( order, mu, s, a, b )" 
},
"truncated_normal_ab_pdf": {
"prefix": "truncated_normal_ab_pdf",
"body": "${1:pdf = }truncated_normal_ab_pdf(${2:x}, ${3:mu}, ${4:s}, ${5:a}, ${6:b})$0",
"description": "function pdf = truncated_normal_ab_pdf ( x, mu, s, a, b )" 
},
"truncated_normal_ab_pdf_values": {
"prefix": "truncated_normal_ab_pdf_values",
"body": "${1:[n_data, mu, sigma, a, b, x, fx] = }truncated_normal_ab_pdf_values(${2:n_data})$0",
"description": "function [ n_data, mu, sigma, a, b, x, fx ] = truncated_normal_ab_pdf_values ( n_data )" 
},
"truncated_normal_ab_sample": {
"prefix": "truncated_normal_ab_sample",
"body": "${1:[x, seed] = }truncated_normal_ab_sample(${2:mu}, ${3:s}, ${4:a}, ${5:b}, ${6:seed})$0",
"description": "function [ x, seed ] = truncated_normal_ab_sample ( mu, s, a, b, seed )" 
},
"truncated_normal_ab_variance": {
"prefix": "truncated_normal_ab_variance",
"body": "${1:variance = }truncated_normal_ab_variance(${2:mu}, ${3:s}, ${4:a}, ${5:b})$0",
"description": "function variance = truncated_normal_ab_variance ( mu, s, a, b )" 
},
"truncated_normal_b_cdf": {
"prefix": "truncated_normal_b_cdf",
"body": "${1:cdf = }truncated_normal_b_cdf(${2:x}, ${3:mu}, ${4:s}, ${5:b})$0",
"description": "function cdf = truncated_normal_b_cdf ( x, mu, s, b )" 
},
"truncated_normal_b_cdf_inv": {
"prefix": "truncated_normal_b_cdf_inv",
"body": "${1:x = }truncated_normal_b_cdf_inv(${2:cdf}, ${3:mu}, ${4:s}, ${5:b})$0",
"description": "function x = truncated_normal_ab_cdf_inv ( cdf, mu, s, b )" 
},
"truncated_normal_b_cdf_values": {
"prefix": "truncated_normal_b_cdf_values",
"body": "${1:[n_data, mu, sigma, b, x, fx] = }truncated_normal_b_cdf_values(${2:n_data})$0",
"description": "function [ n_data, mu, sigma, b, x, fx ] = truncated_normal_b_cdf_values ( n_data )" 
},
"truncated_normal_b_mean": {
"prefix": "truncated_normal_b_mean",
"body": "${1:mean = }truncated_normal_b_mean(${2:mu}, ${3:s}, ${4:b})$0",
"description": "function mean = truncated_normal_b_mean ( mu, s, b )" 
},
"truncated_normal_b_moment": {
"prefix": "truncated_normal_b_moment",
"body": "${1:moment = }truncated_normal_b_moment(${2:order}, ${3:mu}, ${4:s}, ${5:b})$0",
"description": "function moment = truncated_normal_b_moment ( order, mu, s, b )" 
},
"truncated_normal_b_pdf": {
"prefix": "truncated_normal_b_pdf",
"body": "${1:pdf = }truncated_normal_b_pdf(${2:x}, ${3:mu}, ${4:s}, ${5:b})$0",
"description": "function pdf = truncated_normal_b_pdf ( x, mu, s, b )" 
},
"truncated_normal_b_pdf_values": {
"prefix": "truncated_normal_b_pdf_values",
"body": "${1:[n_data, mu, sigma, b, x, fx] = }truncated_normal_b_pdf_values(${2:n_data})$0",
"description": "function [ n_data, mu, sigma, b, x, fx ] = truncated_normal_b_pdf_values ( n_data )" 
},
"truncated_normal_b_sample": {
"prefix": "truncated_normal_b_sample",
"body": "${1:[x, seed] = }truncated_normal_b_sample(${2:mu}, ${3:s}, ${4:b}, ${5:seed})$0",
"description": "function [ x, seed ] = truncated_normal_b_sample ( mu, s, b, seed )" 
},
"truncated_normal_b_variance": {
"prefix": "truncated_normal_b_variance",
"body": "${1:variance = }truncated_normal_b_variance(${2:mu}, ${3:s}, ${4:b})$0",
"description": "function variance = truncated_normal_b_variance ( mu, s, b )" 
},
"truncated_normal_test": {
"prefix": "truncated_normal_test",
"body": "truncated_normal_test$0",
"description": "function truncated_normal_test ( )" 
},
"truncated_normal_test01": {
"prefix": "truncated_normal_test01",
"body": "truncated_normal_test01$0",
"description": "function truncated_normal_test01 ( )" 
},
"truncated_normal_test02": {
"prefix": "truncated_normal_test02",
"body": "truncated_normal_test02$0",
"description": "function truncated_normal_test02 ( )" 
},
"truncated_normal_test03": {
"prefix": "truncated_normal_test03",
"body": "truncated_normal_test03$0",
"description": "function truncated_normal_test03 ( )" 
},
"truncated_normal_test04": {
"prefix": "truncated_normal_test04",
"body": "truncated_normal_test04$0",
"description": "function truncated_normal_test04 ( )" 
},
"truncated_normal_test05": {
"prefix": "truncated_normal_test05",
"body": "truncated_normal_test05$0",
"description": "function truncated_normal_test05 ( )" 
},
"truncated_normal_test06": {
"prefix": "truncated_normal_test06",
"body": "truncated_normal_test06$0",
"description": "function truncated_normal_test06 ( )" 
},
"truncated_normal_test07": {
"prefix": "truncated_normal_test07",
"body": "truncated_normal_test07$0",
"description": "function truncated_normal_test07 ( )" 
},
"truncated_normal_test08": {
"prefix": "truncated_normal_test08",
"body": "truncated_normal_test08$0",
"description": "function truncated_normal_test08 ( )" 
},
"truncated_normal_test09": {
"prefix": "truncated_normal_test09",
"body": "truncated_normal_test09$0",
"description": "function truncated_normal_test09 ( )" 
},
"truncated_normal_test10": {
"prefix": "truncated_normal_test10",
"body": "truncated_normal_test10$0",
"description": "function truncated_normal_test10 ( )" 
},
"truncated_normal_test11": {
"prefix": "truncated_normal_test11",
"body": "truncated_normal_test11$0",
"description": "function truncated_normal_test11 ( )" 
},
"truncated_normal_test12": {
"prefix": "truncated_normal_test12",
"body": "truncated_normal_test12$0",
"description": "function truncated_normal_test12 ( )" 
},
"truncated_normal_test13": {
"prefix": "truncated_normal_test13",
"body": "truncated_normal_test13$0",
"description": "function truncated_normal_test13 ( )" 
},
"truncated_normal_test15": {
"prefix": "truncated_normal_test15",
"body": "truncated_normal_test15$0",
"description": "function truncated_normal_test15 ( )" 
},
"truncated_normal_test16": {
"prefix": "truncated_normal_test16",
"body": "truncated_normal_test16$0",
"description": "function truncated_normal_test16 ( )" 
},
"truncated_normal_test17": {
"prefix": "truncated_normal_test17",
"body": "truncated_normal_test17$0",
"description": "function truncated_normal_test17 ( )" 
},
"truncated_normal_test18": {
"prefix": "truncated_normal_test18",
"body": "truncated_normal_test18$0",
"description": "function truncated_normal_test18 ( )" 
},
"truncated_normal_test19": {
"prefix": "truncated_normal_test19",
"body": "truncated_normal_test19$0",
"description": "function truncated_normal_test19 ( )" 
},
"truncated_normal_test20": {
"prefix": "truncated_normal_test20",
"body": "truncated_normal_test20$0",
"description": "function truncated_normal_test20 ( )" 
},
"truncated_normal_test21": {
"prefix": "truncated_normal_test21",
"body": "truncated_normal_test21$0",
"description": "function truncated_normal_test21 ( )" 
},
"truncated_normal_test22": {
"prefix": "truncated_normal_test22",
"body": "truncated_normal_test22$0",
"description": "function truncated_normal_test22 ( )" 
},
"rmvnrnd": {
"prefix": "rmvnrnd",
"body": "${1:[X, rho, nar, ngibbs] = }rmvnrnd(${2:mu}, ${3:sigma}, ${4:N}, ${5:A}, ${6:b}, ${7:rhoThr}, ${8:debug})$0",
"description": "function [X, rho, nar, ngibbs] = rmvnrnd(mu,sigma,N,A,b,rhoThr,debug)" 
},
"rmvnrnd_eg": {
"prefix": "rmvnrnd_eg",
"body": "rmvnrnd_eg$0",
"description": "rmvnrnd_eg" 
},
"ArrangeTeamworkSchedule": {
"prefix": "ArrangeTeamworkSchedule",
"body": "${1:[Tc, TR] = }ArrangeTeamworkSchedule(${2:firstday}, ${3:Days}, ${4:fxls})$0",
"description": "function [Tc,TR] = ArrangeTeamworkSchedule(firstday,Days, fxls)" 
},
"ArrangeTeamworkSchedule_Invest2018Autumn_demo": {
"prefix": "ArrangeTeamworkSchedule_Invest2018Autumn_demo",
"body": "ArrangeTeamworkSchedule_Invest2018Autumn_demo$0",
"description": "ArrangeTeamworkSchedule_Invest2018Autumn_demo" 
},
"ArrangeTeamworkSchedule_demo": {
"prefix": "ArrangeTeamworkSchedule_demo",
"body": "ArrangeTeamworkSchedule_demo$0",
"description": "ArrangeTeamworkSchedule_demo" 
},
"ArrangeTeamworkandClassEvent": {
"prefix": "ArrangeTeamworkandClassEvent",
"body": "${1:TC = }ArrangeTeamworkandClassEvent(${2:firstdayOfTerm}, ${3:holidays}, ${4:Classes})$0",
"description": "function TC = ArrangeTeamworkandClassEvent(firstdayOfTerm, holidays,Classes)" 
},
"ArrangeTeamworkandClassEvent_demo2018": {
"prefix": "ArrangeTeamworkandClassEvent_demo2018",
"body": "ArrangeTeamworkandClassEvent_demo2018$0",
"description": "ArrangeTeamworkandClassEvent_demo2018" 
},
"ArrangeTeamworkandClassEvent_demo201902": {
"prefix": "ArrangeTeamworkandClassEvent_demo201902",
"body": "ArrangeTeamworkandClassEvent_demo201902$0",
"description": "ArrangeTeamworkandClassEvent_demo201902" 
},
"Class2GoogleCalendar": {
"prefix": "Class2GoogleCalendar",
"body": "${1:TCalendarGoogle = }Class2GoogleCalendar(${2:Class}, ${3:TC1})$0",
"description": "function TCalendarGoogle = Class2GoogleCalendar(Class,TC1)" 
},
"createCalendarAllSchoolWeek": {
"prefix": "createCalendarAllSchoolWeek",
"body": "${1:TCalendar = }createCalendarAllSchoolWeek(${2:firstdayOfTerm})$0",
"description": "function TCalendar = createCalendarAllSchoolWeek(firstdayOfTerm)" 
},
"createClassAgendaAndCalendar": {
"prefix": "createClassAgendaAndCalendar",
"body": "${1:[TAgenda, TCalendarGoogle] = }createClassAgendaAndCalendar(${2:firstdayOfTerm}, ${3:holidays}, ${4:Classinfo})$0",
"description": "function [TAgenda,TCalendarGoogle] = createClassAgendaAndCalendar(firstdayOfTerm,holidays,Classinfo)" 
},
"createClassAgendaAndCalendarBatch": {
"prefix": "createClassAgendaAndCalendarBatch",
"body": "${1:[TAgendaSet, TCalendarGoogleSet] = }createClassAgendaAndCalendarBatch(${2:firstdayOfTerm}, ${3:holidays}, ${4:Classes})$0",
"description": "function [TAgendaSet,TCalendarGoogleSet] = createClassAgendaAndCalendarBatch(firstdayOfTerm,holidays,Classes)" 
},
"createEmptyArray": {
"prefix": "createEmptyArray",
"body": "${1:valueEmpty = }createEmptyArray(${2:value}, ${3:m}, ${4:n})$0",
"description": "function valueEmpty = createEmptyArray(value,m,n)" 
},
"eventsForOptionalCourse": {
"prefix": "eventsForOptionalCourse",
"body": "${1:event = }eventsForOptionalCourse(${2:varargin})$0",
"description": "function event = eventsForOptionalCourse( varargin)" 
},
"eventsForRequiredCourse": {
"prefix": "eventsForRequiredCourse",
"body": "${1:event = }eventsForRequiredCourse(${2:varargin})$0",
"description": "function event = eventsForRequiredCourse(varargin)" 
},
"getQtypeAndQno": {
"prefix": "getQtypeAndQno",
"body": "${1:[idQtype, Qnoi] = }getQtypeAndQno(${2:Qstr}, ${3:QTypeLabel}, ${4:QnoLabel})$0",
"description": "function [idQtype, Qnoi] = getQtypeAndQno(Qstr, QTypeLabel, QnoLabel)" 
},
"getQuestionAns": {
"prefix": "getQuestionAns",
"body": "${1:Questions = }getQuestionAns(${2:forg}, ${3:sheetQ}, ${4:sheetans}, ${5:ftarget}, ${6:sheettarget}, ${7:QuestionType}, ${8:ChapterNo}, ${9:strNoQ}, ${10:strOptQ}, ${11:strNoAns})$0",
"description": "function Questions = getQuestionAns(forg, sheetQ, sheetans, ftarget, sheettarget, QuestionType,ChapterNo,strNoQ, strOptQ, strNoAns)" 
},
"getQuestionAnsCell2LRW": {
"prefix": "getQuestionAnsCell2LRW",
"body": "${1:Questions = }getQuestionAnsCell2LRW(${2:cellQorg}, ${3:cellAnsorg}, ${4:ftarget}, ${5:sheettarget}, ${6:QuestionType}, ${7:ChapterNo}, ${8:strNoQ}, ${9:strOptQ}, ${10:strNoAns})$0",
"description": "function Questions = getQuestionAnsCell2LRW(cellQorg, cellAnsorg, ftarget, sheettarget, QuestionType,ChapterNo,strNoQ, strOptQ, strNoAns)" 
},
"getQuestionChoiceCell": {
"prefix": "getQuestionChoiceCell",
"body": "${1:cellQAdj = }getQuestionChoiceCell(${2:cellQorg}, ${3:strNoQ}, ${4:strOptQ})$0",
"description": "function cellQAdj = getQuestionChoiceCellnew(cellQorg, strNoQ, strOptQ)" 
},
"getQuestionTFCell": {
"prefix": "getQuestionTFCell",
"body": "${1:cellQAdj = }getQuestionTFCell(${2:cellQorg}, ${3:strNoQ}, ${4:strOptQ})$0",
"description": "function cellQAdj = getQuestionTFCell(cellQorg, strNoQ, strOptQ)" 
},
"getans": {
"prefix": "getans",
"body": "${1:cellans = }getans(${2:cellAns}, ${3:strOPT})$0",
"description": "function cellans = getans(cellAns, strOPT)" 
},
"getansShort": {
"prefix": "getansShort",
"body": "${1:cellans = }getansShort(${2:cellAns}, ${3:strOPT})$0",
"description": "function cellans = getansShort(cellAns, strOPT)" 
},
"testbank_LRW2BB": {
"prefix": "testbank_LRW2BB",
"body": "${1:strss = }testbank_LRW2BB(${2:forg}, ${3:sheetQ}, ${4:ftarget}, ${5:varargin})$0",
"description": "function strss = testbank_LRW2BB(forg, sheetQ, ftarget, varargin)" 
},
"testbank_TESTGENTxt2LRW_demo": {
"prefix": "testbank_TESTGENTxt2LRW_demo",
"body": "testbank_TESTGENTxt2LRW_demo$0",
"description": "testbank_TESTGENTxt2LRW_demo" 
},
"CodeGenFortran": {
"prefix": "CodeGenFortran",
"body": "CodeGenFortran$0",
"description": "CodeGenFortran" 
},
"CodeGenFortran2D": {
"prefix": "CodeGenFortran2D",
"body": "CodeGenFortran2D$0",
"description": "CodeGenFortran2D" 
},
"inputouput2fortran": {
"prefix": "inputouput2fortran",
"body": "inputouput2fortran(${2:fid}, ${3:outputlist}, ${4:inputlist})$0",
"description": "function inputouput2fortran(fid, outputlist, inputlist)" 
},
"ln": {
"prefix": "ln",
"body": "${1:y = }ln(${2:x})$0",
"description": "function y = ln(x)" 
},
"var2fortran": {
"prefix": "var2fortran",
"body": "var2fortran(${2:fid}, ${3:name})$0",
"description": "function varx2fortran(fid, name)" 
},
"varx2fortran": {
"prefix": "varx2fortran",
"body": "varx2fortran(${2:fid}, ${3:name})$0",
"description": "function varx2fortran(fid, name)" 
},
"write2mfile_d": {
"prefix": "write2mfile_d",
"body": "write2mfile_d$0",
"description": "write2mfile_d" 
},
"codemetrics": {
"prefix": "codemetrics",
"body": "${1:varargout = }codemetrics(${2:workingDir})$0",
"description": "function varargout = codemetrics(workingDir)" 
},
"._Contents": {
"prefix": "._Contents",
"body": "._Contents$0",
"description": "._Contents" 
},
"._codemetrics": {
"prefix": "._codemetrics",
"body": "._codemetrics$0",
"description": "._codemetrics" 
},
"._computeMetrics": {
"prefix": "._computeMetrics",
"body": "._computeMetrics$0",
"description": "._computeMetrics" 
},
"._createReport": {
"prefix": "._createReport",
"body": "._createReport$0",
"description": "._createReport" 
},
"._generateStats": {
"prefix": "._generateStats",
"body": "._generateStats$0",
"description": "._generateStats" 
},
"computeMetrics": {
"prefix": "computeMetrics",
"body": "${1:metrics = }computeMetrics(${2:stats})$0",
"description": "function metrics = computeMetrics(stats)" 
},
"createReport": {
"prefix": "createReport",
"body": "createReport(${2:metrics}, ${3:title}, ${4:file})$0",
"description": "function createReport(metrics,title,file)" 
},
"generateStats": {
"prefix": "generateStats",
"body": "${1:stats = }generateStats(${2:dirName})$0",
"description": "function stats = generateStats(dirName)" 
},
"GDPLabor_sum": {
"prefix": "GDPLabor_sum",
"body": "GDPLabor_sum$0",
"description": "GDPLabor_sum" 
},
"TS2Panel": {
"prefix": "TS2Panel",
"body": "${1:rawB = }TS2Panel(${2:rawA}, ${3:varargin})$0",
"description": "function rawB = TS2Panel(rawA, varargin)" 
},
"_____loadxls": {
"prefix": "_____loadxls",
"body": "_____loadxls(${2:file}, ${3:sheet})$0",
"description": "function loadxls(file,sheet)" 
},
"___loadcsv": {
"prefix": "___loadcsv",
"body": "___loadcsv(${2:sourcefile}, ${3:densityfile})$0",
"description": "function csv2mat(sourcefile,densityfile)" 
},
"assertcase": {
"prefix": "assertcase",
"body": "${1:icase = }assertcase(${2:x}, ${3:varargin})$0",
"description": "function icase = assertcase(x,varargin)" 
},
"avg": {
"prefix": "avg",
"body": "${1:SeqDen = }avg(${2:Seq}, ${3:iSubSeq})$0",
"description": "function SeqDen = avg(Seq, iSubSeq)" 
},
"avg_d": {
"prefix": "avg_d",
"body": "avg_d$0",
"description": "avg_d" 
},
"cell2csv_V1": {
"prefix": "cell2csv_V1",
"body": "cell2csv(${2:fileName}, ${3:cellArray}, ${4:separator}, ${5:excelYear}, ${6:decimal})$0",
"description": "function cell2csv(fileName, cellArray, separator, excelYear, decimal)" 
},
"cell2csvlrw": {
"prefix": "cell2csvlrw",
"body": "cell2csvlrw(${2:fileName}, ${3:cellArray}, ${4:separator}, ${5:excelYear}, ${6:decimal})$0",
"description": "function cell2csv(fileName, cellArray, separator, excelYear, decimal)" 
},
"cell2dataset": {
"prefix": "cell2dataset",
"body": "${1:dsobj = }cell2dataset(${2:cellobj}, ${3:varargin})$0",
"description": "function dsobj = cell2dataset(cellobj, varargin)" 
},
"cell2dataset_d": {
"prefix": "cell2dataset_d",
"body": "cell2dataset_d$0",
"description": "cell2dataset_d" 
},
"cell2ds": {
"prefix": "cell2ds",
"body": "${1:ds = }cell2ds(${2:A})$0",
"description": "function ds = cell2ds(A)" 
},
"cell2ds_d": {
"prefix": "cell2ds_d",
"body": "cell2ds_d$0",
"description": "cell2ds_d" 
},
"cell2matfile": {
"prefix": "cell2matfile",
"body": "cell2matfile(${2:cellvar}, ${3:matfile})$0",
"description": "function cell2matfile(cellvar, matfile)" 
},
"cell2matfile_d": {
"prefix": "cell2matfile_d",
"body": "cell2matfile_d$0",
"description": "cell2matfile_d" 
},
"cell2nestedstruct": {
"prefix": "cell2nestedstruct",
"body": "${1:S = }cell2nestedstruct(${2:C})$0",
"description": "function [S] = cell2nestedstruct(C)" 
},
"cell2str_V1": {
"prefix": "cell2str_V1",
"body": "${1:str = }cell2str(${2:cells}, ${3:delim})$0",
"description": "function str = cell2str(cells,delim)" 
},
"cell2vars_sub_d": {
"prefix": "cell2vars_sub_d",
"body": "cell2vars_sub_d$0",
"description": "function cell2vars_sub_d()" 
},
"cellHeapCell": {
"prefix": "cellHeapCell",
"body": "${1:A = }cellHeapCell(${2:A}, ${3:B})$0",
"description": "function A = cellHeapCell(A, B)" 
},
"comparematrix": {
"prefix": "comparematrix",
"body": "comparematrix(${2:A}, ${3:B})$0",
"description": "function comparematrix(A,B)" 
},
"comparematrix2": {
"prefix": "comparematrix2",
"body": "comparematrix2(${2:A}, ${3:B})$0",
"description": "function comparematrix2(A,B)" 
},
"comparematrixAB": {
"prefix": "comparematrixAB",
"body": "comparematrixAB(${2:A}, ${3:B})$0",
"description": "function showmatrixAB(A,B)" 
},
"csv2mat": {
"prefix": "csv2mat",
"body": "csv2mat(${2:sourcefile__}, ${3:destinefile__})$0",
"description": "function csv2mat(sourcefile__,destinefile__)" 
},
"csv2mat_d": {
"prefix": "csv2mat_d",
"body": "csv2mat_d$0",
"description": "csv2mat_d" 
},
"dataclean": {
"prefix": "dataclean",
"body": "${1:A = }dataclean(${2:A})$0",
"description": "function A = dataclean(A)" 
},
"datacleanCellDateStr": {
"prefix": "datacleanCellDateStr",
"body": "${1:A = }datacleanCellDateStr(${2:A}, ${3:colDate}, ${4:colStr})$0",
"description": "function A = datacleanCellDateStr(A, colDate, colStr)" 
},
"datacleanCellDatestrOLD": {
"prefix": "datacleanCellDatestrOLD",
"body": "${1:A = }datacleanCellDatestrOLD(${2:A}, ${3:colnames})$0",
"description": "function A = datacleanCellDatestr(A, colnames)" 
},
"datacleanDate": {
"prefix": "datacleanDate",
"body": "${1:A = }datacleanDate(${2:A})$0",
"description": "function A = datacleanDate(A)" 
},
"datacleanDatenum": {
"prefix": "datacleanDatenum",
"body": "${1:A = }datacleanDatenum(${2:A})$0",
"description": "function A = datacleanDatenum(A)" 
},
"datastr2datanendRobust": {
"prefix": "datastr2datanendRobust",
"body": "${1:Daten = }datastr2datanendRobust(${2:A}, ${3:yearspan})$0",
"description": "function Daten = datestr2datenumEndRobust(A,yearspan)" 
},
"devi": {
"prefix": "devi",
"body": "${1:SeqDen = }devi(${2:Seq}, ${3:iSubSeq})$0",
"description": "function SeqDen = devi(Seq,iSubSeq)" 
},
"deviPercent": {
"prefix": "deviPercent",
"body": "${1:SeqDen = }deviPercent(${2:Seq}, ${3:iSubSeq})$0",
"description": "function SeqDen = deviPercent(Seq,iSubSeq)" 
},
"deviation": {
"prefix": "deviation",
"body": "${1:SeqDen = }deviation(${2:Seq})$0",
"description": "function SeqDen = deviation(Seq)" 
},
"deviation_d": {
"prefix": "deviation_d",
"body": "deviation_d$0",
"description": "deviation_d" 
},
"diff0": {
"prefix": "diff0",
"body": "${1:A = }diff0(${2:A})$0",
"description": "function A = diff0(A)" 
},
"diff01": {
"prefix": "diff01",
"body": "${1:A = }diff01(${2:A})$0",
"description": "function A = diff01(A)" 
},
"diff10": {
"prefix": "diff10",
"body": "${1:A = }diff10(${2:A})$0",
"description": "function A = diff10(A)" 
},
"diffPercent": {
"prefix": "diffPercent",
"body": "${1:SeqDen = }diffPercent(${2:Seq})$0",
"description": "function SeqDen = diffPercent(Seq)" 
},
"diffPercent0": {
"prefix": "diffPercent0",
"body": "${1:SeqDen = }diffPercent0(${2:Seq})$0",
"description": "function SeqDen = diffPercent0(Seq)" 
},
"diffcell10": {
"prefix": "diffcell10",
"body": "${1:cellA = }diffcell10(${2:cellA}, ${3:cols}, ${4:varargin})$0",
"description": "function cellA = diffcell10(cellA, cols,varargin)" 
},
"difflogcell": {
"prefix": "difflogcell",
"body": "${1:cellA = }difflogcell(${2:cellA}, ${3:cols}, ${4:varargin})$0",
"description": "function cellA = difflogcell(cellA, cols,varargin)" 
},
"difflogcell01": {
"prefix": "difflogcell01",
"body": "${1:cellA = }difflogcell01(${2:cellA}, ${3:cols}, ${4:varargin})$0",
"description": "function cellA = difflogcell01(cellA, cols,varargin)" 
},
"difflogcell10": {
"prefix": "difflogcell10",
"body": "${1:cellA = }difflogcell10(${2:cellA}, ${3:cols}, ${4:varargin})$0",
"description": "function cellA = difflogcell10(cellA, cols,varargin)" 
},
"dirf": {
"prefix": "dirf",
"body": "${1:Paths = }dirf(${2:pathfold}, ${3:pattern})$0",
"description": "function Paths = dirf(pathfold, pattern)" 
},
"dirp": {
"prefix": "dirp",
"body": "${1:Paths = }dirp(${2:pathfold}, ${3:pattern})$0",
"description": "function Paths = dirp(pathfold, pattern)" 
},
"dispCell": {
"prefix": "dispCell",
"body": "dispCell(${2:varargin})$0",
"description": "function showcell(varargin)" 
},
"drop": {
"prefix": "drop",
"body": "drop(${2:densityFile}, ${3:varargin})$0",
"description": "function drop(densityFile, varargin)" 
},
"dropcols": {
"prefix": "dropcols",
"body": "${1:A = }dropcols(${2:A}, ${3:names})$0",
"description": "function A = dropcols(A, names)" 
},
"dropcols_d": {
"prefix": "dropcols_d",
"body": "dropcols_d$0",
"description": "dropcols_d" 
},
"ds2cell": {
"prefix": "ds2cell",
"body": "${1:resCell = }ds2cell(${2:ds})$0",
"description": "function resCell = ds2cell(ds)" 
},
"enddayofmoth_d": {
"prefix": "enddayofmoth_d",
"body": "enddayofmoth_d$0",
"description": "function enddayofmoth_d" 
},
"evalincaller": {
"prefix": "evalincaller",
"body": "evalincaller(${2:varnames}, ${3:values})$0",
"description": "function evalincaller(varnames,values)" 
},
"gathercellarray": {
"prefix": "gathercellarray",
"body": "${1:C = }gathercellarray(${2:A}, ${3:varargin})$0",
"description": "function C = gatherstructurecell(A, varargin)" 
},
"gatherstructcell": {
"prefix": "gatherstructcell",
"body": "${1:C = }gatherstructcell(${2:A}, ${3:varargin})$0",
"description": "function C = gatherstructcell(A, varargin)" 
},
"getcols": {
"prefix": "getcols",
"body": "${1:cellB = }getcols(${2:cellA}, ${3:namecols}, ${4:varargin})$0",
"description": "function cellB = getcols(cellA, namecols, varargin)" 
},
"ginicoeff": {
"prefix": "ginicoeff",
"body": "${1:[coeff, IDX] = }ginicoeff(${2:In}, ${3:dim}, ${4:nosamplecorr})$0",
"description": "function [coeff, IDX] = ginicoeff(In,dim,nosamplecorr)" 
},
"ginigroup": {
"prefix": "ginigroup",
"body": "${1:gini = }ginigroup(${2:income}, ${3:popu}, ${4:varargin})$0",
"description": "function gini = ginigroup(income,popu,varargin)" 
},
"id": {
"prefix": "id",
"body": "${1:iSubSeq  varargout = }id(${2:Seq}, ${3:SubSeq})$0",
"description": "function [iSubSeq  varargout]= id(Seq, SubSeq)" 
},
"idexNaN": {
"prefix": "idexNaN",
"body": "${1:index = }idexNaN(${2:A})$0",
"description": "function index =indexNaN(A)" 
},
"idset": {
"prefix": "idset",
"body": "${1:ia iar ib ibr = }idset(${2:A}, ${3:B})$0",
"description": "function [ia iar ib ibr] = idset(A, B)%" 
},
"idset_d": {
"prefix": "idset_d",
"body": "idset_d$0",
"description": "idset_d" 
},
"importmatfile": {
"prefix": "importmatfile",
"body": "importmatfile(${2:varargin})$0",
"description": "function importmatfile(varargin)" 
},
"importxls2matfile": {
"prefix": "importxls2matfile",
"body": "importxls2matfile(${2:keys}, ${3:vnewm})$0",
"description": "function importxls2matfile(keys, vnewm)" 
},
"importxls2matfile_back": {
"prefix": "importxls2matfile_back",
"body": "importxls2matfile_back(${2:varargin})$0",
"description": "function importxls2matfile(varargin)" 
},
"indexNaN": {
"prefix": "indexNaN",
"body": "${1:index = }indexNaN(${2:A})$0",
"description": "function index =indexnotNaN(A)" 
},
"indexSubPeriod": {
"prefix": "indexSubPeriod",
"body": "${1:iPeriod = }indexSubPeriod(${2:Period}, ${3:SubPeriod})$0",
"description": "function iPeriod = indexSubPeriod(Period, SubPeriod)" 
},
"indexSubPeriod_d": {
"prefix": "indexSubPeriod_d",
"body": "indexSubPeriod_d$0",
"description": "indexSubPeriod_d" 
},
"indexSubSeq": {
"prefix": "indexSubSeq",
"body": "${1:iSubSeq = }indexSubSeq(${2:Seq}, ${3:SubSeq})$0",
"description": "function iSubSeq = indexSubSeq(Seq, SubSeq)" 
},
"indexSubSeq_d": {
"prefix": "indexSubSeq_d",
"body": "indexSubSeq_d$0",
"description": "indexSubSeq_d" 
},
"indexnnotNaN": {
"prefix": "indexnnotNaN",
"body": "${1:index = }indexnnotNaN(${2:A})$0",
"description": "function index =indexnotNaN(A)" 
},
"indexnotNaN": {
"prefix": "indexnotNaN",
"body": "${1:index = }indexnotNaN(${2:A})$0",
"description": "function index =indexnotNaN(A)" 
},
"isCellnumcheck": {
"prefix": "isCellnumcheck",
"body": "${1:TF = }isCellnumcheck(${2:A})$0",
"description": "function TF = isCellnumcheck(A)" 
},
"isCellstrcheck": {
"prefix": "isCellstrcheck",
"body": "${1:varargout = }isCellstrcheck(${2:A})$0",
"description": "function varargout = isCellstrcheck(A)" 
},
"iscolstr": {
"prefix": "iscolstr",
"body": "${1:tf = }iscolstr(${2:A})$0",
"description": "function tf = iscolstr(A)" 
},
"iseven_V1": {
"prefix": "iseven_V1",
"body": "${1:ise = }iseven(${2:x})$0",
"description": "function ise = iseven(x)" 
},
"isnotnanrows": {
"prefix": "isnotnanrows",
"body": "${1:tfNaNrows = }isnotnanrows(${2:A})$0",
"description": "function tfNaNrows = isnotnanrows(A)" 
},
"isodd_V1": {
"prefix": "isodd_V1",
"body": "${1:iso = }isodd(${2:x})$0",
"description": "function iso = isodd(x)" 
},
"isodd_test": {
"prefix": "isodd_test",
"body": "isodd_test$0",
"description": "isodd_test" 
},
"isrows": {
"prefix": "isrows",
"body": "${1:tfs = }isrows(${2:A}, ${3:aNames}, ${4:aSubs})$0",
"description": "function tfs = isrows(A, aNames, aSubs)" 
},
"join_d": {
"prefix": "join_d",
"body": "join_d$0",
"description": "join_d" 
},
"keep": {
"prefix": "keep",
"body": "keep(${2:densityFile}, ${3:varargin})$0",
"description": "function keep(densityFile, varargin)" 
},
"laborstat": {
"prefix": "laborstat",
"body": "laborstat$0",
"description": "laborstat" 
},
"loadmatonly": {
"prefix": "loadmatonly",
"body": "loadmatonly(${2:sourcefile__}, ${3:varYear__}, ${4:densityfile__}, ${5:varlist__})$0",
"description": "function  loadmatonly(sourcefile__, varYear__, densityfile__, varlist__)" 
},
"loadxls": {
"prefix": "loadxls",
"body": "${1:raw = }loadxls(${2:key})$0",
"description": "function raw = loadxls(key)" 
},
"loadxlsonly": {
"prefix": "loadxlsonly",
"body": "${1:varargout = }loadxlsonly(${2:sourcefile}, ${3:sheetname}, ${4:varList}, ${5:varargin})$0",
"description": "function [varargout] = loadxlsonly(sourcefile, sheetname, varList, varargin)" 
},
"mat2matonly": {
"prefix": "mat2matonly",
"body": "mat2matonly(${2:sourcefile__}, ${3:matfile__}, ${4:varlist__}, ${5:varargin})$0",
"description": "function  mat2matonly(sourcefile__,  matfile__, varlist__, varargin)" 
},
"mat2matonly_d": {
"prefix": "mat2matonly_d",
"body": "mat2matonly_d$0",
"description": "mat2matonly_d" 
},
"mat2txt_V1": {
"prefix": "mat2txt_V1",
"body": "mat2txt(${2:sourcefile__}, ${3:destinefile__})$0",
"description": "function mat2txt(sourcefile__,destinefile__)" 
},
"mat2txt_d": {
"prefix": "mat2txt_d",
"body": "mat2txt_d$0",
"description": "mat2txt_d" 
},
"mat2xls": {
"prefix": "mat2xls",
"body": "mat2xls(${2:sourcefile__}, ${3:destinefile__}, ${4:sheetname__})$0",
"description": "function mat2xls(sourcefile__, destinefile__, sheetname__)" 
},
"mat2xls1": {
"prefix": "mat2xls1",
"body": "mat2xls1(${2:sourcefile__}, ${3:destinefile__}, ${4:sheetname__})$0",
"description": "function mat2xls(sourcefile__, destinefile__,sheetname__)" 
},
"mat2xls_d": {
"prefix": "mat2xls_d",
"body": "mat2xls_d$0",
"description": "mat2xls_d" 
},
"mat2xls_d2": {
"prefix": "mat2xls_d2",
"body": "mat2xls_d2$0",
"description": "mat2xls_d2" 
},
"mat2xlssub_d": {
"prefix": "mat2xlssub_d",
"body": "mat2xlssub_d$0",
"description": "mat2xlssub_d" 
},
"matAppendmat_d": {
"prefix": "matAppendmat_d",
"body": "matAppendmat_d$0",
"description": "matAppendmat_d" 
},
"matAppendmatonly": {
"prefix": "matAppendmatonly",
"body": "matAppendmatonly(${2:fileStock__}, ${3:YearStockOrg__}, ${4:fileFlow__}, ${5:YearFlowOrg__}, ${6:only__})$0",
"description": "function matAppendmatonly(fileStock__, YearStockOrg__, fileFlow__, YearFlowOrg__,only__)" 
},
"matCensor": {
"prefix": "matCensor",
"body": "matCensor(${2:fileOrg}, ${3:fileNew}, ${4:idName}, ${5:idSub})$0",
"description": "function matCensor(fileOrg, fileNew, idName, idSub)" 
},
"matfile2cell": {
"prefix": "matfile2cell",
"body": "${1:cellDensity = }matfile2cell(${2:matfile})$0",
"description": "function cellDensity = matfile2cell(matfile)" 
},
"matfile2cell_d": {
"prefix": "matfile2cell_d",
"body": "matfile2cell_d$0",
"description": "matfile2cell_d" 
},
"matfile2xls": {
"prefix": "matfile2xls",
"body": "matfile2xls(${2:destinefile__}, ${3:sheetname__}, ${4:varargin})$0",
"description": "function matrix2xls(destinefile__,sheetname__,varargin)" 
},
"matlabel2cell": {
"prefix": "matlabel2cell",
"body": "${1:cellB = }matlabel2cell(${2:A}, ${3:varargin})$0",
"description": "function cellB = matlabel2cell(A, varargin)" 
},
"matrix2strbalanced": {
"prefix": "matrix2strbalanced",
"body": "${1:cellA = }matrix2strbalanced(${2:A})$0",
"description": "function cellA = matrix2strbalanced(A)" 
},
"matrix2xls": {
"prefix": "matrix2xls",
"body": "matrix2xls(${2:destinefile__}, ${3:sheetname__}, ${4:varargin})$0",
"description": "function matrix2xls(destinefile__,sheetname__,varargin)" 
},
"meanQ": {
"prefix": "meanQ",
"body": "${1:res = }meanQ(${2:y}, ${3:yhat})$0",
"description": "function res = meanQ(y, yhat)" 
},
"merge_V1": {
"prefix": "merge_V1",
"body": "${1:C = }merge(${2:A}, ${3:B})$0",
"description": "function C = merge(A, B)" 
},
"mergeCell": {
"prefix": "mergeCell",
"body": "${1:C = }mergeCell(${2:A}, ${3:B})$0",
"description": "function C = mergeCell(A, B)" 
},
"mergecellkey": {
"prefix": "mergecellkey",
"body": "${1:[C, cellconflict] = }mergecellkey(${2:A}, ${3:B}, ${4:keys})$0",
"description": "function [C, cellconflict]  = mergecellkey(A, B, keys)" 
},
"mergecellskey": {
"prefix": "mergecellskey",
"body": "${1:[cellB, cellconflict] = }mergecellskey(${2:varargin})$0",
"description": "function [cellB, cellconflict]= mergecellskey(varargin)" 
},
"mergecellskey_d": {
"prefix": "mergecellskey_d",
"body": "mergecellskey_d$0",
"description": "mergecellskey_d" 
},
"mergekey": {
"prefix": "mergekey",
"body": "${1:C = }mergekey(${2:A}, ${3:B}, ${4:keys})$0",
"description": "function C = mergekey(A, B, keys)" 
},
"mergexlskey": {
"prefix": "mergexlskey",
"body": "mergexlskey(${2:filename}, ${3:sheetsOrg}, ${4:sheetDensity}, ${5:keys})$0",
"description": "function mergexlskey(filename, sheetsOrg, sheetDensity, keys)" 
},
"mergexlskey_d": {
"prefix": "mergexlskey_d",
"body": "mergexlskey_d$0",
"description": "mergexlskey_d" 
},
"mysize": {
"prefix": "mysize",
"body": "${1:[s, varargout] = }mysize(${2:x})$0",
"description": "function [s,varargout] = mysize(x)" 
},
"nanadd": {
"prefix": "nanadd",
"body": "nanadd(${2:varargin})$0",
"description": "function nanadd(varargin)" 
},
"naturalNumber": {
"prefix": "naturalNumber",
"body": "${1:B = }naturalNumber(${2:A}, ${3:varargin})$0",
"description": "function B = naturalNumber(A,varargin)" 
},
"nestedstruct2cell": {
"prefix": "nestedstruct2cell",
"body": "${1:C = }nestedstruct2cell(${2:S}, ${3:root})$0",
"description": "function [C] = nestedstruct2cell(S,root)" 
},
"normalizedto100": {
"prefix": "normalizedto100",
"body": "${1:x = }normalizedto100(${2:x}, ${3:varargin})$0",
"description": "function x = normalizedto100(x,varargin)" 
},
"num2date": {
"prefix": "num2date",
"body": "${1:T = }num2date(${2:Date1})$0",
"description": "function T = num2date(Date1)" 
},
"num2datestr": {
"prefix": "num2datestr",
"body": "${1:dateStr0 = }num2datestr(${2:num})$0",
"description": "function dateStr0 = num2datestr(num)" 
},
"opcolsCell": {
"prefix": "opcolsCell",
"body": "${1:A = }opcolsCell(${2:A}, ${3:colnames}, ${4:fn})$0",
"description": "function A = opcolsCell(A, colnames, fn)" 
},
"opcolsCell_d": {
"prefix": "opcolsCell_d",
"body": "opcolsCell_d$0",
"description": "function opcolsCell_d" 
},
"opthreecolsCell": {
"prefix": "opthreecolsCell",
"body": "${1:A = }opthreecolsCell(${2:A}, ${3:colnames}, ${4:fn})$0",
"description": "function A = opthreecolsCell(A, colnames, fn)" 
},
"optwocolsCell": {
"prefix": "optwocolsCell",
"body": "${1:A = }optwocolsCell(${2:A}, ${3:colnames}, ${4:fn})$0",
"description": "function A = optwocolsCell(A, colnames, fn)" 
},
"optwocolsCell_d": {
"prefix": "optwocolsCell_d",
"body": "optwocolsCell_d$0",
"description": "optwocolsCell_d" 
},
"outportmatfile": {
"prefix": "outportmatfile",
"body": "outportmatfile(${2:key}, ${3:varargin})$0",
"description": "function outportmatfile(key,varargin)" 
},
"pageid2panel": {
"prefix": "pageid2panel",
"body": "${1:panelTarget = }pageid2panel(${2:Acell}, ${3:nameid})$0",
"description": "function panelTarget = pageid2panel(Acell, nameid)" 
},
"pageid2panel_d": {
"prefix": "pageid2panel_d",
"body": "pageid2panel_d$0",
"description": "pageid2panel_d" 
},
"pagevar2panel": {
"prefix": "pagevar2panel",
"body": "${1:panelTarget = }pagevar2panel(${2:Acell}, ${3:varargin})$0",
"description": "function panelTarget = pagevar2panel(Acell, varargin)" 
},
"pagevar2panel_d": {
"prefix": "pagevar2panel_d",
"body": "pagevar2panel_d$0",
"description": "pagevar2panel_d" 
},
"pageyear2panel": {
"prefix": "pageyear2panel",
"body": "${1:panelTarget = }pageyear2panel(${2:Acell}, ${3:nameyear})$0",
"description": "function panelTarget = pageyear2panel(Acell, nameyear)" 
},
"panel2pagevar": {
"prefix": "panel2pagevar",
"body": "${1:Bcell = }panel2pagevar(${2:Acell}, ${3:vars})$0",
"description": "function Bcell = panel2pagevar(Acell,vars)" 
},
"panel2pagevar_d": {
"prefix": "panel2pagevar_d",
"body": "panel2pagevar_d$0",
"description": "panel2pagevar_d" 
},
"plotFnNorm": {
"prefix": "plotFnNorm",
"body": "${1:h = }plotFnNorm(${2:xy}, ${3:xyname}, ${4:style}, ${5:varargin})$0",
"description": "function h = plotFnNorm(xy,xyname,style,varargin)" 
},
"plotFnk": {
"prefix": "plotFnk",
"body": "${1:h = }plotFnk(${2:xy}, ${3:xyname}, ${4:style})$0",
"description": "function h = plotFnk(xy,xyname,style)" 
},
"provincename_d": {
"prefix": "provincename_d",
"body": "provincename_d$0",
"description": "provincename_d" 
},
"putvars": {
"prefix": "putvars",
"body": "${1:rawA = }putvars(${2:rawA}, ${3:namecols}, ${4:vars})$0",
"description": "function rawA = putvars(rawA, namecols, vars)" 
},
"readline": {
"prefix": "readline",
"body": "${1:LINES = }readline(${2:FILE}, ${3:NLINE}, ${4:TYPE}, ${5:varargin})$0",
"description": "function LINES = readline(FILE,NLINE,TYPE,varargin)" 
},
"rename": {
"prefix": "rename",
"body": "rename(${2:densityFile}, ${3:variablesOrg}, ${4:variablesDensity})$0",
"description": "function rename(densityFile, variablesOrg, variablesDensity)" 
},
"renamecolsCell": {
"prefix": "renamecolsCell",
"body": "${1:A = }renamecolsCell(${2:A}, ${3:nameOld}, ${4:nameNew})$0",
"description": "function A = renamecolsCell(A, nameOld, nameNew)" 
},
"renamecolsCell_d": {
"prefix": "renamecolsCell_d",
"body": "renamecolsCell_d$0",
"description": "renamecolsCell_d" 
},
"rencols": {
"prefix": "rencols",
"body": "${1:A = }rencols(${2:A}, ${3:nameOld}, ${4:nameNew})$0",
"description": "function A = rencols(A, nameOld, nameNew)" 
},
"repbatch": {
"prefix": "repbatch",
"body": "${1:A = }repbatch(${2:A}, ${3:YX})$0",
"description": "function A = repbatch(A, YX)" 
},
"repbatch_d": {
"prefix": "repbatch_d",
"body": "repbatch_d$0",
"description": "repbatch_d" 
},
"repcmp": {
"prefix": "repcmp",
"body": "${1:A = }repcmp(${2:A}, ${3:YX})$0",
"description": "function A = repcmp(A, YX)" 
},
"repfind": {
"prefix": "repfind",
"body": "${1:A = }repfind(${2:A}, ${3:YX})$0",
"description": "function A = repfind(A, YX)" 
},
"repfind_d": {
"prefix": "repfind_d",
"body": "repfind_d$0",
"description": "repfind_d" 
},
"repvar": {
"prefix": "repvar",
"body": "${1:A = }repvar(${2:A}, ${3:namevar}, ${4:map})$0",
"description": "function A = repvar(A, namevar, map)" 
},
"repvarcmp": {
"prefix": "repvarcmp",
"body": "${1:A = }repvarcmp(${2:A}, ${3:namevar}, ${4:map})$0",
"description": "function A = repvarcmp(A, namevar, map)" 
},
"repvarfind": {
"prefix": "repvarfind",
"body": "${1:A = }repvarfind(${2:A}, ${3:namevar}, ${4:map})$0",
"description": "function A = repvarfind(A, namevar, map)" 
},
"selectCell": {
"prefix": "selectCell",
"body": "${1:B = }selectCell(${2:A}, ${3:aName}, ${4:aSub})$0",
"description": "function B = selectCell(A, aName, aSub)" 
},
"selectCell_d": {
"prefix": "selectCell_d",
"body": "selectCell_d$0",
"description": "selectCell_d" 
},
"setcols": {
"prefix": "setcols",
"body": "${1:A = }setcols(${2:A}, ${3:cols}, ${4:content})$0",
"description": "function A = setcols(A, cols, content)" 
},
"setvar": {
"prefix": "setvar",
"body": "${1:A = }setvar(${2:A}, ${3:nameVar}, ${4:z})$0",
"description": "function  A = setvar(A, nameVar, z)" 
},
"showcell": {
"prefix": "showcell",
"body": "showcell(${2:varargin})$0",
"description": "function showcell(varargin)" 
},
"showvars": {
"prefix": "showvars",
"body": "${1:varargout = }showvars(${2:varargin})$0",
"description": "function varargout = showvars(varargin)" 
},
"sortCols": {
"prefix": "sortCols",
"body": "${1:cellA = }sortCols(${2:cellA}, ${3:cols}, ${4:varargin})$0",
"description": "function cellA = sortRowsByCols(cellA, cols,varargin)" 
},
"sortrowsCell": {
"prefix": "sortrowsCell",
"body": "${1:cellA = }sortrowsCell(${2:cellA}, ${3:cols})$0",
"description": "function cellA = sortrowscell(cellA, cols)" 
},
"stepfun": {
"prefix": "stepfun",
"body": "${1:y = }stepfun(${2:x}, ${3:keypoints})$0",
"description": "function y = stepfun(x,keypoints)" 
},
"str2cell": {
"prefix": "str2cell",
"body": "${1:c = }str2cell(${2:s}, ${3:varargin})$0",
"description": "function	c=str2cell(s,varargin)" 
},
"str2cell2D": {
"prefix": "str2cell2D",
"body": "${1:B = }str2cell2D(${2:str}, ${3:delimRow}, ${4:delimCol})$0",
"description": "function B = str2cell2D(str, delimRow, delimCol)" 
},
"str2cell_d": {
"prefix": "str2cell_d",
"body": "str2cell_d$0",
"description": "str2cell_d" 
},
"strcell2cell": {
"prefix": "strcell2cell",
"body": "${1:B = }strcell2cell(${2:A}, ${3:delim})$0",
"description": "function B = strcell2cell(A, delim)" 
},
"strrepbatch": {
"prefix": "strrepbatch",
"body": "${1:A = }strrepbatch(${2:A}, ${3:yx})$0",
"description": "function A = strrepbatch(A, yx)" 
},
"strrepbatch_d": {
"prefix": "strrepbatch_d",
"body": "strrepbatch_d$0",
"description": "strrepbatch_d" 
},
"summarycell": {
"prefix": "summarycell",
"body": "${1:varargout = }summarycell(${2:Acell})$0",
"description": "function varargout = summarycell(Acell)" 
},
"txt2mat": {
"prefix": "txt2mat",
"body": "txt2mat(${2:sourcefile__}, ${3:destinefile__})$0",
"description": "function txt2mat(sourcefile__,destinefile__)" 
},
"txt2mat_d": {
"prefix": "txt2mat_d",
"body": "txt2mat_d$0",
"description": "txt2mat_d" 
},
"txtread": {
"prefix": "txtread",
"body": "${1:varargout = }txtread$0",
"description": "function [varargout] = txtread;" 
},
"typecheck": {
"prefix": "typecheck",
"body": "typecheck$0",
"description": "typecheck" 
},
"vars2cell": {
"prefix": "vars2cell",
"body": "${1:cellA = }vars2cell(${2:varargin})$0",
"description": "function cellA = vars2cell(varargin)" 
},
"vars2cell_d": {
"prefix": "vars2cell_d",
"body": "vars2cell_d$0",
"description": "vars2cell_d" 
},
"vars2tab": {
"prefix": "vars2tab",
"body": "${1:cellA = }vars2tab(${2:varargin})$0",
"description": "function cellA = vars2cell(varargin)" 
},
"vartype": {
"prefix": "vartype",
"body": "vartype(${2:varargin})$0",
"description": "function vartype(varargin)" 
},
"data_csmar_read": {
"prefix": "data_csmar_read",
"body": "data_csmar_read$0",
"description": "data_csmar_read" 
},
"readCsmar_demo": {
"prefix": "readCsmar_demo",
"body": "readCsmar_demo$0",
"description": "readCsmar_demo" 
},
"readtableCSMAR": {
"prefix": "readtableCSMAR",
"body": "${1:[T, Tvarlist] = }readtableCSMAR(${2:f}, ${3:varargin})$0",
"description": "function [T,Tvarlist] = readtableCSMAR(f,varargin)" 
},
"readtableCSMARENCNsmart": {
"prefix": "readtableCSMARENCNsmart",
"body": "${1:[T1, C1, heads] = }readtableCSMARENCNsmart(${2:path1})$0",
"description": "function [T1, C1, heads] = readtableCSMARENCNsmart(path1)" 
},
"readtableScmar_demo": {
"prefix": "readtableScmar_demo",
"body": "readtableScmar_demo$0",
"description": "readtableScmar_demo" 
},
"readtxtCSMAR": {
"prefix": "readtxtCSMAR",
"body": "${1:[T, TDataID] = }readtxtCSMAR(${2:f}, ${3:varargin})$0",
"description": "function [T, TDataID]= readtxtCSMAR(f,varargin)" 
},
"readtxtCSMARDES": {
"prefix": "readtxtCSMARDES",
"body": "${1:[T, TDataID] = }readtxtCSMARDES(${2:f}, ${3:fdes})$0",
"description": "function [T, TDataID]= readtxtCSMARDES(f,fdes)" 
},
"readtxtCSMARDES_demo": {
"prefix": "readtxtCSMARDES_demo",
"body": "readtxtCSMARDES_demo$0",
"description": "readtxtCSMARDES_demo" 
},
"readtxtCSMARMatlab": {
"prefix": "readtxtCSMARMatlab",
"body": "${1:sta = }readtxtCSMARMatlab(${2:f})$0",
"description": "function sta = readtxtCSMARMatlab(f)" 
},
"readtxtLineSplit": {
"prefix": "readtxtLineSplit",
"body": "${1:E = }readtxtLineSplit(${2:f}, ${3:nlines}, ${4:Delimiter})$0",
"description": "function E = readtxtLineSplit(f, nlines, Delimiter)" 
},
"unstackMultiVars": {
"prefix": "unstackMultiVars",
"body": "${1:T = }unstackMultiVars(${2:T}, ${3:vars}, ${4:indicatorVar}, ${5:varsNotchange}, ${6:varargin})$0",
"description": "function T = unstackMultiVars(T,vars,indicatorVar,varsNotchange,varargin)" 
},
"ismissingForManyClass": {
"prefix": "ismissingForManyClass",
"body": "${1:tfmissing = }ismissingForManyClass(${2:data})$0",
"description": "function tfmissing = ismissingForManyClass(data)" 
},
"makeitDatenum": {
"prefix": "makeitDatenum",
"body": "${1:tDatenum = }makeitDatenum(${2:tRaw})$0",
"description": "function tDatenum = makeitDatenum(tRaw)" 
},
"makeitEom": {
"prefix": "makeitEom",
"body": "${1:tDatenumEom = }makeitEom(${2:tDatenum})$0",
"description": "function tDatenumEom = makeitEom(tDatenum)" 
},
"makeitcell": {
"prefix": "makeitcell",
"body": "${1:c = }makeitcell(${2:data})$0",
"description": "function c = makeitcell(data)" 
},
"makeitcellstr": {
"prefix": "makeitcellstr",
"body": "${1:var = }makeitcellstr(${2:var})$0",
"description": "function var = makeitcellstr(var)" 
},
"makeitchar": {
"prefix": "makeitchar",
"body": "${1:data = }makeitchar(${2:data})$0",
"description": "function data = makeitchar(data)" 
},
"makeitdouble": {
"prefix": "makeitdouble",
"body": "${1:Bdouble = }makeitdouble(${2:data})$0",
"description": "function Bdouble = makeitdouble(data)" 
},
"makeitnotcell": {
"prefix": "makeitnotcell",
"body": "${1:data = }makeitnotcell(${2:data})$0",
"description": "function data = makeitnotcell(data)" 
},
"makeitnotcellTabcol": {
"prefix": "makeitnotcellTabcol",
"body": "${1:Ta = }makeitnotcellTabcol(${2:Ta}, ${3:cols})$0",
"description": "function Ta = makeitnotcellTabcol(Ta,cols)" 
},
"makeitnotcellTable": {
"prefix": "makeitnotcellTable",
"body": "${1:t = }makeitnotcellTable(${2:t}, ${3:cols})$0",
"description": "function t = makeitnotcellTable(t,cols)" 
},
"makeitnotcellVersionOLD": {
"prefix": "makeitnotcellVersionOLD",
"body": "${1:c = }makeitnotcellVersionOLD(${2:data})$0",
"description": "function c = makeitnotcell(data)" 
},
"makeitnum": {
"prefix": "makeitnum",
"body": "${1:str = }makeitnum(${2:data})$0",
"description": "function str = makeitnum(data)" 
},
"makeitstr": {
"prefix": "makeitstr",
"body": "${1:str = }makeitstr(${2:data})$0",
"description": "function str = makeitstr(data)" 
},
"makeitstring": {
"prefix": "makeitstring",
"body": "${1:var = }makeitstring(${2:var})$0",
"description": "function var = makeitstring(var)" 
},
"adjustWindDataUnit": {
"prefix": "adjustWindDataUnit",
"body": "${1:[data, TUnit] = }adjustWindDataUnit(${2:data}, ${3:TUnit}, ${4:varUnit}, ${5:unitsOld}, ${6:unitTranferFn}, ${7:unitsNew})$0",
"description": "function [data,TUnit] = adjustWindDataUnit(data,TUnit,varUnit, unitsOld,unitTranferFn,unitsNew)" 
},
"data_wind_demo_lrw": {
"prefix": "data_wind_demo_lrw",
"body": "data_wind_demo_lrw$0",
"description": "function data_wind" 
},
"data_wind_interestrate_demo": {
"prefix": "data_wind_interestrate_demo",
"body": "data_wind_interestrate_demo$0",
"description": "data_wind_interestrate_demo" 
},
"decomposeDataname2CityProvinceDatenamereduced": {
"prefix": "decomposeDataname2CityProvinceDatenamereduced",
"body": "${1:T = }decomposeDataname2CityProvinceDatenamereduced(${2:T}, ${3:varnamewithCityProvince})$0",
"description": "function T = decomposeDataname2CityProvinceDatenamereduced(T,varnamewithCityProvince)" 
},
"dropBlankandControlrows": {
"prefix": "dropBlankandControlrows",
"body": "${1:E = }dropBlankandControlrows(${2:D})$0",
"description": "function E = dropBlankandControlrows(D)" 
},
"fscanfWindWet - 副本2018-4-21": {
"prefix": "fscanfWindWet - 副本2018-4-21",
"body": "${1:T = }fscanfWindWet - 副本2018-4-21(${2:f})$0",
"description": "function T = fscanfWindWet(f)" 
},
"fscanfWindWet": {
"prefix": "fscanfWindWet",
"body": "${1:[T, Tunique] = }fscanfWindWet(${2:f})$0",
"description": "function [T,Tunique] = fscanfWindWet(f)" 
},
"getCityandProvinceNameFromtable (Yi Yang 的冲突副本 2018-04-26)": {
"prefix": "getCityandProvinceNameFromtable (Yi Yang 的冲突副本 2018-04-26)",
"body": "${1:T = }getCityandProvinceNameFromtable (Yi Yang 的冲突副本 2018-04-26)(${2:T}, ${3:varnamewithCityProvince})$0",
"description": "function T = getCityandProvinceNameFromtable(T,varnamewithCityProvince)" 
},
"getCityandProvinceNameFromtable": {
"prefix": "getCityandProvinceNameFromtable",
"body": "${1:T = }getCityandProvinceNameFromtable(${2:T}, ${3:varnamewithCityProvince})$0",
"description": "function T = getCityandProvinceNameFromtable(T,varnamewithCityProvince)" 
},
"getdata_windedb_ReunitAndStack": {
"prefix": "getdata_windedb_ReunitAndStack",
"body": "${1:[TWindPanel, Tvar] = }getdata_windedb_ReunitAndStack(${2:Tvarlist}, ${3:unitTransfer}, ${4:vCNEN})$0",
"description": "function [TWindPanel,Tvar] = getdata_windedb_ReunitAndStack(Tvarlist,unitTransfer,vCNEN)" 
},
"getdata_windedb_ReunitAndStack1by1query": {
"prefix": "getdata_windedb_ReunitAndStack1by1query",
"body": "${1:[TWindPanel, Tvar] = }getdata_windedb_ReunitAndStack1by1query(${2:Tvarlist}, ${3:unitTransfer}, ${4:vCNEN})$0",
"description": "function [TWindPanel,Tvar] = getdata_windedb_ReunitAndStack1by1query(Tvarlist,unitTransfer,vCNEN)" 
},
"getdata_windedb_vartable_panel": {
"prefix": "getdata_windedb_vartable_panel",
"body": "${1:TWind = }getdata_windedb_vartable_panel(${2:Tab}, ${3:varWindid}, ${4:varXTV}, ${5:dtbeg}, ${6:dtend})$0",
"description": "function TWind = getdata_windedb_vartable_panel(Tab, varWindid, varXTV, dtbeg, dtend)" 
},
"getdata_windedb_varxlsx_panel": {
"prefix": "getdata_windedb_varxlsx_panel",
"body": "${1:TWind = }getdata_windedb_varxlsx_panel(${2:varxlsx}, ${3:sheet}, ${4:dtbeg}, ${5:dtend})$0",
"description": "function TWind = getdata_windedb_varxlsx_panel(varxlsx, sheet, dtbeg, dtend)" 
},
"getdata_windedb_xlsvar_panel": {
"prefix": "getdata_windedb_xlsvar_panel",
"body": "${1:TWind = }getdata_windedb_xlsvar_panel(${2:fxls}, ${3:sheet}, ${4:dtbeg}, ${5:dtend})$0",
"description": "function TWind = getdata_windedb_xlsvar_panel(fxls, sheet, dtbeg, dtend)" 
},
"getdata_windedbpanel": {
"prefix": "getdata_windedbpanel",
"body": "${1:TWind = }getdata_windedbpanel(${2:varsOrgC}, ${3:fxls}, ${4:sheet}, ${5:vartarget}, ${6:dtbeg}, ${7:dtend})$0",
"description": "function TWind = getdata_windedb_xlsvar_panel(varsOrgC, fxls, sheet,vartarget, dtbeg, dtend)" 
},
"getdata_windedbraw": {
"prefix": "getdata_windedbraw",
"body": "${1:TRes = }getdata_windedbraw(${2:varsOrgC}, ${3:fxls}, ${4:sheet}, ${5:dtbeg}, ${6:dtend})$0",
"description": "function TRes = getdata_windedbraw(varsOrgC, fxls, sheet, dtbeg, dtend)" 
},
"getdata_windwss": {
"prefix": "getdata_windwss",
"body": "${1:TRes = }getdata_windwss(${2:stockid}, ${3:vars}, ${4:rptDateSet})$0",
"description": "function TRes = getdata_windwss(stockid, vars, rptDateSet)" 
},
"getdata_windwss_demo": {
"prefix": "getdata_windwss_demo",
"body": "getdata_windwss_demo$0",
"description": "getdata_windwss_demo" 
},
"getdata_windwss_verifyVarname": {
"prefix": "getdata_windwss_verifyVarname",
"body": "${1:TRes = }getdata_windwss_verifyVarname(${2:stockid}, ${3:vars}, ${4:rptDateSet})$0",
"description": "function TRes = getdata_windwss_verifyVarname(stockid, vars, rptDateSet)" 
},
"data_EDB_wind": {
"prefix": "data_EDB_wind",
"body": "data_EDB_wind$0",
"description": "data_EDB_wind" 
},
"data_GDP_wind": {
"prefix": "data_GDP_wind",
"body": "data_GDP_wind$0",
"description": "data_GDP_wind" 
},
"getdata_windedb": {
"prefix": "getdata_windedb",
"body": "${1:TRes = }getdata_windedb(${2:varsOrgC}, ${3:dtbeg}, ${4:dtend})$0",
"description": "function TRes = getdata_windedb(varsOrgC, dtbeg, dtend)" 
},
"YahooGeoCodeAddress": {
"prefix": "YahooGeoCodeAddress",
"body": "${1:results = }YahooGeoCodeAddress(${2:appId}, ${3:location})$0",
"description": "function results = YahooGeoCodeAddress(appId, location)" 
},
"YahooGeoCodeAddress_d": {
"prefix": "YahooGeoCodeAddress_d",
"body": "YahooGeoCodeAddress_d$0",
"description": "YahooGeoCodeAddress_d" 
},
"baiduTranslate_demo": {
"prefix": "baiduTranslate_demo",
"body": "baiduTranslate_demo$0",
"description": "baiduTranslate_demo" 
},
"distantMin": {
"prefix": "distantMin",
"body": "${1:idneighbor distABmin = }distantMin(${2:x1}, ${3:y1}, ${4:x2}, ${5:y2})$0",
"description": "function [idneighbor distABmin] = distantMin(x1,y1,x2,y2)" 
},
"distantMinCell": {
"prefix": "distantMinCell",
"body": "${1:distABCell = }distantMinCell(${2:LocaACell}, ${3:LocaBCell})$0",
"description": "function distABCell = distantMinCell(LocaACell, LocaBCell)" 
},
"ex1": {
"prefix": "ex1",
"body": "ex1$0",
"description": "ex1" 
},
"findObjectNameField": {
"prefix": "findObjectNameField",
"body": "${1:contend = }findObjectNameField(${2:objectStrings}, ${3:field})$0",
"description": "function contend = findObjectNameField(objectStrings, field)" 
},
"getLatLon": {
"prefix": "getLatLon",
"body": "${1:[Lat, Lon, loccell] = }getLatLon(${2:loc})$0",
"description": "function [Lat,Lon,loccell] = getLatLon(loc)" 
},
"google_GeoCodeAddress": {
"prefix": "google_GeoCodeAddress",
"body": "${1:[Lat, Lon] = }google_GeoCodeAddress(${2:KEY}, ${3:location})$0",
"description": "function [Lat, Lon] = google_GeoCodeAddress(KEY,location)" 
},
"google_GeoCodeAddressLrw": {
"prefix": "google_GeoCodeAddressLrw",
"body": "${1:[Lat, Lon] = }google_GeoCodeAddressLrw(${2:location})$0",
"description": "function [Lat, Lon] = google_GeoCodeAddressLrw(location)" 
},
"google_GeoCodeAddress_d": {
"prefix": "google_GeoCodeAddress_d",
"body": "google_GeoCodeAddress_d$0",
"description": "google_GeoCodeAddress_d" 
},
"kml2struct": {
"prefix": "kml2struct",
"body": "${1:kmlStruct = }kml2struct(${2:kmlFile})$0",
"description": "function kmlStruct = kml2struct(kmlFile)" 
},
"kmlxml2struct": {
"prefix": "kmlxml2struct",
"body": "${1:kmlStruct = }kmlxml2struct(${2:kmlFile})$0",
"description": "function kmlStruct = kmlxml2struct(kmlFile)" 
},
"kmlxmlstr2struct": {
"prefix": "kmlxmlstr2struct",
"body": "${1:kmlStruct = }kmlxmlstr2struct(${2:str})$0",
"description": "function kmlStruct = kmlxmlstr2struct(str)" 
},
"pos2dist": {
"prefix": "pos2dist",
"body": "${1:dist = }pos2dist(${2:lag1}, ${3:lon1}, ${4:lag2}, ${5:lon2}, ${6:method})$0",
"description": "function dist = pos2dist(lag1,lon1,lag2,lon2,method)" 
},
"read_kml": {
"prefix": "read_kml",
"body": "${1:[lat, lon, z] = }read_kml(${2:fileName})$0",
"description": "function [lat,lon,z] = read_kml(fileName)" 
},
"readme_first": {
"prefix": "readme_first",
"body": "readme_first$0",
"description": "readme_first" 
},
"urlread2": {
"prefix": "urlread2",
"body": "${1:[string, status] = }urlread2(${2:urlChar}, ${3:method}, ${4:params}, ${5:timeout})$0",
"description": "function [string,status] = urlread2(urlChar,method,params,timeout);" 
},
"urlread3": {
"prefix": "urlread3",
"body": "${1:[output, extras] = }urlread3(${2:urlChar}, ${3:method}, ${4:body}, ${5:headersIn}, ${6:varargin})$0",
"description": "function [output,extras] = urlread2(urlChar,method,body,headersIn,varargin)" 
},
"urlread_GB": {
"prefix": "urlread_GB",
"body": "${1:[output, status] = }urlread_GB(${2:urlChar}, ${3:method}, ${4:params})$0",
"description": "function [output,status] = urlread_big5(urlChar,method,params)" 
},
"urlreadv": {
"prefix": "urlreadv",
"body": "${1:html = }urlreadv(${2:URL})$0",
"description": "function html=urlreadv(URL)" 
},
"urlreadwrite": {
"prefix": "urlreadwrite",
"body": "${1:[urlConnection, errorid, errormsg] = }urlreadwrite(${2:fcn}, ${3:urlChar})$0",
"description": "function [urlConnection,errorid,errormsg] = urlreadwrite(fcn,urlChar)" 
},
"urlwrite2": {
"prefix": "urlwrite2",
"body": "${1:[f, status] = }urlwrite2(${2:urlChar}, ${3:location}, ${4:method}, ${5:params}, ${6:timeout})$0",
"description": "function [f,status] = urlwrite2(urlChar,location,method,params,timeout);" 
},
"xmlread2": {
"prefix": "xmlread2",
"body": "${1:[parseResult, p] = }xmlread2(${2:fileName}, ${3:varargin})$0",
"description": "function [parseResult,p] = xmlread2(fileName,varargin)" 
},
"xmlread6p1": {
"prefix": "xmlread6p1",
"body": "${1:root = }xmlread6p1(${2:filename})$0",
"description": "function root = xmlread6p1(filename)" 
},
"xmlwrite6p1": {
"prefix": "xmlwrite6p1",
"body": "xmlwrite6p1(${2:filename}, ${3:doc})$0",
"description": "function xmlwrite6p1(filename,doc)" 
},
"xslt6p1": {
"prefix": "xslt6p1",
"body": "xslt6p1(${2:in}, ${3:xsl}, ${4:out})$0",
"description": "function xslt6p1(in,xsl,out);" 
},
"googleTranslateExample": {
"prefix": "googleTranslateExample",
"body": "${1:f = }googleTranslateExample$0",
"description": "function f = googleTranslateExample" 
},
"gtranslate": {
"prefix": "gtranslate",
"body": "${1:xlatedString = }gtranslate(${2:inputString}, ${3:destLanguage}, ${4:sourceLanguage})$0",
"description": "function xlatedString = gtranslate( inputString, destLanguage, sourceLanguage )" 
},
"translate": {
"prefix": "translate",
"body": "${1:translated = }translate(${2:stringToBeTranslated}, ${3:toLanguage}, ${4:fromLanguage})$0",
"description": "function translated = translate(stringToBeTranslated, toLanguage, fromLanguage)" 
},
"getAreaLevel": {
"prefix": "getAreaLevel",
"body": "${1:A = }getAreaLevel(${2:A})$0",
"description": "function A = getAreaLevel(A)" 
},
"getInformationFromCity": {
"prefix": "getInformationFromCity",
"body": "${1:[ProvinceShortname, ProvinceFullname, AreaLevel, CityShortname, CityFullname] = }getInformationFromCity(${2:cities})$0",
"description": "function [ProvinceShortname, ProvinceFullname,AreaLevel,CityShortname,CityFullname] = getInformationFromCity(cities)" 
},
"getProvinceByCity": {
"prefix": "getProvinceByCity",
"body": "${1:[ProvinceShortname, ProvinceFullname, AreaLevel, CityShortname, CityFullname, tfunknowCITY] = }getProvinceByCity(${2:cities})$0",
"description": "function [ProvinceShortname, ProvinceFullname,AreaLevel,CityShortname,CityFullname,tfunknowCITY] = getProvinceByCity(cities)" 
},
"reduceCityname": {
"prefix": "reduceCityname",
"body": "${1:[A, tfunknowCITY] = }reduceCityname(${2:A})$0",
"description": "function [A, tfunknowCITY]= reduceCityname(A)" 
},
"reduceCitynameBackup": {
"prefix": "reduceCitynameBackup",
"body": "${1:A = }reduceCitynameBackup(${2:A})$0",
"description": "function A = reduceCitynameBackup(A)" 
},
"submain_collectCityInfo": {
"prefix": "submain_collectCityInfo",
"body": "submain_collectCityInfo$0",
"description": "submain_collectCityInfo" 
},
"city_matlab_code2018": {
"prefix": "city_matlab_code2018",
"body": "city_matlab_code2018$0",
"description": "city_matlab_code2018" 
},
"Data_ProvinceAndCityMap": {
"prefix": "Data_ProvinceAndCityMap",
"body": "Data_ProvinceAndCityMap$0",
"description": "Data_ProvinceAndCityMap" 
},
"Data_ProvinceAndCityMap_DealwithSpecialCase": {
"prefix": "Data_ProvinceAndCityMap_DealwithSpecialCase",
"body": "Data_ProvinceAndCityMap_DealwithSpecialCase$0",
"description": "Data_ProvinceAndCityMap_DealwithSpecialCase" 
},
"Data_ProvinceAndCityMap_Update": {
"prefix": "Data_ProvinceAndCityMap_Update",
"body": "Data_ProvinceAndCityMap_Update$0",
"description": "Data_ProvinceAndCityMap_Update" 
},
"categoricalTableColA2BFn": {
"prefix": "categoricalTableColA2BFn",
"body": "${1:[T, TmissedUnique, TmissedID] = }categoricalTableColA2BFn(${2:T}, ${3:colA2B}, ${4:strNum}, ${5:fn}, ${6:varargin})$0",
"description": "function [T,TmissedUnique,TmissedID]= categoricalTableColA2BFn(T,colA2B,strNum,fn,varargin)" 
},
"standarizeCityname": {
"prefix": "standarizeCityname",
"body": "${1:[A, tfunknowCITY] = }standarizeCityname(${2:A})$0",
"description": "function [A, tfunknowCITY]= standarizeCityname(A)" 
},
"shapereadGBK": {
"prefix": "shapereadGBK",
"body": "${1:S = }shapereadGBK(${2:varargin})$0",
"description": "function S = shapereadGBK(varargin)" 
},
"shapereadUTF8": {
"prefix": "shapereadUTF8",
"body": "${1:S = }shapereadUTF8(${2:varargin})$0",
"description": "function S = shapereadUTF8(varargin)" 
},
"shapewriteUTF8": {
"prefix": "shapewriteUTF8",
"body": "${1:S = }shapewriteUTF8(${2:varargin})$0",
"description": "function S = shapewriteUTF8(varargin)" 
},
"revisedvalues": {
"prefix": "revisedvalues",
"body": "${1:[result, sgn] = }revisedvalues(${2:map}, ${3:keys}, ${4:varargin})$0",
"description": "function [result, sgn] = revisedvalues(map,keys,varargin)" 
},
"valuesRevised": {
"prefix": "valuesRevised",
"body": "${1:[result, sgn] = }valuesRevised(${2:map}, ${3:keys}, ${4:varargin})$0",
"description": "function [result, sgn] = revisedvalues(map,keys,varargin)" 
},
"ProvinceName_demo": {
"prefix": "ProvinceName_demo",
"body": "ProvinceName_demo$0",
"description": "function ProvinceName_demo" 
},
"getDataProvinceNBSC": {
"prefix": "getDataProvinceNBSC",
"body": "${1:[data_cellinv2, data_page] = }getDataProvinceNBSC(${2:filedata}, ${3:varname})$0",
"description": "function [data_cellinv2, data_page]= getDataProvinceNBSC(filedata, varname)" 
},
"priceindex2pricegrowthrateRobust": {
"prefix": "priceindex2pricegrowthrateRobust",
"body": "${1:Acell = }priceindex2pricegrowthrateRobust(${2:Acell}, ${3:vnames})$0",
"description": "function Acell = priceindex2pricegrowthrateRobust(Acell, vnames)" 
},
"replaceandextendFiveyearsData": {
"prefix": "replaceandextendFiveyearsData",
"body": "${1:cellB = }replaceandextendFiveyearsData(${2:cellA})$0",
"description": "function cellB = replaceandextendFiveyearsData(cellA)" 
},
"setFiveYear": {
"prefix": "setFiveYear",
"body": "setFiveYear$0",
"description": "function setFiveYear" 
},
"setProvinceName": {
"prefix": "setProvinceName",
"body": "setProvinceName$0",
"description": "function setProvinceName" 
},
"nnSWM": {
"prefix": "nnSWM",
"body": "${1:S = }nnSWM(${2:xcoord}, ${3:ycoord}, ${4:N}, ${5:Contig}, ${6:RowStdOpt})$0",
"description": "function S=nnSWM(xcoord,ycoord,N,Contig,RowStdOpt)" 
},
"StructBrowser": {
"prefix": "StructBrowser",
"body": "StructBrowser$0",
"description": "StructBrowser" 
},
"StructBrowser_gui_g": {
"prefix": "StructBrowser_gui_g",
"body": "${1:varargout = }StructBrowser_gui_g(${2:varargin})$0",
"description": "function varargout = StructBrowser_gui_g(varargin)" 
},
"copy_all_struct": {
"prefix": "copy_all_struct",
"body": "${1:cell_struct = }copy_all_struct$0",
"description": "function cell_struct = copy_all_struct" 
},
"fn_structdisp": {
"prefix": "fn_structdisp",
"body": "fn_structdisp(${2:Xname})$0",
"description": "function fn_structdisp(Xname)" 
},
"sbrowse_demo": {
"prefix": "sbrowse_demo",
"body": "sbrowse_demo$0",
"description": "sbrowse_demo" 
},
"es_demo": {
"prefix": "es_demo",
"body": "es_demo$0",
"description": "es_demo" 
},
"explorestruct": {
"prefix": "explorestruct",
"body": "explorestruct(${2:varargin})$0",
"description": "function explorestruct(varargin)" 
},
"addcolTable": {
"prefix": "addcolTable",
"body": "${1:T = }addcolTable(${2:T}, ${3:cols}, ${4:type})$0",
"description": "function T = addcolTable(T,cols,type)" 
},
"bygroup": {
"prefix": "bygroup",
"body": "${1:T = }bygroup(${2:T}, ${3:vy}, ${4:fn}, ${5:vx}, ${6:vG})$0",
"description": "function T = bygroup(T,vy,fn,vx,vG)" 
},
"bygroupBACK2018-6-18": {
"prefix": "bygroupBACK2018-6-18",
"body": "${1:varargout = }bygroupBACK2018-6-18(${2:fun}, ${3:T}, ${4:varargin})$0",
"description": "function varargout = bygroup(fun,T,varargin)" 
},
"bygroupRetime": {
"prefix": "bygroupRetime",
"body": "${1:T2 = }bygroupRetime(${2:T}, ${3:vtime}, ${4:vG})$0",
"description": "function T2 = bygroupRetime(T, vtime, vG)" 
},
"bygroupRobust": {
"prefix": "bygroupRobust",
"body": "${1:TB = }bygroupRobust(${2:fun}, ${3:T}, ${4:vG})$0",
"description": "function TB = bygroupRobust(fun,T,vG)" 
},
"bygroupSimple": {
"prefix": "bygroupSimple",
"body": "${1:T = }bygroupSimple(${2:T}, ${3:vy}, ${4:fn}, ${5:vx}, ${6:vG})$0",
"description": "function T = bygroupSimple(T,vy,fn,vx,vG)" 
},
"bygroupSimple_demo": {
"prefix": "bygroupSimple_demo",
"body": "bygroupSimple_demo$0",
"description": "function bygroupSimple_demo" 
},
"bygroupSqueeze": {
"prefix": "bygroupSqueeze",
"body": "${1:T = }bygroupSqueeze(${2:T}, ${3:vy}, ${4:fn}, ${5:vx}, ${6:vG})$0",
"description": "function T = bygroupSqueeze(T,vy,fn,vx,vG)" 
},
"categoricalTableColFn": {
"prefix": "categoricalTableColFn",
"body": "${1:[T, TmissedUnique, TmissedID] = }categoricalTableColFn(${2:T}, ${3:col}, ${4:strNum}, ${5:fn}, ${6:varargin})$0",
"description": "function [T,TmissedUnique,TmissedID]= categoricalTableColFn(T,col,strNum,fn,varargin)" 
},
"categorical_demo": {
"prefix": "categorical_demo",
"body": "categorical_demo$0",
"description": "categorical_demo" 
},
"cell2tableWithhead": {
"prefix": "cell2tableWithhead",
"body": "${1:T = }cell2tableWithhead(${2:cellA}, ${3:varargin})$0",
"description": "function T = cell2tableWithhead(cellA,varargin)" 
},
"cellstr2cellnumTablecol": {
"prefix": "cellstr2cellnumTablecol",
"body": "${1:T = }cellstr2cellnumTablecol(${2:T}, ${3:cols})$0",
"description": "function T = cellstr2cellnumTablecol(T, cols)" 
},
"cellstr2numTablecol": {
"prefix": "cellstr2numTablecol",
"body": "${1:T = }cellstr2numTablecol(${2:T}, ${3:cols})$0",
"description": "function T = cellstr2numTablecol(T, cols)" 
},
"collogical2coldouble": {
"prefix": "collogical2coldouble",
"body": "${1:T = }collogical2coldouble(${2:T}, ${3:varsLogical})$0",
"description": "function T = collogical2coldouble(T,varsLogical)" 
},
"convertDatatypeTableCols": {
"prefix": "convertDatatypeTableCols",
"body": "${1:T = }convertDatatypeTableCols(${2:T}, ${3:varsLogical}, ${4:fn})$0",
"description": "function T = convertDatatypeTableCols(T,varsLogical,fn)" 
},
"copyTableColAdjustTvCNEN": {
"prefix": "copyTableColAdjustTvCNEN",
"body": "${1:[T, TvENCN, TvCNEN] = }copyTableColAdjustTvCNEN(${2:T}, ${3:col}, ${4:colnew})$0",
"description": "function [T,TvENCN,TvCNEN] = copyTableColAdjustTvCNEN(T,col,colnew)" 
},
"correctVariableCNname": {
"prefix": "correctVariableCNname",
"body": "${1:T = }correctVariableCNname(${2:T})$0",
"description": "function T = correctVariableCNname(T)" 
},
"count_unique": {
"prefix": "count_unique",
"body": "${1:[uniques, numUnique] = }count_unique(${2:x}, ${3:option})$0",
"description": "function [uniques,numUnique] = count_unique(x,option)" 
},
"createBlankRow": {
"prefix": "createBlankRow",
"body": "${1:ToneBlankRow = }createBlankRow(${2:T}, ${3:varargin})$0",
"description": "function ToneBlankRow = createBlankRow(T,varargin)" 
},
"extrapolatePolicyData": {
"prefix": "extrapolatePolicyData",
"body": "${1:[T_Policy_Estate_Month, T_Policy_Estate_Year] = }extrapolatePolicyData(${2:T}, ${3:tspan})$0",
"description": "function [T_Policy_Estate_Month, T_Policy_Estate_Year] =  extrapolatePolicyData(T,tspan)" 
},
"fillmissingPreviousTableCol": {
"prefix": "fillmissingPreviousTableCol",
"body": "${1:T = }fillmissingPreviousTableCol(${2:T}, ${3:cols})$0",
"description": "function T = fillmissingPreviousTableCol(T,cols)" 
},
"fillmissingwithprevious": {
"prefix": "fillmissingwithprevious",
"body": "${1:A = }fillmissingwithprevious(${2:A}, ${3:fnEmpty}, ${4:Empty})$0",
"description": "function A = fillmissingwithprevious(A,fnEmpty,Empty)" 
},
"fnTableCols": {
"prefix": "fnTableCols",
"body": "${1:TA = }fnTableCols(${2:fn}, ${3:TA}, ${4:vold}, ${5:vnew})$0",
"description": "function TA = fnTableCols(fn, TA, vold, vnew)" 
},
"getDatatypeTableCol": {
"prefix": "getDatatypeTableCol",
"body": "${1:[typeCol, o] = }getDatatypeTableCol(${2:T})$0",
"description": "function [typeCol,o] = getDatatypeTableCol(T)" 
},
"getFestivalbyYear_demo": {
"prefix": "getFestivalbyYear_demo",
"body": "getFestivalbyYear_demo$0",
"description": "getFestivalbyYear_demo" 
},
"getOriginalVarnameofTableVar": {
"prefix": "getOriginalVarnameofTableVar",
"body": "${1:[varnameOriginal, TvENCN, TvCNEN] = }getOriginalVarnameofTableVar(${2:T})$0",
"description": "function [varnameOriginal,TvENCN,TvCNEN] = getOriginalVarnameofTableVar(T)" 
},
"gettypeTableCol": {
"prefix": "gettypeTableCol",
"body": "${1:[typeCol, o] = }gettypeTableCol(${2:T})$0",
"description": "function [typeCol,o] = gettypeTableCol(T)" 
},
"idMultiRowsCols": {
"prefix": "idMultiRowsCols",
"body": "${1:[idrows, idcols] = }idMultiRowsCols(${2:T}, ${3:Rows}, ${4:fnset}, ${5:RowsKey}, ${6:cols})$0",
"description": "function [idrows,idcols] = idMultiRowsCols(T,Rows,fnset,RowsKey,cols)" 
},
"joinCellstrSmart": {
"prefix": "joinCellstrSmart",
"body": "${1:C = }joinCellstrSmart(${2:A}, ${3:B}, ${4:varargin})$0",
"description": "function C = joinCellstrSmart(A,B,varargin)" 
},
"joinCellstrSmart_demo": {
"prefix": "joinCellstrSmart_demo",
"body": "joinCellstrSmart_demo$0",
"description": "joinCellstrSmart_demo" 
},
"joinNumSmart": {
"prefix": "joinNumSmart",
"body": "${1:C = }joinNumSmart(${2:A}, ${3:B}, ${4:varargin})$0",
"description": "function C = joinNumSmart(A,B,varargin)" 
},
"join_panel_table_demo": {
"prefix": "join_panel_table_demo",
"body": "join_panel_table_demo$0",
"description": "join_panel_table_demo" 
},
"olstable": {
"prefix": "olstable",
"body": "${1:res = }olstable(${2:yxtab})$0",
"description": "function res = olstable(yxtab)" 
},
"outerjoinSmart (Yi Yang 的冲突副本 2018-04-26)": {
"prefix": "outerjoinSmart (Yi Yang 的冲突副本 2018-04-26)",
"body": "${1:[TC, Tmerge] = }outerjoinSmart (Yi Yang 的冲突副本 2018-04-26)(${2:TA}, ${3:TB}, ${4:key}, ${5:varargin})$0",
"description": "function [TC, Tmerge] = outerjoinSmart(TA,TB,key,varargin)" 
},
"outerjoinSmart": {
"prefix": "outerjoinSmart",
"body": "${1:[TC, Tmerge] = }outerjoinSmart(${2:TA}, ${3:TB}, ${4:key}, ${5:varargin})$0",
"description": "function [TC, Tmerge] = outerjoinSmart(TA,TB,key,varargin)" 
},
"outerjoinSmartTables": {
"prefix": "outerjoinSmartTables",
"body": "${1:[TC, Tmerge] = }outerjoinSmartTables(${2:varargin})$0",
"description": "function [TC, Tmerge] = outerjoinSmartTables(varargin)" 
},
"outerjoinTableCols": {
"prefix": "outerjoinTableCols",
"body": "${1:T = }outerjoinTableCols(${2:T}, ${3:cols}, ${4:colnew})$0",
"description": "function T = outerjoinTableCols(T,cols,colnew)" 
},
"query": {
"prefix": "query",
"body": "${1:[value, lia, TinAnotB, TinBnotA] = }query(${2:key}, ${3:Table}, ${4:keyVariableInTable}, ${5:ValueVariableInTable}, ${6:varargin})$0",
"description": "function [value, lia, TinAnotB,TinBnotA] = query(key,Table,keyVariableInTable,ValueVariableInTable,varargin)" 
},
"queryTabAinTabB": {
"prefix": "queryTabAinTabB",
"body": "${1:[TabA, lia, TinAnotB, TinBnotA] = }queryTabAinTabB(${2:TabA}, ${3:keyA}, ${4:valsA}, ${5:TabB}, ${6:keyB}, ${7:valsB}, ${8:varargin})$0",
"description": "function [TabA,lia,TinAnotB,TinBnotA] = queryTabAinTabB(TabA,keyA,valsA,TabB,keyB,valsB,varargin)" 
},
"queryTabAinTabBKeepleft": {
"prefix": "queryTabAinTabBKeepleft",
"body": "${1:[TabA, lia, TinAnotB, TinBnotA] = }queryTabAinTabBKeepleft(${2:TabA}, ${3:keyA}, ${4:valsA}, ${5:TabB}, ${6:keyB}, ${7:valsB})$0",
"description": "function [TabA,lia,TinAnotB,TinBnotA] = queryTabAinTabBKeepleft(TabA,keyA,valsA,TabB,keyB,valsB)" 
},
"readdata_file_demo": {
"prefix": "readdata_file_demo",
"body": "readdata_file_demo$0",
"description": "function readdata_file_demo" 
},
"readtableCN": {
"prefix": "readtableCN",
"body": "${1:T0 = }readtableCN(${2:f}, ${3:sheetname}, ${4:mapp})$0",
"description": "function T0 = readtableCN(f,sheetname, mapp)" 
},
"readtableCNEN": {
"prefix": "readtableCNEN",
"body": "${1:[T0, varCNall, varENall] = }readtableCNEN(${2:f}, ${3:sheetname}, ${4:varCN}, ${5:varEN}, ${6:varargin})$0",
"description": "function [T0,varCNall,varENall] = readtableCNEN(f,sheetname, varCN,varEN,varargin)" 
},
"readtableCSMAR1": {
"prefix": "readtableCSMAR1",
"body": "${1:T1 = }readtableCSMAR1(${2:f1}, ${3:varargin})$0",
"description": "function T1 = readtableCSMAR(f1,varargin)" 
},
"readtableFromMosoXlsx": {
"prefix": "readtableFromMosoXlsx",
"body": "${1:[TAtten, TAttenRaw, varNameCN] = }readtableFromMosoXlsx(${2:fmoso}, ${3:sheet}, ${4:varCN}, ${5:varEN})$0",
"description": "function [TAtten,TAttenRaw,varNameCN] = readtableFromMosoXlsx(fmoso,sheet,varCN,varEN)" 
},
"readtableFromMosoXlsxRows2": {
"prefix": "readtableFromMosoXlsxRows2",
"body": "${1:[TSelect, TRaw, varNames] = }readtableFromMosoXlsxRows2(${2:fmoso}, ${3:sheet}, ${4:varCN}, ${5:varCNRow1}, ${6:varEN})$0",
"description": "function [TSelect,TRaw,varNames] = readtableFromMosoXlsxRows2(fmoso,sheet,varCN,varCNRow1,varEN)" 
},
"readtableGradeReport_V2": {
"prefix": "readtableGradeReport_V2",
"body": "${1:[T, raw, ids] = }readtableGradeReport(${2:f}, ${3:sheet}, ${4:varCN}, ${5:varEN})$0",
"description": "function [T,raw,ids]= readtableGradeReport(f,sheet,varCN,varEN)" 
},
"readtableHeadcnHeaden": {
"prefix": "readtableHeadcnHeaden",
"body": "${1:[T, TvENCN, TvCNEN] = }readtableHeadcnHeaden(${2:f}, ${3:varargin})$0",
"description": "function [T,TvENCN,TvCNEN]  = readtableHeadcnHeaden(f,varargin)" 
},
"readtablecolcsvMultihead": {
"prefix": "readtablecolcsvMultihead",
"body": "${1:[Tcol, Theadscol, T, Theads] = }readtablecolcsvMultihead(${2:f}, ${3:colsHeadijk}, ${4:colskeep}, ${5:colsnameEN}, ${6:varargin})$0",
"description": "function [Tcol,Theadscol,T,Theads]  = readtablecolcsvMultihead(f,colsHeadijk,colskeep,colsnameEN,varargin)" 
},
"readtablecolcsvMultiheadcsv": {
"prefix": "readtablecolcsvMultiheadcsv",
"body": "${1:[T, Theads] = }readtablecolcsvMultiheadcsv(${2:f}, ${3:headijk})$0",
"description": "function [T,Theads]  = readtablecolcsvMultihead(f,headijk)" 
},
"readtablecsvMultihead": {
"prefix": "readtablecsvMultihead",
"body": "${1:[T, Theads] = }readtablecsvMultihead(${2:f}, ${3:varargin})$0",
"description": "function [T,Theads] = readtablecsvMultihead(f,varargin)" 
},
"replace_Inf_NaN_demo": {
"prefix": "replace_Inf_NaN_demo",
"body": "replace_Inf_NaN_demo$0",
"description": "function replace_Inf_NaN_demo" 
},
"retimeFillmisingPrevious": {
"prefix": "retimeFillmisingPrevious",
"body": "${1:T = }retimeFillmisingPrevious(${2:T}, ${3:timesNew})$0",
"description": "function T = retimeFillmisingPrevious(T,timesNew)" 
},
"retimeFillmisingPreviousNum": {
"prefix": "retimeFillmisingPreviousNum",
"body": "${1:T = }retimeFillmisingPreviousNum(${2:T}, ${3:timesNew})$0",
"description": "function T = retimeFillmisingPreviousNum(T,timesNew)" 
},
"rowfunTablecols": {
"prefix": "rowfunTablecols",
"body": "${1:Tb = }rowfunTablecols(${2:fun}, ${3:Ta}, ${4:varargin})$0",
"description": "function Tb = rowfunTablecols(fun,Ta,varargin)" 
},
"rowfunTablecols_oldversion": {
"prefix": "rowfunTablecols_oldversion",
"body": "${1:Tb = }rowfunTablecols_oldversion(${2:fun}, ${3:Ta}, ${4:varargin})$0",
"description": "function Tb = rowfunTablecols(fun,Ta,varargin)" 
},
"setOriginalVarnameofTableVar": {
"prefix": "setOriginalVarnameofTableVar",
"body": "${1:[T, TvENCN, TvCNEN] = }setOriginalVarnameofTableVar(${2:T}, ${3:vEN}, ${4:vCN})$0",
"description": "function [T,TvENCN,TvCNEN] = setOriginalVarnameofTableVar(T,vEN,vCN)" 
},
"splitapplyInsizeEqOutsize": {
"prefix": "splitapplyInsizeEqOutsize",
"body": "${1:varargout = }splitapplyInsizeEqOutsize(${2:fun}, ${3:varargin})$0",
"description": "function varargout = splitapplyInsizeEqOutsize(fun,varargin)" 
},
"splitapplyInsizeEqOutsize_demo": {
"prefix": "splitapplyInsizeEqOutsize_demo",
"body": "splitapplyInsizeEqOutsize_demo$0",
"description": "splitapplyInsizeEqOutsize_demo" 
},
"str2doubleTable": {
"prefix": "str2doubleTable",
"body": "${1:T = }str2doubleTable(${2:T}, ${3:cols})$0",
"description": "function T = str2doubleTable(T,cols)" 
},
"strrepTableFun": {
"prefix": "strrepTableFun",
"body": "${1:t = }strrepTableFun(${2:t}, ${3:cols}, ${4:Fun}, ${5:str2})$0",
"description": "function t = strrepTableFun(t,cols,Fun,str2)" 
},
"strsplit_demo": {
"prefix": "strsplit_demo",
"body": "strsplit_demo$0",
"description": "strsplit_demo" 
},
"summarize2": {
"prefix": "summarize2",
"body": "${1:Tsum = }summarize2(${2:x})$0",
"description": "function Tsum = summarize2(x)" 
},
"summarytable": {
"prefix": "summarytable",
"body": "${1:Tsummary = }summarytable(${2:T})$0",
"description": "function Tsummary = summarytable(T)" 
},
"summarytableCityYear": {
"prefix": "summarytableCityYear",
"body": "${1:Tsummary = }summarytableCityYear(${2:T}, ${3:vCityYear})$0",
"description": "function Tsummary = summarytableCityYear(T,vCityYear)" 
},
"table_demo": {
"prefix": "table_demo",
"body": "table_demo$0",
"description": "function table_demo" 
},
"tablerows2Structfields": {
"prefix": "tablerows2Structfields",
"body": "${1:Examobj = }tablerows2Structfields(${2:Tab}, ${3:Examobj}, ${4:varargin})$0",
"description": "function Examobj = tablerows2Structfields(Tab,Examobj,varargin)" 
},
"timerow_demo": {
"prefix": "timerow_demo",
"body": "timerow_demo$0",
"description": "timerow_demo" 
},
"uniqueCount": {
"prefix": "uniqueCount",
"body": "${1:[uniques, ia, ic, Tvarnamesunique, TvarnamesDuplicate, IDDuplicate] = }uniqueCount(${2:varargin})$0",
"description": "function [uniques,ia,ic,Tvarnamesunique,TvarnamesDuplicate,IDDuplicate] = uniqueCount(varargin)" 
},
"uniqueCountCitytime": {
"prefix": "uniqueCountCitytime",
"body": "${1:[TuniqueCount, TCheck] = }uniqueCountCitytime(${2:T}, ${3:varargin})$0",
"description": "function [TuniqueCount, TCheck] = uniqueCountCitytime(T,varargin)" 
},
"uniqueCountTable": {
"prefix": "uniqueCountTable",
"body": "${1:[Tunique, uniques, ia, ic, Tvarnamesunique] = }uniqueCountTable(${2:varargin})$0",
"description": "function [Tunique, uniques,ia,ic,Tvarnamesunique] = uniqueCountTable(varargin)" 
},
"unique_demo": {
"prefix": "unique_demo",
"body": "unique_demo$0",
"description": "function unique_demo" 
},
"unstack_demo": {
"prefix": "unstack_demo",
"body": "unstack_demo$0",
"description": "function unstack_demo" 
},
"varfunRename": {
"prefix": "varfunRename",
"body": "${1:b = }varfunRename(${2:fun}, ${3:a}, ${4:varargin})$0",
"description": "function b = varfunRename(fun,a,varargin)" 
},
"varfunTablecols": {
"prefix": "varfunTablecols",
"body": "${1:Tb = }varfunTablecols(${2:fun}, ${3:Ta}, ${4:varargin})$0",
"description": "function Tb = varfunTablecols(fun,Ta,varargin)" 
},
"writeTableGradeReport": {
"prefix": "writeTableGradeReport",
"body": "writeTableGradeReport(${2:file1}, ${3:sheet1}, ${4:T}, ${5:varargin})$0",
"description": "function writeTableGradeReport(file1, sheet1,T,varargin)" 
},
"writetableENCN": {
"prefix": "writetableENCN",
"body": "writetableENCN(${2:t}, ${3:filename}, ${4:sheetname}, ${5:varEN}, ${6:varCN})$0",
"description": "function writetableENCN(t,filename,sheetname,varEN,varCN)" 
},
"writetableStataDo": {
"prefix": "writetableStataDo",
"body": "writetableStataDo(${2:Tcsv}, ${3:fcsv}, ${4:fdo})$0",
"description": "function writetableStataDo(Tcsv,fcsv,fdo)" 
},
"writetablecsv_demo": {
"prefix": "writetablecsv_demo",
"body": "writetablecsv_demo$0",
"description": "function writetablecsv_demo" 
},
"TEST": {
"prefix": "TEST",
"body": "TEST$0",
"description": "TEST" 
},
"bygroupRetimeMonthlyEom": {
"prefix": "bygroupRetimeMonthlyEom",
"body": "${1:Tout = }bygroupRetimeMonthlyEom(${2:T}, ${3:vtime}, ${4:vG})$0",
"description": "function Tout = bygroupRetimeMonthlyEom(T, vtime, vG)" 
},
"bygroupRetimeMonthlyEom_demo": {
"prefix": "bygroupRetimeMonthlyEom_demo",
"body": "bygroupRetimeMonthlyEom_demo$0",
"description": "bygroupRetimeMonthlyEom_demo" 
},
"bygroupRetimeMonthlyEom_publish": {
"prefix": "bygroupRetimeMonthlyEom_publish",
"body": "bygroupRetimeMonthlyEom_publish$0",
"description": "bygroupRetimeMonthlyEom_publish" 
},
"fn_template": {
"prefix": "fn_template",
"body": "${1:y = }fn_template(${2:x1}, ${3:x2})$0",
"description": "function y = fn(x1,x2)" 
},
"bygroupRetimeMonthlyEOMOLD": {
"prefix": "bygroupRetimeMonthlyEOMOLD",
"body": "${1:T2 = }bygroupRetimeMonthlyEOMOLD(${2:T}, ${3:vG}, ${4:vtime}, ${5:varargin})$0",
"description": "function T2 = bygroupRetimeMonthlyEOM_tobecomplete(T,vG,vtime,varargin)" 
},
"paneltable_demo": {
"prefix": "paneltable_demo",
"body": "paneltable_demo$0",
"description": "paneltable_demo" 
},
"retimeTableMonthlyEomWithAllMonthInYear": {
"prefix": "retimeTableMonthlyEomWithAllMonthInYear",
"body": "${1:T2 = }retimeTableMonthlyEomWithAllMonthInYear(${2:T1}, ${3:timeVariableName})$0",
"description": "function T2 = retimeTableMonthlyEomWithAllMonthInYear(T1,timeVariableName)" 
},
"panelTable": {
"prefix": "panelTable",
"body": "${1:obj = }panelTable(${2:Tab}, ${3:varargin})$0",
"description": "function [obj] = panelTable(Tab,varargin)" 
},
"subsasgn_V1": {
"prefix": "subsasgn_V1",
"body": "${1:B = }subsasgn(${2:obj}, ${3:S}, ${4:V})$0",
"description": "function B = subsasgn(obj, S, V)" 
},
"subsref_V1": {
"prefix": "subsref_V1",
"body": "${1:obj = }subsref(${2:obj}, ${3:S})$0",
"description": "function obj = subsref(obj,S)" 
},
"GCDExample": {
"prefix": "GCDExample",
"body": "GCDExample$0",
"description": "GCDExample" 
},
"gcaleventor": {
"prefix": "gcaleventor",
"body": "${1:result = }gcaleventor(${2:userName}, ${3:password}, ${4:title}, ${5:content}, ${6:location}, ${7:smsMe}, ${8:emailMe}, ${9:DelayInMin})$0",
"description": "function result=gcaleventor(userName, password, title, content, location, smsMe, emailMe, DelayInMin)" 
},
"youdaotranslate_demo": {
"prefix": "youdaotranslate_demo",
"body": "youdaotranslate_demo$0",
"description": "youdaotranslate_demo" 
},
"GetMD5": {
"prefix": "GetMD5",
"body": "GetMD5$0",
"description": "function GetMD5" 
},
"GetMD5_helper": {
"prefix": "GetMD5_helper",
"body": "${1:S = }GetMD5_helper(${2:V})$0",
"description": "function S = GetMD5_helper(V)" 
},
"uTest_GetMD5": {
"prefix": "uTest_GetMD5",
"body": "uTest_GetMD5(${2:doSpeed})$0",
"description": "function uTest_GetMD5(doSpeed)" 
},
"countmember": {
"prefix": "countmember",
"body": "${1:C = }countmember(${2:A}, ${3:B})$0",
"description": "function C = countmember(A,B)" 
},
"weightelement": {
"prefix": "weightelement",
"body": "${1:W = }weightelement(${2:A}, ${3:dim})$0",
"description": "function W = weightelement(A, dim)" 
},
"weightelementBottom": {
"prefix": "weightelementBottom",
"body": "${1:W = }weightelementBottom(${2:A}, ${3:dim})$0",
"description": "function W = weightelementBottom(A, dim)" 
},
"weightelement_d": {
"prefix": "weightelement_d",
"body": "weightelement_d$0",
"description": "weightelement_d" 
},
"winsor": {
"prefix": "winsor",
"body": "winsor$0",
"description": "winsor" 
},
"Pricegrowthrate2priceindexRobust": {
"prefix": "Pricegrowthrate2priceindexRobust",
"body": "${1:Acell = }Pricegrowthrate2priceindexRobust(${2:Acell}, ${3:vnames}, ${4:vindicator}, ${5:basePeriod})$0",
"description": "function Acell = Pricegrowthrate2priceindexRobust(Acell, vnames, vindicator, basePeriod)" 
},
"PrintTable": {
"prefix": "PrintTable",
"body": "PrintTable$0",
"description": "PrintTable" 
},
"cell2cellheadid": {
"prefix": "cell2cellheadid",
"body": "${1:Acell = }cell2cellheadid(${2:acell}, ${3:head}, ${4:id}, ${5:firstelement})$0",
"description": "function Acell = cell2cellheadid(acell, head, id, firstelement)" 
},
"cell2keyvalue": {
"prefix": "cell2keyvalue",
"body": "${1:keyvaluemap = }cell2keyvalue(${2:cellA})$0",
"description": "function keyvaluemap = cell2keyvalue(cellA)" 
},
"cell2mysqltab": {
"prefix": "cell2mysqltab",
"body": "cell2mysqltab(${2:cellA}, ${3:dbase}, ${4:tabname})$0",
"description": "function cell2mysqltab(cellA, dbase, tabname)" 
},
"cell2num": {
"prefix": "cell2num",
"body": "${1:OUT = }cell2num(${2:datacell})$0",
"description": "function OUT = cell2num(datacell)" 
},
"cell2str_V2": {
"prefix": "cell2str_V2",
"body": "${1:str = }cell2str(${2:c})$0",
"description": "function str = cell2str(c)" 
},
"cell2streq": {
"prefix": "cell2streq",
"body": "${1:streq = }cell2streq(${2:C})$0",
"description": "function streq = cell2streq(C)" 
},
"cell2tseriesqq": {
"prefix": "cell2tseriesqq",
"body": "${1:ts = }cell2tseriesqq(${2:c})$0",
"description": "function ts = cell2tseriesqq(c)" 
},
"cell2vars": {
"prefix": "cell2vars",
"body": "cell2vars(${2:cellvar}, ${3:newvarname})$0",
"description": "function cell2vars(cellvar, newvarname)" 
},
"cell2vars_d": {
"prefix": "cell2vars_d",
"body": "cell2vars_d$0",
"description": "cell2vars_d" 
},
"cellNaNReplace": {
"prefix": "cellNaNReplace",
"body": "${1:cellData = }cellNaNReplace(${2:cellData}, ${3:replaceWith})$0",
"description": "function cellData = cellNaNReplace (cellData, replaceWith)" 
},
"cellnum2cellstr": {
"prefix": "cellnum2cellstr",
"body": "${1:cellA = }cellnum2cellstr(${2:cellA}, ${3:num2strdigit})$0",
"description": "function cellA = cellnum2cellstr(cellA,num2strdigit)" 
},
"cellnum2numTablecol": {
"prefix": "cellnum2numTablecol",
"body": "${1:T = }cellnum2numTablecol(${2:T}, ${3:cols})$0",
"description": "function T = cellnum2numTablecol(T, cols)" 
},
"cellsplit": {
"prefix": "cellsplit",
"body": "${1:[cellkids, ids, toks] = }cellsplit(${2:cellmother}, ${3:cellNames})$0",
"description": "function [cellkids,ids,toks] = cellsplit(cellmother, cellNames)" 
},
"cellstr2cellnumb": {
"prefix": "cellstr2cellnumb",
"body": "${1:cellA = }cellstr2cellnumb(${2:varargin})$0",
"description": "function cellA = cellstr2cellnumb(varargin)" 
},
"cellwrite": {
"prefix": "cellwrite",
"body": "cellwrite(${2:filename}, ${3:cellarray})$0",
"description": "function cellwrite(filename, cellarray)" 
},
"combineMultiNumberinCellElement": {
"prefix": "combineMultiNumberinCellElement",
"body": "${1:cellA = }combineMultiNumberinCellElement(${2:cellA})$0",
"description": "function cellA =combineMultiNumberinCellElement(cellA)" 
},
"csv2cell - 副本": {
"prefix": "csv2cell - 副本",
"body": "${1:data = }csv2cell - 副本(${2:varargin})$0",
"description": "function data = csv2cell0(varargin)" 
},
"csv2cell": {
"prefix": "csv2cell",
"body": "${1:raw = }csv2cell(${2:varargin})$0",
"description": "function raw = csv2cell(varargin)" 
},
"csv2cell0": {
"prefix": "csv2cell0",
"body": "${1:data = }csv2cell0(${2:varargin})$0",
"description": "function data = csv2cell0(varargin)" 
},
"csv2cellnum": {
"prefix": "csv2cellnum",
"body": "${1:raw = }csv2cellnum(${2:varargin})$0",
"description": "function raw = csv2cellnum(varargin)" 
},
"csv2cellv3": {
"prefix": "csv2cellv3",
"body": "${1:res = }csv2cellv3(${2:filename}, ${3:delimiter})$0",
"description": "function res = csv2cellv3( filename, delimiter )" 
},
"dataclean_back": {
"prefix": "dataclean_back",
"body": "dataclean_back$0",
"description": "function dataclean_back" 
},
"dataclean_d": {
"prefix": "dataclean_d",
"body": "dataclean_d$0",
"description": "dataclean_d" 
},
"datacleanlrw": {
"prefix": "datacleanlrw",
"body": "${1:A = }datacleanlrw(${2:A})$0",
"description": "function A = datacleanlrw(A)" 
},
"dir2cell_demo": {
"prefix": "dir2cell_demo",
"body": "dir2cell_demo$0",
"description": "function dir2cell_demo" 
},
"dropcolsnan": {
"prefix": "dropcolsnan",
"body": "${1:cellA = }dropcolsnan(${2:cellA})$0",
"description": "function cellA = dropcolsnan(cellA)" 
},
"dropcolsnanb": {
"prefix": "dropcolsnanb",
"body": "${1:cellA = }dropcolsnanb(${2:cellA})$0",
"description": "function cellA = dropcolsnanb(cellA)" 
},
"dropcolsnanb_d": {
"prefix": "dropcolsnanb_d",
"body": "dropcolsnanb_d$0",
"description": "function dropcolsnanb_d" 
},
"dropcolsstr": {
"prefix": "dropcolsstr",
"body": "${1:cellA = }dropcolsstr(${2:cellA})$0",
"description": "function cellA = dropcolsstr(cellA)" 
},
"dropnanheadcol": {
"prefix": "dropnanheadcol",
"body": "${1:A = }dropnanheadcol(${2:A})$0",
"description": "function A = dropnanheadcol(A)" 
},
"dropnanrows": {
"prefix": "dropnanrows",
"body": "${1:A = }dropnanrows(${2:A})$0",
"description": "function A = dropnanrows(A)" 
},
"droprows": {
"prefix": "droprows",
"body": "${1:B = }droprows(${2:A}, ${3:aNames}, ${4:aSubs})$0",
"description": "function B = droprows(A, aNames, aSubs)" 
},
"droprowsbycolnans": {
"prefix": "droprowsbycolnans",
"body": "${1:[cellA, varargout] = }droprowsbycolnans(${2:cellA}, ${3:colnames})$0",
"description": "function [cellA,varargout] = droprowsbycolnans(cellA, colnames)" 
},
"droprowswithnan": {
"prefix": "droprowswithnan",
"body": "${1:A = }droprowswithnan(${2:A})$0",
"description": "function A = droprowswithnan(A)" 
},
"droprowswithvalue": {
"prefix": "droprowswithvalue",
"body": "${1:A = }droprowswithvalue(${2:A}, ${3:a})$0",
"description": "function A = droprowswithvalue(A,a)" 
},
"fncell": {
"prefix": "fncell",
"body": "${1:cellB = }fncell(${2:cellA}, ${3:fn})$0",
"description": "function cellB = fncell(cellA, fn)" 
},
"fncolscell": {
"prefix": "fncolscell",
"body": "${1:A = }fncolscell(${2:A}, ${3:colnames}, ${4:fn}, ${5:varargin})$0",
"description": "function A = fncolscell(A, colnames, fn, varargin)" 
},
"gencols": {
"prefix": "gencols",
"body": "${1:A = }gencols(${2:A}, ${3:colnames}, ${4:varargin})$0",
"description": "function A =gencols(A, colnames,varargin)" 
},
"gencolsNaturenumber": {
"prefix": "gencolsNaturenumber",
"body": "${1:cellA = }gencolsNaturenumber(${2:cellA}, ${3:varargin})$0",
"description": "function cellA = gencolsNaturenumber(cellA, varargin)" 
},
"gencols_d": {
"prefix": "gencols_d",
"body": "gencols_d$0",
"description": "gencols_d" 
},
"gencolsbyjoincolswithindicator": {
"prefix": "gencolsbyjoincolswithindicator",
"body": "${1:A = }gencolsbyjoincolswithindicator(${2:A}, ${3:newcolname}, ${4:indicator}, ${5:indicatorvalue}, ${6:colnames})$0",
"description": "function A = gencolsbyjoincolswithindicator(A, newcolname, indicator, indicatorvalue, colnames)" 
},
"gencolsbyvar": {
"prefix": "gencolsbyvar",
"body": "${1:A = }gencolsbyvar(${2:A}, ${3:varargin})$0",
"description": "function A =gencolsbyvar(A, varargin)" 
},
"gencolsx2new": {
"prefix": "gencolsx2new",
"body": "${1:A = }gencolsx2new(${2:A}, ${3:xnames}, ${4:newnames}, ${5:fn})$0",
"description": "function A = gencolsx2new(A, xnames, newnames, fn)" 
},
"gencolsx2new_d": {
"prefix": "gencolsx2new_d",
"body": "gencolsx2new_d$0",
"description": "gencolsx2new_d" 
},
"gencolsx2newrobust": {
"prefix": "gencolsx2newrobust",
"body": "${1:A = }gencolsx2newrobust(${2:A}, ${3:xnames}, ${4:newnames}, ${5:fn})$0",
"description": "function A = gencolsx2newrobust(A, xnames, newnames, fn)" 
},
"gencolsxy2new": {
"prefix": "gencolsxy2new",
"body": "${1:A = }gencolsxy2new(${2:A}, ${3:xynames}, ${4:newname}, ${5:fn})$0",
"description": "function A = gencolsxy2new(A, xynames, newname, fn)" 
},
"gencolsxy2newifelse": {
"prefix": "gencolsxy2newifelse",
"body": "${1:Araw = }gencolsxy2newifelse(${2:Araw}, ${3:xym}, ${4:zm}, ${5:fn})$0",
"description": "function Araw = gencolsxy2newifelse(Araw, xym, zm, fn)" 
},
"getcolacrosscell": {
"prefix": "getcolacrosscell",
"body": "${1:x = }getcolacrosscell(${2:cellArrayA}, ${3:col})$0",
"description": "function x = getcolacrosscell(cellArrayA,col)" 
},
"getcolrow": {
"prefix": "getcolrow",
"body": "${1:cellA = }getcolrow(${2:cellA}, ${3:namecols}, ${4:namecolkey}, ${5:keyset})$0",
"description": "function cellA = getcolrow(cellA, namecols, namecolkey, keyset)" 
},
"getcolsb": {
"prefix": "getcolsb",
"body": "${1:x = }getcolsb(${2:A}, ${3:nameVars})$0",
"description": "function x = getcolsb(A, nameVars)" 
},
"getcolsbSeperate": {
"prefix": "getcolsbSeperate",
"body": "${1:x = }getcolsbSeperate(${2:A}, ${3:nameVars})$0",
"description": "function x = getcolsbSeperate(A, nameVars)" 
},
"getcolskeyvalue (Yi Yang 的冲突副本 2016-06-06)": {
"prefix": "getcolskeyvalue (Yi Yang 的冲突副本 2016-06-06)",
"body": "${1:keyvaluemap = }getcolskeyvalue (Yi Yang 的冲突副本 2016-06-06)(${2:cellraw}, ${3:colsname})$0",
"description": "function keyvaluemap = getcolskeyvalue(cellraw, colsname)" 
},
"getcolskeyvalue2": {
"prefix": "getcolskeyvalue2",
"body": "${1:keyvaluemap = }getcolskeyvalue2(${2:cellraw}, ${3:colsname})$0",
"description": "function keyvaluemap = getcolskeyvalue(cellraw, colsname)" 
},
"getrowscols": {
"prefix": "getrowscols",
"body": "${1:A = }getrowscols(${2:A}, ${3:rowNames}, ${4:rowsub}, ${5:colnames}, ${6:varargin})$0",
"description": "function A = getrowscols(A, rowNames, rowsub,colnames, varargin)" 
},
"getrowscolsb": {
"prefix": "getrowscolsb",
"body": "${1:A = }getrowscolsb(${2:A}, ${3:rowNames}, ${4:rowsub}, ${5:colnames})$0",
"description": "function A = getrowscolsb(A, rowNames, rowsub,colnames)" 
},
"getrowsnan": {
"prefix": "getrowsnan",
"body": "${1:B = }getrowsnan(${2:A}, ${3:colNames})$0",
"description": "function B = getrowsnan(A, colNames)" 
},
"getrowsrobust": {
"prefix": "getrowsrobust",
"body": "${1:B = }getrowsrobust(${2:A}, ${3:aNames}, ${4:aSubs})$0",
"description": "function B = getrowsrobust(A, aNames, aSubs)" 
},
"gettype": {
"prefix": "gettype",
"body": "${1:type = }gettype(${2:x})$0",
"description": "function type = gettype(x)" 
},
"gettypeCellelements": {
"prefix": "gettypeCellelements",
"body": "${1:typeMatrix = }gettypeCellelements(${2:Acell})$0",
"description": "function typeMatrix = gettypeCellelements(Acell)" 
},
"gettypewithnan": {
"prefix": "gettypewithnan",
"body": "${1:type = }gettypewithnan(${2:x})$0",
"description": "function type = gettypewithnan(x)" 
},
"growthrate2levelbyProvince": {
"prefix": "growthrate2levelbyProvince",
"body": "${1:cellB = }growthrate2levelbyProvince(${2:cellA}, ${3:varsYearProvince}, ${4:vars}, ${5:vindicator}, ${6:basePeriod})$0",
"description": "function cellB = growthrate2levelbyProvince(cellA, varsYearProvince, vars, vindicator, basePeriod)" 
},
"growthratecell": {
"prefix": "growthratecell",
"body": "${1:cellA = }growthratecell(${2:cellA}, ${3:cols})$0",
"description": "function cellA = growthratecell(cellA, cols)" 
},
"headcell": {
"prefix": "headcell",
"body": "${1:varargout = }headcell(${2:cellA})$0",
"description": "function varargout =  headcell(cellA)" 
},
"headnamePoolCell": {
"prefix": "headnamePoolCell",
"body": "${1:[cellA, cellB] = }headnamePoolCell(${2:cellA}, ${3:bodysignstrcell})$0",
"description": "function [cellA, cellB] = headnamePoolCell(cellA, bodysignstrcell)" 
},
"headnamePoolCellJoint": {
"prefix": "headnamePoolCellJoint",
"body": "${1:cellA = }headnamePoolCellJoint(${2:cellA}, ${3:bodysignstrcell})$0",
"description": "function cellA = headnamePoolCellJoint(cellA, bodysignstrcell)" 
},
"headnamePoolCellUpside": {
"prefix": "headnamePoolCellUpside",
"body": "${1:cellA = }headnamePoolCellUpside(${2:cellA}, ${3:bodysignstrcell})$0",
"description": "function cellA = headnamePoolCellUpside(cellA, bodysignstrcell)" 
},
"heapCells": {
"prefix": "heapCells",
"body": "${1:B = }heapCells(${2:A})$0",
"description": "function B = heapCells(A)" 
},
"heaptwocells": {
"prefix": "heaptwocells",
"body": "${1:C = }heaptwocells(${2:A}, ${3:B})$0",
"description": "function C = heaptwocells(A,B)" 
},
"heaptwocells_d": {
"prefix": "heaptwocells_d",
"body": "heaptwocells_d$0",
"description": "heaptwocells_d" 
},
"idrepetition": {
"prefix": "idrepetition",
"body": "${1:[ids, idsrep, idsuniq] = }idrepetition(${2:A})$0",
"description": "function [ids, idsrep,idsuniq] = idrepetition(A)" 
},
"idrepetition2": {
"prefix": "idrepetition2",
"body": "${1:ids = }idrepetition2(${2:A})$0",
"description": "function ids =  idrepetition2(A)" 
},
"idrepetition_d": {
"prefix": "idrepetition_d",
"body": "idrepetition_d$0",
"description": "idrepetition_d" 
},
"idrows": {
"prefix": "idrows",
"body": "${1:ids = }idrows(${2:A}, ${3:aNames}, ${4:aSubs})$0",
"description": "function ids = idrows(A, aNames, aSubs)" 
},
"idrowsb": {
"prefix": "idrowsb",
"body": "${1:ids = }idrowsb(${2:A}, ${3:aNames}, ${4:aSubs})$0",
"description": "function ids = idrowsb(A, aNames, aSubs)" 
},
"idrowscols": {
"prefix": "idrowscols",
"body": "${1:[idrow, idcol, linearidx] = }idrowscols(${2:A}, ${3:rowNames}, ${4:rowsub}, ${5:colnames})$0",
"description": "function [idrow, idcol, linearidx] = idrowscols(A, rowNames, rowsub,colnames)" 
},
"idrowscolsb": {
"prefix": "idrowscolsb",
"body": "${1:[idrow, idcol, linearidx] = }idrowscolsb(${2:A}, ${3:rowNames}, ${4:rowsub}, ${5:colnames})$0",
"description": "function [idrow, idcol, linearidx] = idrowscolsb(A, rowNames, rowsub,colnames)" 
},
"idrowsrobust": {
"prefix": "idrowsrobust",
"body": "${1:id = }idrowsrobust(${2:A}, ${3:aNames}, ${4:aSubs})$0",
"description": "function id = idrowsrobust(A, aNames, aSubs)" 
},
"idscellelements_demo": {
"prefix": "idscellelements_demo",
"body": "idscellelements_demo$0",
"description": "function idscellelements_demo" 
},
"idsubsetSet": {
"prefix": "idsubsetSet",
"body": "${1:[iSubSeq, index] = }idsubsetSet(${2:SubSeq}, ${3:Seq})$0",
"description": "function [iSubSeq, index]= idsubsetSet(SubSeq, Seq)" 
},
"idunique": {
"prefix": "idunique",
"body": "${1:ids a = }idunique(${2:A})$0",
"description": "function [ids a] = idunique(A)" 
},
"iff_V1": {
"prefix": "iff_V1",
"body": "${1:result = }iff(${2:flag}, ${3:posResult}, ${4:result})$0",
"description": "function result = iff(flag, posResult, result)" 
},
"iffcell": {
"prefix": "iffcell",
"body": "${1:cellB = }iffcell(${2:cellA}, ${3:fn})$0",
"description": "function cellB = iffcell(cellA, fn)" 
},
"is_acellelement_num": {
"prefix": "is_acellelement_num",
"body": "${1:type = }is_acellelement_num(${2:x})$0",
"description": "function type = is_acellelement_num(x)" 
},
"iscellelementcell": {
"prefix": "iscellelementcell",
"body": "${1:tfNaN = }iscellelementcell(${2:A})$0",
"description": "function tfNaN =  iscellelementcell(A)" 
},
"ischarcell": {
"prefix": "ischarcell",
"body": "${1:tfschar = }ischarcell(${2:A})$0",
"description": "function tfschar = ischarcell(A)" 
},
"iscols": {
"prefix": "iscols",
"body": "${1:tf = }iscols(${2:Acell}, ${3:subnames})$0",
"description": "function tf = iscols(Acell, subnames)" 
},
"iscolsstr": {
"prefix": "iscolsstr",
"body": "${1:tf = }iscolsstr(${2:A})$0",
"description": "function tf = iscolsstr(A)" 
},
"isemptycell": {
"prefix": "isemptycell",
"body": "${1:tfschar = }isemptycell(${2:A})$0",
"description": "function tfschar = isemptycell(A)" 
},
"isemptynumcell": {
"prefix": "isemptynumcell",
"body": "${1:tfNaN = }isemptynumcell(${2:A})$0",
"description": "function tfNaN = isemptynumcell(A)" 
},
"isequalcell": {
"prefix": "isequalcell",
"body": "${1:tf = }isequalcell(${2:A}, ${3:B})$0",
"description": "function tf = isequalcell(A,B)" 
},
"ismemberbycmp": {
"prefix": "ismemberbycmp",
"body": "${1:tfres = }ismemberbycmp(${2:S}, ${3:s})$0",
"description": "function tfres  = ismemberbycmp(S, s)" 
},
"ismemberbycmp_d": {
"prefix": "ismemberbycmp_d",
"body": "ismemberbycmp_d$0",
"description": "ismemberbycmp_d" 
},
"ismemberbyfind": {
"prefix": "ismemberbyfind",
"body": "${1:tfs = }ismemberbyfind(${2:S}, ${3:s})$0",
"description": "function tfs = ismemberbyfind(S, s)" 
},
"ismonotonic": {
"prefix": "ismonotonic",
"body": "${1:monotonic = }ismonotonic(${2:x}, ${3:strict}, ${4:direction}, ${5:dim})$0",
"description": "function monotonic = ismonotonic(x, strict, direction, dim)" 
},
"isnancell": {
"prefix": "isnancell",
"body": "${1:tfNaN = }isnancell(${2:A})$0",
"description": "function tfNaN = isnancell(A)" 
},
"isnancellb": {
"prefix": "isnancellb",
"body": "${1:tfNaN = }isnancellb(${2:A})$0",
"description": "function tfNaN = isnancellb(A)" 
},
"isnancellrobust": {
"prefix": "isnancellrobust",
"body": "${1:TFS = }isnancellrobust(${2:cellA})$0",
"description": "function TFS = isnancellrobust(cellA)" 
},
"isnancolsb": {
"prefix": "isnancolsb",
"body": "${1:tfs = }isnancolsb(${2:A}, ${3:numNaNs})$0",
"description": "function tfs = isnancolsb(A, numNaNs)" 
},
"isnancolsb_d": {
"prefix": "isnancolsb_d",
"body": "isnancolsb_d$0",
"description": "function isnancolsb_d" 
},
"isnancolsvar_d": {
"prefix": "isnancolsvar_d",
"body": "isnancolsvar_d$0",
"description": "function isnancolsb_d" 
},
"isnullstrcols": {
"prefix": "isnullstrcols",
"body": "${1:tfs = }isnullstrcols(${2:A})$0",
"description": "function tfs = isnullstrcols(A)" 
},
"isnumericcell": {
"prefix": "isnumericcell",
"body": "${1:tfsnum = }isnumericcell(${2:A})$0",
"description": "function tfsnum = isnumericcell(A)" 
},
"isrepetition": {
"prefix": "isrepetition",
"body": "${1:tfs = }isrepetition(${2:A})$0",
"description": "function tfs =  isrepetition(A)" 
},
"isrowsb": {
"prefix": "isrowsb",
"body": "${1:tfs = }isrowsb(${2:A}, ${3:aNames}, ${4:aSubs})$0",
"description": "function tfs = isrowsb(A, aNames, aSubs)" 
},
"isuniquelrw_d": {
"prefix": "isuniquelrw_d",
"body": "isuniquelrw_d$0",
"description": "isuniquelrw_d" 
},
"joincolswithindicator": {
"prefix": "joincolswithindicator",
"body": "${1:res = }joincolswithindicator(${2:A}, ${3:indicator}, ${4:indicatorvalue}, ${5:colnames})$0",
"description": "function res = joincolswithindicator(A,  indicator, indicatorvalue, colnames)" 
},
"latextable": {
"prefix": "latextable",
"body": "latextable(${2:X}, ${3:varargin})$0",
"description": "function latextable(X,varargin)" 
},
"lengthcell": {
"prefix": "lengthcell",
"body": "${1:lengthA = }lengthcell(${2:A})$0",
"description": "function lengthA = lengthcell(A)" 
},
"level2growthratebyProvince": {
"prefix": "level2growthratebyProvince",
"body": "${1:cellB = }level2growthratebyProvince(${2:cellA}, ${3:varsYearProvince}, ${4:vars}, ${5:vindicator}, ${6:basePeriod})$0",
"description": "function cellB = level2growthratebyProvince(cellA, varsYearProvince, vars, vindicator, basePeriod)" 
},
"linkcells": {
"prefix": "linkcells",
"body": "${1:cellB = }linkcells(${2:cellAs})$0",
"description": "function cellB = linkcells(cellAs)" 
},
"logtab": {
"prefix": "logtab",
"body": "${1:A = }logtab(${2:A})$0",
"description": "function A = logtab(A)" 
},
"logtab_d": {
"prefix": "logtab_d",
"body": "logtab_d$0",
"description": "logtab_d" 
},
"matrix2latexlrw": {
"prefix": "matrix2latexlrw",
"body": "${1:texmy = }matrix2latexlrw(${2:matrix}, ${3:varargin})$0",
"description": "function texmy = matrix2latexlrw(matrix,  varargin)" 
},
"meancell": {
"prefix": "meancell",
"body": "${1:stdAcell = }meancell(${2:cellA}, ${3:colsname})$0",
"description": "function [stdAcell] = meancell(cellA, colsname)" 
},
"mergecellskeyObsofFirstCellOnly": {
"prefix": "mergecellskeyObsofFirstCellOnly",
"body": "${1:[raw2, cellconflict] = }mergecellskeyObsofFirstCellOnly(${2:varargin})$0",
"description": "function [raw2, cellconflict] = mergecellskeyObsofFirstCellOnly(varargin)" 
},
"movecolsleft": {
"prefix": "movecolsleft",
"body": "${1:A = }movecolsleft(${2:A}, ${3:cols})$0",
"description": "function A = movecolsleft(A, cols)" 
},
"nanaddlrw": {
"prefix": "nanaddlrw",
"body": "${1:z = }nanaddlrw(${2:x}, ${3:y})$0",
"description": "function z = nanaddlrw(x, y)" 
},
"num2cellhead": {
"prefix": "num2cellhead",
"body": "${1:varargout = }num2cellhead(${2:A}, ${3:head})$0",
"description": "function varargout = num2cellhead(A, head)" 
},
"num2cellstr": {
"prefix": "num2cellstr",
"body": "${1:A = }num2cellstr(${2:A}, ${3:varargin})$0",
"description": "function A = num2cellstr(A,varargin)" 
},
"opcolsx2x": {
"prefix": "opcolsx2x",
"body": "${1:A = }opcolsx2x(${2:A}, ${3:colnames}, ${4:fn}, ${5:varargin})$0",
"description": "function A = opcolsx2x(A, colnames, fn, varargin)" 
},
"opcolsx2xbyelement": {
"prefix": "opcolsx2xbyelement",
"body": "${1:A = }opcolsx2xbyelement(${2:A}, ${3:colnames}, ${4:fn}, ${5:varargin})$0",
"description": "function A = opcolsx2xbyelement(A, colnames, fn, varargin)" 
},
"opcolsx2y": {
"prefix": "opcolsx2y",
"body": "${1:A = }opcolsx2y(${2:A}, ${3:xcols}, ${4:ycols}, ${5:fn})$0",
"description": "function A = opcolsx2y(A, xcols, ycols, fn)" 
},
"opcolsxy2z": {
"prefix": "opcolsxy2z",
"body": "${1:A = }opcolsxy2z(${2:A}, ${3:xycols}, ${4:zcols}, ${5:fn})$0",
"description": "function A = opcolsxy2z(A, xycols,zcols, fn)" 
},
"pvalue2pvaluestar": {
"prefix": "pvalue2pvaluestar",
"body": "${1:xstr = }pvalue2pvaluestar(${2:xs})$0",
"description": "function xstr = pvalue2pvaluestar(xs)" 
},
"repcellNaN": {
"prefix": "repcellNaN",
"body": "${1:cellData = }repcellNaN(${2:cellData}, ${3:replaceWith})$0",
"description": "function cellData = cellNaNReplace (cellData, replaceWith)" 
},
"repcellbycondition": {
"prefix": "repcellbycondition",
"body": "${1:cellData = }repcellbycondition(${2:cellData}, ${3:funCondition}, ${4:replaceWith}, ${5:varargin})$0",
"description": "function cellData = repcellbycondition(cellData, funCondition, replaceWith,varargin)" 
},
"repcellbyelement": {
"prefix": "repcellbyelement",
"body": "${1:A = }repcellbyelement(${2:A}, ${3:yx})$0",
"description": "function A = repcellbyelement(A, yx)" 
},
"repcellwhitespace": {
"prefix": "repcellwhitespace",
"body": "${1:cellData = }repcellwhitespace(${2:cellData}, ${3:replaceWith})$0",
"description": "function cellData = repcellwhitespace(cellData, replaceWith)" 
},
"repcmp0": {
"prefix": "repcmp0",
"body": "${1:a = }repcmp0(${2:a}, ${3:yx})$0",
"description": "function a = repcmp0(a, yx)" 
},
"repcmpRobust": {
"prefix": "repcmpRobust",
"body": "${1:A = }repcmpRobust(${2:A}, ${3:yx})$0",
"description": "function A = repcmpRobust(A, yx)" 
},
"repcolsbyvar": {
"prefix": "repcolsbyvar",
"body": "${1:A = }repcolsbyvar(${2:A}, ${3:varargin})$0",
"description": "function A =repcolsbyvar(A, varargin)" 
},
"repfind0": {
"prefix": "repfind0",
"body": "${1:a = }repfind0(${2:a}, ${3:yx})$0",
"description": "function a = repfind0(a, yx)" 
},
"repfind0_d": {
"prefix": "repfind0_d",
"body": "repfind0_d$0",
"description": "repfind0_d" 
},
"repfindRobust": {
"prefix": "repfindRobust",
"body": "${1:A = }repfindRobust(${2:A}, ${3:yx})$0",
"description": "function A = repfindRobust(A, yx)" 
},
"repfindRobust_back": {
"prefix": "repfindRobust_back",
"body": "${1:A = }repfindRobust_back(${2:A}, ${3:yx})$0",
"description": "function A = repfindRobust_back(A, yx)" 
},
"reshapebyblock": {
"prefix": "reshapebyblock",
"body": "${1:out = }reshapebyblock(${2:M}, ${3:ncols})$0",
"description": "function out = reshapebyblock(M,ncols)" 
},
"showcellnew": {
"prefix": "showcellnew",
"body": "showcellnew(${2:varargin})$0",
"description": "function showcell(varargin)" 
},
"showrepetition": {
"prefix": "showrepetition",
"body": "showrepetition(${2:A})$0",
"description": "function showrepetition(A)" 
},
"sortcell": {
"prefix": "sortcell",
"body": "${1:Y = }sortcell(${2:X}, ${3:DIM})$0",
"description": "function Y = sortcell(X, DIM)" 
},
"sortrowsCell_d": {
"prefix": "sortrowsCell_d",
"body": "sortrowsCell_d$0",
"description": "sortrowsCell_d" 
},
"sortrowscell": {
"prefix": "sortrowscell",
"body": "${1:cellA = }sortrowscell(${2:cellA}, ${3:cols})$0",
"description": "function cellA = sortrowscell(cellA, cols)" 
},
"sortstructcell": {
"prefix": "sortstructcell",
"body": "${1:A = }sortstructcell(${2:A}, ${3:afieldname})$0",
"description": "function A = sortstructcell(A, afieldname)" 
},
"stdNormalizedcell": {
"prefix": "stdNormalizedcell",
"body": "${1:stdAcell = }stdNormalizedcell(${2:cellA}, ${3:colsname}, ${4:gdpname})$0",
"description": "function [stdAcell] = stdNormalizedcell(cellA, colsname, gdpname)" 
},
"stdcell": {
"prefix": "stdcell",
"body": "${1:stdAcell = }stdcell(${2:cellA}, ${3:colsname})$0",
"description": "function [stdAcell] = stdcell(cellA, colsname)" 
},
"str2celllrw": {
"prefix": "str2celllrw",
"body": "${1:c = }str2celllrw(${2:s}, ${3:varargin})$0",
"description": "function	c=str2cell(s,varargin)" 
},
"str2numcell": {
"prefix": "str2numcell",
"body": "${1:cellA = }str2numcell(${2:cellA})$0",
"description": "function cellA = str2numcell(cellA)" 
},
"strcatrobust": {
"prefix": "strcatrobust",
"body": "${1:B = }strcatrobust(${2:varargin})$0",
"description": "function B = strcatrobust(varargin)" 
},
"strcell": {
"prefix": "strcell",
"body": "${1:str = }strcell(${2:c})$0",
"description": "function str = strcell(c)" 
},
"strsplitCell": {
"prefix": "strsplitCell",
"body": "${1:cellB = }strsplitCell(${2:cellA}, ${3:demi})$0",
"description": "function cellB = strsplitCell(cellA,demi)" 
},
"structToCellArray": {
"prefix": "structToCellArray",
"body": "${1:outCellArray = }structToCellArray(${2:inStruct})$0",
"description": "function [outCellArray] = structToCellArrayWithHeaders ( inStruct )" 
},
"tab2num": {
"prefix": "tab2num",
"body": "${1:cellA = }tab2num(${2:cellA})$0",
"description": "function cellA = tab2num(cellA)" 
},
"txt2cell": {
"prefix": "txt2cell",
"body": "${1:rawData = }txt2cell(${2:file}, ${3:delimeter})$0",
"description": "function rawData = txt2cell(file, delimeter)" 
},
"txt2cell_d": {
"prefix": "txt2cell_d",
"body": "txt2cell_d$0",
"description": "txt2cell_d" 
},
"uniqueRowsCA": {
"prefix": "uniqueRowsCA",
"body": "${1:[uCA, ndx, pos] = }uniqueRowsCA(${2:iCA}, ${3:TREAT_NAN_EQUAL}, ${4:FIRST_LAST})$0",
"description": "function [uCA,ndx,pos] = uniqueRowsCA(iCA,TREAT_NAN_EQUAL,FIRST_LAST)" 
},
"unique_no_sort": {
"prefix": "unique_no_sort",
"body": "${1:[b, ndx, pos] = }unique_no_sort(${2:a})$0",
"description": "function [b,ndx,pos] = unique_no_sort(a)" 
},
"uniquecell": {
"prefix": "uniquecell",
"body": "${1:[Au, idx, idx2] = }uniquecell(${2:A})$0",
"description": "function [Au, idx ,idx2] = uniquecell(A)" 
},
"updatecols": {
"prefix": "updatecols",
"body": "${1:A = }updatecols(${2:A}, ${3:colnames}, ${4:fn}, ${5:varargin})$0",
"description": "function A = updatecols(A, colnames, fn, varargin)" 
},
"xls2cell": {
"prefix": "xls2cell",
"body": "${1:cellA = }xls2cell(${2:varargin})$0",
"description": "function cellA = xls2cell(varargin)" 
},
"Cell2Vec": {
"prefix": "Cell2Vec",
"body": "${1:varargout = }Cell2Vec(${2:varargin})$0",
"description": "function varargout = Cell2Vec(varargin)" 
},
"Cell2VecLrw": {
"prefix": "Cell2VecLrw",
"body": "${1:varargout = }Cell2VecLrw(${2:varargin})$0",
"description": "function varargout = Cell2Vec(varargin)" 
},
"InstallMexLrw": {
"prefix": "InstallMexLrw",
"body": "${1:Ok = }InstallMexLrw(${2:SourceFile}, ${3:varargin})$0",
"description": "function Ok = InstallMex(SourceFile, varargin)" 
},
"uTest_Cell2Vec": {
"prefix": "uTest_Cell2Vec",
"body": "uTest_Cell2Vec(${2:doSpeed})$0",
"description": "function uTest_Cell2Vec(doSpeed)" 
},
"uTest_Cell2VecLrw": {
"prefix": "uTest_Cell2VecLrw",
"body": "uTest_Cell2VecLrw(${2:doSpeed})$0",
"description": "function uTest_Cell2VecLrw(doSpeed)" 
},
"._showcells": {
"prefix": "._showcells",
"body": "._showcells$0",
"description": "._showcells" 
},
"parse_json2": {
"prefix": "parse_json2",
"body": "${1:data json = }parse_json2(${2:json})$0",
"description": "function [data json] = parse_json(json)" 
},
"parse_json2_d": {
"prefix": "parse_json2_d",
"body": "parse_json2_d$0",
"description": "parse_json2_d" 
},
"loadxml": {
"prefix": "loadxml",
"body": "${1:varargout = }loadxml(${2:filename}, ${3:varargin})$0",
"description": "function varargout = loadxml(filename,varargin)" 
},
"mat2xml": {
"prefix": "mat2xml",
"body": "${1:varargout = }mat2xml(${2:matfile}, ${3:xmlfile})$0",
"description": "function varargout = mat2xml(matfile, xmlfile)" 
},
"savexml": {
"prefix": "savexml",
"body": "savexml(${2:filename}, ${3:varargin})$0",
"description": "function savexml(filename, varargin)" 
},
"struct2xml": {
"prefix": "struct2xml",
"body": "${1:tree = }struct2xml(${2:s}, ${3:rootname})$0",
"description": "function tree = struct2xml(s,rootname)" 
},
"view_ui": {
"prefix": "view_ui",
"body": "${1:varargout = }view_ui(${2:action}, ${3:figHandle})$0",
"description": "function varargout = view_ui(action,figHandle)" 
},
"xml2mat": {
"prefix": "xml2mat",
"body": "${1:varargout = }xml2mat(${2:xmlfile}, ${3:matfile})$0",
"description": "function varargout = xml2mat(xmlfile, matfile)" 
},
"xmldemo1": {
"prefix": "xmldemo1",
"body": "xmldemo1$0",
"description": "xmldemo1" 
},
"xmldemo2": {
"prefix": "xmldemo2",
"body": "xmldemo2$0",
"description": "xmldemo2" 
},
"xmldemo3": {
"prefix": "xmldemo3",
"body": "xmldemo3$0",
"description": "xmldemo3" 
},
"add_V1": {
"prefix": "add_V1",
"body": "${1:varargout = }add(${2:tree}, ${3:uid}, ${4:type}, ${5:parameter})$0",
"description": "function varargout = add(tree,uid,type,parameter)" 
},
"attributes": {
"prefix": "attributes",
"body": "${1:varargout = }attributes(${2:varargin})$0",
"description": "function varargout = attributes(varargin)" 
},
"branch": {
"prefix": "branch",
"body": "${1:subtree = }branch(${2:tree}, ${3:uid})$0",
"description": "function subtree = branch(tree,uid)" 
},
"char_V1": {
"prefix": "char_V1",
"body": "${1:s = }char(${2:tree})$0",
"description": "function s = char(tree)" 
},
"children": {
"prefix": "children",
"body": "${1:child = }children(${2:tree}, ${3:uid})$0",
"description": "function child = children(tree,uid)" 
},
"convert_V1": {
"prefix": "convert_V1",
"body": "${1:s = }convert(${2:tree}, ${3:uid})$0",
"description": "function s = convert(tree,uid)" 
},
"copy_V1": {
"prefix": "copy_V1",
"body": "${1:tree = }copy(${2:tree}, ${3:subuid}, ${4:uid})$0",
"description": "function tree = copy(tree,subuid,uid)" 
},
"delete": {
"prefix": "delete",
"body": "${1:tree = }delete(${2:tree}, ${3:uid})$0",
"description": "function tree = delete(tree,uid)" 
},
"display_V1": {
"prefix": "display_V1",
"body": "display(${2:tree})$0",
"description": "function display(tree)" 
},
"editor": {
"prefix": "editor",
"body": "editor(${2:tree})$0",
"description": "function editor(tree)" 
},
"find_V1": {
"prefix": "find_V1",
"body": "${1:list = }find(${2:varargin})$0",
"description": "function list = find(varargin)" 
},
"flush": {
"prefix": "flush",
"body": "${1:tree = }flush(${2:tree}, ${3:uid})$0",
"description": "function tree = flush(tree,uid)" 
},
"get_V1": {
"prefix": "get_V1",
"body": "${1:value = }get(${2:tree}, ${3:uid}, ${4:parameter})$0",
"description": "function value = get(tree,uid,parameter)" 
},
"getfilename": {
"prefix": "getfilename",
"body": "${1:filename = }getfilename(${2:tree})$0",
"description": "function filename = getfilename(tree)" 
},
"isfield": {
"prefix": "isfield",
"body": "${1:F = }isfield(${2:tree}, ${3:uid}, ${4:parameter})$0",
"description": "function F = isfield(tree,uid,parameter)" 
},
"length_V1": {
"prefix": "length_V1",
"body": "${1:l = }length(${2:tree}, ${3:r})$0",
"description": "function l = length(tree,r)" 
},
"move": {
"prefix": "move",
"body": "${1:tree = }move(${2:tree}, ${3:uida}, ${4:uidb})$0",
"description": "function tree = move(tree,uida, uidb)" 
},
"parent": {
"prefix": "parent",
"body": "${1:p = }parent(${2:tree}, ${3:uid})$0",
"description": "function p = parent(tree,uid)" 
},
"root_V1": {
"prefix": "root_V1",
"body": "${1:uid = }root(${2:tree})$0",
"description": "function uid = root(tree)" 
},
"save": {
"prefix": "save",
"body": "${1:varargout = }save(${2:tree}, ${3:filename})$0",
"description": "function varargout = save(tree, filename)" 
},
"set_V1": {
"prefix": "set_V1",
"body": "${1:tree = }set(${2:tree}, ${3:uid}, ${4:parameter}, ${5:value})$0",
"description": "function tree = set(tree,uid, parameter, value)" 
},
"setfilename": {
"prefix": "setfilename",
"body": "${1:tree = }setfilename(${2:tree}, ${3:filename})$0",
"description": "function tree = setfilename(tree,filename)" 
},
"view": {
"prefix": "view",
"body": "view(${2:tree})$0",
"description": "function view(tree)" 
},
"xmltree": {
"prefix": "xmltree",
"body": "${1:tree = }xmltree(${2:varargin})$0",
"description": "function tree = xmltree(varargin)" 
},
"xml_findstr": {
"prefix": "xml_findstr",
"body": "${1:k = }xml_findstr(${2:s}, ${3:p}, ${4:i}, ${5:n})$0",
"description": "function k = xml_findstr(s,p,i,n)" 
},
"xml_parser": {
"prefix": "xml_parser",
"body": "${1:tree = }xml_parser(${2:xmlstr})$0",
"description": "function tree = xml_parser(xmlstr)" 
},
"Date2Num2 (2)": {
"prefix": "Date2Num2 (2)",
"body": "${1:OUT = }Date2Num2 (2)(${2:DATA})$0",
"description": "function OUT = Date2Num(DATA)" 
},
"M2Qaccum": {
"prefix": "M2Qaccum",
"body": "${1:A = }M2Qaccum(${2:A}, ${3:vms})$0",
"description": "function A = M2Qaccum(A, vms)" 
},
"M2Yaccum": {
"prefix": "M2Yaccum",
"body": "${1:A = }M2Yaccum(${2:A}, ${3:vms})$0",
"description": "function A = M2Yaccum(A, vms)" 
},
"appendDate": {
"prefix": "appendDate",
"body": "${1:cellB = }appendDate(${2:cellA}, ${3:Date}, ${4:Datename})$0",
"description": "function cellB = appendDate(cellA,Date,Datename)" 
},
"datastr2datanendRobust_d": {
"prefix": "datastr2datanendRobust_d",
"body": "datastr2datanendRobust_d$0",
"description": "function datestr2datenendRobust_d" 
},
"date2num": {
"prefix": "date2num",
"body": "${1:num = }date2num(${2:datem})$0",
"description": "function num = date2num(datem)" 
},
"dateint2datenum": {
"prefix": "dateint2datenum",
"body": "${1:T = }dateint2datenum(${2:Dateint})$0",
"description": "function T = dateint2datenum(Dateint)" 
},
"datelabel": {
"prefix": "datelabel",
"body": "datelabel(${2:opts})$0",
"description": "function datelabel(opts)" 
},
"datestr2datenumEndRobust": {
"prefix": "datestr2datenumEndRobust",
"body": "${1:Daten = }datestr2datenumEndRobust(${2:A}, ${3:varargin})$0",
"description": "function Daten = datestr2datenumEndRobust(A,varargin)" 
},
"datestr2datenumEndRobust_d": {
"prefix": "datestr2datenumEndRobust_d",
"body": "datestr2datenumEndRobust_d$0",
"description": "datestr2datenumEndRobust_d" 
},
"datestr2num": {
"prefix": "datestr2num",
"body": "${1:num = }datestr2num(${2:datestr})$0",
"description": "function num = datestr2num(datestr)" 
},
"datestrCell": {
"prefix": "datestrCell",
"body": "${1:c1 = }datestrCell(${2:c0}, ${3:varargin})$0",
"description": "function c1 = datestrCell(c0,varargin)" 
},
"datestrNow": {
"prefix": "datestrNow",
"body": "${1:timenow = }datestrNow$0",
"description": "function timenow = datestrNow()" 
},
"datestrRobust": {
"prefix": "datestrRobust",
"body": "${1:C1 = }datestrRobust(${2:C1}, ${3:varargin})$0",
"description": "function C1 = datestrRobust(C1,varargin)" 
},
"datestrRobustTable": {
"prefix": "datestrRobustTable",
"body": "${1:T = }datestrRobustTable(${2:T}, ${3:varargin})$0",
"description": "function T = datestrRobustTable(T,varargin)" 
},
"datestrRobustTableCols": {
"prefix": "datestrRobustTableCols",
"body": "${1:T = }datestrRobustTableCols(${2:T}, ${3:cols}, ${4:varargin})$0",
"description": "function T = datestrRobustTableCols(T,cols,varargin)" 
},
"datetick2": {
"prefix": "datetick2",
"body": "datetick2(${2:varargin})$0",
"description": "function datetick2(varargin)" 
},
"dateveccell": {
"prefix": "dateveccell",
"body": "${1:datevecMatrix = }dateveccell(${2:Celldate})$0",
"description": "function datevecMatrix = dateveccell(Celldate)" 
},
"dropYQMD": {
"prefix": "dropYQMD",
"body": "${1:Acell = }dropYQMD(${2:Acell}, ${3:vnames})$0",
"description": "function Acell = dropYQMD(Acell,vnames)" 
},
"dynamicDateTicks": {
"prefix": "dynamicDateTicks",
"body": "dynamicDateTicks(${2:axH}, ${3:link}, ${4:mdformat})$0",
"description": "function dynamicDateTicks(axH, link, mdformat)" 
},
"eoydate": {
"prefix": "eoydate",
"body": "${1:Date = }eoydate(${2:Y}, ${3:varargin})$0",
"description": "function Date = eoydate(Y, varargin)" 
},
"fillMwithinY": {
"prefix": "fillMwithinY",
"body": "${1:tabB = }fillMwithinY(${2:tabA})$0",
"description": "function tabB = fillMwithinY(tabA)" 
},
"findtheyear_d": {
"prefix": "findtheyear_d",
"body": "findtheyear_d$0",
"description": "findtheyear_d" 
},
"genDateeom": {
"prefix": "genDateeom",
"body": "${1:Acell = }genDateeom(${2:Acell}, ${3:Datestr})$0",
"description": "function Acell = genDateeom(Acell, Datestr)" 
},
"genYQMD": {
"prefix": "genYQMD",
"body": "${1:A = }genYQMD(${2:A}, ${3:Datestr})$0",
"description": "function A = genYQMD(A, Datestr)" 
},
"gencolsConstantnumber": {
"prefix": "gencolsConstantnumber",
"body": "${1:cellA = }gencolsConstantnumber(${2:cellA}, ${3:varargin})$0",
"description": "function cellA = gencolsConstantnumber(cellA, varargin)" 
},
"geneom": {
"prefix": "geneom",
"body": "${1:Date = }geneom(${2:Year}, ${3:Month})$0",
"description": "function Date = geneom(Year,Month)" 
},
"geneomInterval": {
"prefix": "geneomInterval",
"body": "${1:Date = }geneomInterval(${2:Dstart}, ${3:Dend})$0",
"description": "function Date = geneomInterval(Dstart,Dend)" 
},
"geneoq": {
"prefix": "geneoq",
"body": "${1:Date = }geneoq(${2:Year}, ${3:Quarter})$0",
"description": "function Date = geneoq(Year,Quarter)" 
},
"geneoqInterval": {
"prefix": "geneoqInterval",
"body": "${1:Date = }geneoqInterval(${2:Dstart}, ${3:Dend})$0",
"description": "function Date = geneoqInterval(Dstart,Dend)" 
},
"geneoy": {
"prefix": "geneoy",
"body": "${1:Date = }geneoy(${2:Year})$0",
"description": "function Date = geneoy(Year)" 
},
"getDay": {
"prefix": "getDay",
"body": "${1:D = }getDay(${2:Date})$0",
"description": "function D = getDay(Date)" 
},
"getMonth": {
"prefix": "getMonth",
"body": "${1:M = }getMonth(${2:Date})$0",
"description": "function M = getMonth(Date)" 
},
"getQuarter": {
"prefix": "getQuarter",
"body": "${1:Q = }getQuarter(${2:Date})$0",
"description": "function Q = getQuarter(Date)" 
},
"getYear": {
"prefix": "getYear",
"body": "${1:Y = }getYear(${2:Date})$0",
"description": "function Y = getYear(Date)" 
},
"growthrate": {
"prefix": "growthrate",
"body": "${1:agrates = }growthrate(${2:a})$0",
"description": "function agrates = growthrate(a)" 
},
"growthrateT": {
"prefix": "growthrateT",
"body": "${1:agrates = }growthrateT(${2:a})$0",
"description": "function agrates = growthrateT(a)" 
},
"growthratecellappend": {
"prefix": "growthratecellappend",
"body": "${1:cellA = }growthratecellappend(${2:cellA}, ${3:cols})$0",
"description": "function cellA = growthratecellappend(cellA, cols)" 
},
"isbalancedMY": {
"prefix": "isbalancedMY",
"body": "${1:tf = }isbalancedMY(${2:tabA})$0",
"description": "function tf = isbalancedMY(tabA)" 
},
"isdatestr": {
"prefix": "isdatestr",
"body": "${1:tfsdate = }isdatestr(${2:stringcell})$0",
"description": "function tfsdate = isdatestr(stringcell)" 
},
"iseom": {
"prefix": "iseom",
"body": "${1:tfA = }iseom(${2:A})$0",
"description": "function tfA = ismonthEnd(A)" 
},
"iseoy": {
"prefix": "iseoy",
"body": "${1:tfA = }iseoy(${2:A})$0",
"description": "function tfA = iseoy(A)" 
},
"isfeomoy": {
"prefix": "isfeomoy",
"body": "${1:tfA = }isfeomoy(${2:A})$0",
"description": "function tfA = isfeomoy(A)" 
},
"ismonthEnd_d": {
"prefix": "ismonthEnd_d",
"body": "ismonthEnd_d$0",
"description": "ismonthEnd_d" 
},
"isnotmonthtab": {
"prefix": "isnotmonthtab",
"body": "${1:tfs = }isnotmonthtab(${2:A})$0",
"description": "function tfs = isnotmonthtab(A)" 
},
"natmedian": {
"prefix": "natmedian",
"body": "${1:y = }natmedian(${2:x}, ${3:dim})$0",
"description": "function y = natmedian(x,dim)" 
},
"opcolsMinY": {
"prefix": "opcolsMinY",
"body": "${1:tabB = }opcolsMinY(${2:tabA}, ${3:fn}, ${4:xyzName}, ${5:xyzMomth})$0",
"description": "function tabB = opcolsMinY(tabA, fn,  xyzName,  xyzMomth)" 
},
"opcolsnewMinY": {
"prefix": "opcolsnewMinY",
"body": "${1:tabB = }opcolsnewMinY(${2:tabA}, ${3:fn}, ${4:xynewName}, ${5:xynewMomth})$0",
"description": "function tabB = opcolsnewMinY(tabA, fn,  xynewName,  xynewMomth)" 
},
"opx2newMabtocwithinY": {
"prefix": "opx2newMabtocwithinY",
"body": "${1:tabB = }opx2newMabtocwithinY(${2:tabA}, ${3:fn}, ${4:xName}, ${5:newName}, ${6:monthsA}, ${7:monthsB}, ${8:monthsC})$0",
"description": "function tabB = opx2newMabtocwithinY(tabA, fn,  xName,  newName, monthsA, monthsB, monthsC)" 
},
"opx2newMwithinY": {
"prefix": "opx2newMwithinY",
"body": "${1:tabB = }opx2newMwithinY(${2:tabA}, ${3:fn}, ${4:xName}, ${5:newName}, ${6:monthsA})$0",
"description": "function tabB = opx2newMwithinY(tabA, fn,  xName,  newName, monthsA)" 
},
"setDateAxes": {
"prefix": "setDateAxes",
"body": "${1:varargout = }setDateAxes(${2:varargin})$0",
"description": "function varargout = setDateAxes(varargin)" 
},
"tseriesqq2cell": {
"prefix": "tseriesqq2cell",
"body": "${1:c = }tseriesqq2cell(${2:ts})$0",
"description": "function c = tseriesqq2cell(ts)" 
},
"y2eom": {
"prefix": "y2eom",
"body": "${1:dateres = }y2eom(${2:Y})$0",
"description": "function dateres = y2eom(Y)" 
},
"yearLast": {
"prefix": "yearLast",
"body": "${1:[timeYearLast, timeQuaLast, timeMonLast] = }yearLast$0",
"description": "function [timeYearLast, timeQuaLast, timeMonLast]  = yearLast()" 
},
"ym2eom": {
"prefix": "ym2eom",
"body": "${1:eom = }ym2eom(${2:ym}, ${3:varargin})$0",
"description": "function eom = ym2eom(ym, varargin)" 
},
"ymaccum": {
"prefix": "ymaccum",
"body": "${1:b = }ymaccum(${2:A})$0",
"description": "function b = ymaccum(A)" 
},
"ymaccum_d": {
"prefix": "ymaccum_d",
"body": "ymaccum_d$0",
"description": "ymaccum_d" 
},
"ymaccumcol": {
"prefix": "ymaccumcol",
"body": "${1:A = }ymaccumcol(${2:A}, ${3:varname})$0",
"description": "function A = ymaccumcol(A, varname)" 
},
"ymaccumcolrobust": {
"prefix": "ymaccumcolrobust",
"body": "${1:B = }ymaccumcolrobust(${2:A}, ${3:varname})$0",
"description": "function B = ymaccumcolrobust(A, varname)" 
},
"ymdiff": {
"prefix": "ymdiff",
"body": "${1:[B, varargout] = }ymdiff(${2:A}, ${3:varargin})$0",
"description": "function [B, varargout]= ymdiff(A, varargin)" 
},
"ymdiffcol": {
"prefix": "ymdiffcol",
"body": "${1:A = }ymdiffcol(${2:A}, ${3:varname})$0",
"description": "function A = ymdiffcol(A, varname)" 
},
"ymdiffrobusttab": {
"prefix": "ymdiffrobusttab",
"body": "${1:B = }ymdiffrobusttab(${2:A}, ${3:varargin})$0",
"description": "function B  = ymdiffrobusttab(A,varargin)" 
},
"yqaccum": {
"prefix": "yqaccum",
"body": "${1:b = }yqaccum(${2:A})$0",
"description": "function b = yqaccum(A)" 
},
"yqaccum_d": {
"prefix": "yqaccum_d",
"body": "yqaccum_d$0",
"description": "yqaccum_d" 
},
"yqdiff": {
"prefix": "yqdiff",
"body": "${1:b = }yqdiff(${2:A})$0",
"description": "function b = yqdiff(A)" 
},
"yqdiffcell": {
"prefix": "yqdiffcell",
"body": "${1:A = }yqdiffcell(${2:A}, ${3:vms})$0",
"description": "function A = yqdiffcell(A, vms)" 
},
"zoomAdaptiveDateTicks": {
"prefix": "zoomAdaptiveDateTicks",
"body": "zoomAdaptiveDateTicks(${2:varargin})$0",
"description": "function zoomAdaptiveDateTicks(varargin)" 
},
"Dictionary": {
"prefix": "Dictionary",
"body": "${1:this = }Dictionary$0",
"description": "function this = Dictionary" 
},
"dict": {
"prefix": "dict",
"body": "${1:val = }dict(${2:obj}, ${3:ref})$0",
"description": "function val = subsref(obj,ref)" 
},
"dict_demo": {
"prefix": "dict_demo",
"body": "dict_demo$0",
"description": "dict_demo" 
},
"tutorial_MDD": {
"prefix": "tutorial_MDD",
"body": "tutorial_MDD$0",
"description": "tutorial_MDD" 
},
"wiki": {
"prefix": "wiki",
"body": "wiki$0",
"description": "wiki" 
},
"MDDAxis": {
"prefix": "MDDAxis",
"body": "${1:obj = }MDDAxis(${2:varargin})$0",
"description": "function obj = MDDAxis(varargin)" 
},
"MDDRef": {
"prefix": "MDDRef",
"body": "${1:obj = }MDDRef(${2:varargin})$0",
"description": "function obj = MDDRef(varargin)" 
},
"MDD": {
"prefix": "MDD",
"body": "${1:obj = }MDD$0",
"description": "function obj = set.data(obj,value)" 
},
"calcClasses": {
"prefix": "calcClasses",
"body": "${1:[out, outsimple] = }calcClasses(${2:input}, ${3:field_type})$0",
"description": "function [out, outsimple] = calcClasses(input,field_type)" 
},
"checkDims": {
"prefix": "checkDims",
"body": "${1:varargout = }checkDims(${2:obj}, ${3:optionalChecksFlag})$0",
"description": "function varargout = checkDims(obj, optionalChecksFlag)" 
},
"fixAxes": {
"prefix": "fixAxes",
"body": "${1:obj = }fixAxes(${2:obj}, ${3:optionalFixesFlag})$0",
"description": "function obj = fixAxes(obj, optionalFixesFlag)" 
},
"importData": {
"prefix": "importData",
"body": "${1:obj = }importData(${2:obj}, ${3:data}, ${4:axis_vals}, ${5:axis_names})$0",
"description": "function obj = importData(obj, data, axis_vals, axis_names)" 
},
"importDataTable": {
"prefix": "importDataTable",
"body": "${1:obj = }importDataTable(${2:obj}, ${3:data_column}, ${4:axis_val_columns}, ${5:axis_names}, ${6:overwriteBool})$0",
"description": "function obj = importDataTable(obj, data_column, axis_val_columns, axis_names, overwriteBool)" 
},
"importFile": {
"prefix": "importFile",
"body": "${1:obj = }importFile(${2:obj}, ${3:filePath}, ${4:dataCol}, ${5:headerFlag}, ${6:delimiter})$0",
"description": "function obj = importFile(obj, filePath, dataCol, headerFlag, delimiter)" 
},
"linearMerge": {
"prefix": "linearMerge",
"body": "${1:obj_out = }linearMerge(${2:obj1}, ${3:obj2}, ${4:forceMergeBool})$0",
"description": "function obj_out = linearMerge(obj1, obj2, forceMergeBool)" 
},
"merge_V2": {
"prefix": "merge_V2",
"body": "${1:obj_out = }merge(${2:obj1}, ${3:obj2}, ${4:forceMergeBool}, ${5:debugBool})$0",
"description": "function obj_out = merge(obj1, obj2, forceMergeBool, debugBool)" 
},
"mergeDims": {
"prefix": "mergeDims",
"body": "${1:obj = }mergeDims(${2:obj}, ${3:dims2merge})$0",
"description": "function obj = mergeDims(obj,dims2merge)" 
},
"packDim": {
"prefix": "packDim",
"body": "${1:obj = }packDim(${2:obj}, ${3:dim_src}, ${4:dim_target})$0",
"description": "function obj = packDim(obj,dim_src,dim_target)" 
},
"recursiveFunc": {
"prefix": "recursiveFunc",
"body": "${1:varargout = }recursiveFunc(${2:xp}, ${3:function_handles}, ${4:dimensions}, ${5:function_arguments})$0",
"description": "function varargout = recursiveFunc(xp,function_handles,dimensions,function_arguments)" 
},
"recursiveFunc_1": {
"prefix": "recursiveFunc_1",
"body": "${1:varargout = }recursiveFunc_1(${2:xp}, ${3:function_handles}, ${4:dimensions}, ${5:function_arguments})$0",
"description": "function varargout = recursiveFunc(xp,function_handles,dimensions,function_arguments)" 
},
"recursiveFunc_2": {
"prefix": "recursiveFunc_2",
"body": "${1:varargout = }recursiveFunc_2(${2:xp}, ${3:function_handles}, ${4:dimensions}, ${5:function_arguments})$0",
"description": "function varargout = recursiveFunc_2(xp,function_handles,dimensions,function_arguments)" 
},
"recursivePlot": {
"prefix": "recursivePlot",
"body": "${1:varargout = }recursivePlot(${2:varargin})$0",
"description": "function varargout = recursivePlot(varargin)" 
},
"subset": {
"prefix": "subset",
"body": "${1:[obj2, ro] = }subset(${2:obj}, ${3:varargin})$0",
"description": "function [obj2, ro] = subset(obj,varargin)" 
},
"unpackDim": {
"prefix": "unpackDim",
"body": "${1:obj_new = }unpackDim(${2:obj}, ${3:dim_src}, ${4:dim_target}, ${5:dim_name}, ${6:dim_values})$0",
"description": "function obj_new = unpackDim(obj, dim_src, dim_target, dim_name, dim_values)" 
},
"add_stars": {
"prefix": "add_stars",
"body": "add_stars(${2:handle}, ${3:t}, ${4:logical}, ${5:side_vec}, ${6:c_order})$0",
"description": "function add_stars(handle, t, logical, side_vec, c_order)" 
},
"struct_addDef": {
"prefix": "struct_addDef",
"body": "${1:s = }struct_addDef(${2:s}, ${3:fieldname}, ${4:default_value})$0",
"description": "function s = struct_addDef(s,fieldname,default_value)" 
},
"subplot_size": {
"prefix": "subplot_size",
"body": "${1:[subplot_rows, subplot_cols] = }subplot_size(${2:no_plots})$0",
"description": "function [subplot_rows,subplot_cols]=subplot_size(no_plots)" 
},
"catstruct": {
"prefix": "catstruct",
"body": "${1:A = }catstruct(${2:varargin})$0",
"description": "function A = catstruct(varargin)" 
},
"boundedline": {
"prefix": "boundedline",
"body": "${1:varargout = }boundedline(${2:varargin})$0",
"description": "function varargout = boundedline(varargin)" 
},
"outlinebounds": {
"prefix": "outlinebounds",
"body": "${1:hnew = }outlinebounds(${2:hl}, ${3:hp})$0",
"description": "function hnew = outlinebounds(hl, hp)" 
},
"catuneven": {
"prefix": "catuneven",
"body": "${1:b = }catuneven(${2:dim}, ${3:padval}, ${4:varargin})$0",
"description": "function b = catuneven(dim, padval, varargin)" 
},
"singlepatch": {
"prefix": "singlepatch",
"body": "${1:varargout = }singlepatch(${2:varargin})$0",
"description": "function varargout = singlepatch(varargin)" 
},
"subplot_grid": {
"prefix": "subplot_grid",
"body": "${1:this = }subplot_grid(${2:varargin})$0",
"description": "function this = subplot_grid(varargin)" 
},
"Cell_2_MDDict": {
"prefix": "Cell_2_MDDict",
"body": "${1:data_out = }Cell_2_MDDict(${2:data}, ${3:mat_ax_names}, ${4:mat_ax_values})$0",
"description": "function data_out = Cell_2_MDD(data,mat_ax_names,mat_ax_values)" 
},
"figformat_str": {
"prefix": "figformat_str",
"body": "${1:output = }figformat_str(${2:input})$0",
"description": "function output = figformat_str(input)" 
},
"figl": {
"prefix": "figl",
"body": "${1:varargout = }figl(${2:varargin})$0",
"description": "function varargout = figl(varargin)" 
},
"iscellnum": {
"prefix": "iscellnum",
"body": "${1:OUT = }iscellnum(${2:IN})$0",
"description": "function OUT = iscellnum(IN)" 
},
"previewTable": {
"prefix": "previewTable",
"body": "${1:dt_formatted = }previewTable(${2:data_table}, ${3:col_names}, ${4:maxrows})$0",
"description": "function [dt_formatted] = previewTable(data_table,col_names,maxrows)" 
},
"spare_code_for_doing_meta_datainfo_as_xPlt": {
"prefix": "spare_code_for_doing_meta_datainfo_as_xPlt",
"body": "${1:di = }spare_code_for_doing_meta_datainfo_as_xPlt(${2:di}, ${3:packed_vars}, ${4:packed_name})$0",
"description": "function di = update_metadata_packedDims(di,packed_vars,packed_name)" 
},
"adaptive_indices": {
"prefix": "adaptive_indices",
"body": "${1:[dim_indices, subplot_indices, figure_indices, no_rows, no_cols, figs_through] = }adaptive_indices(${2:sz}, ${3:max_subplot_side})$0",
"description": "function [dim_indices, subplot_indices, figure_indices, no_rows, no_cols, figs_through] = adaptive_indices(sz, max_subplot_side)" 
},
"apply_to_data": {
"prefix": "apply_to_data",
"body": "${1:xp_out = }apply_to_data(${2:xp}, ${3:function_handle}, ${4:varargin})$0",
"description": "function xp_out = apply_to_data(xp, function_handle, varargin)" 
},
"mean_over_axis": {
"prefix": "mean_over_axis",
"body": "${1:obj_out = }mean_over_axis(${2:obj}, ${3:axis_dim}, ${4:op})$0",
"description": "function obj_out = mean_over_axis(obj, axis_dim, op) % axis_dim, function_handle, varargin)" 
},
"norm_axis_by_value": {
"prefix": "norm_axis_by_value",
"body": "${1:obj = }norm_axis_by_value(${2:obj}, ${3:axis_dim}, ${4:axis_value}, ${5:norm_flag})$0",
"description": "function obj = norm_axis_by_value(obj, axis_dim, axis_value, norm_flag)" 
},
"xp1D_matrix_boundedline": {
"prefix": "xp1D_matrix_boundedline",
"body": "${1:hxp = }xp1D_matrix_boundedline(${2:xp}, ${3:op})$0",
"description": "function hxp = xp1D_matrix_boundedline (xp, op)" 
},
"xp1D_matrix_plot": {
"prefix": "xp1D_matrix_plot",
"body": "${1:hxp = }xp1D_matrix_plot(${2:xp}, ${3:op})$0",
"description": "function hxp = xp1D_matrix_plot (xp, op)" 
},
"xp_abs": {
"prefix": "xp_abs",
"body": "${1:obj = }xp_abs(${2:obj})$0",
"description": "function obj = xp_abs(obj)" 
},
"xp_compare_1D": {
"prefix": "xp_compare_1D",
"body": "xp_compare_1D(${2:xp}, ${3:test_handle}, ${4:significance})$0",
"description": "function xp_compare_1D(xp, test_handle, significance)" 
},
"xp_compare_2D": {
"prefix": "xp_compare_2D",
"body": "${1:[p_values, test] = }xp_compare_2D(${2:xp}, ${3:test_handle}, ${4:significance}, ${5:transpose_flag}, ${6:flip_axis_flag})$0",
"description": "function [p_values, test] = xp_compare_2D(xp, test_handle, significance, transpose_flag, flip_axis_flag)" 
},
"xp_compare_3D": {
"prefix": "xp_compare_3D",
"body": "xp_compare_3D(${2:xp}, ${3:test_handle}, ${4:significance}, ${5:flip_axis_flag}, ${6:plot_function})$0",
"description": "function xp_compare_3D(xp, test_handle, significance, flip_axis_flag, plot_function)" 
},
"xp_compare_barplot_2D": {
"prefix": "xp_compare_barplot_2D",
"body": "xp_compare_barplot_2D(${2:xp}, ${3:test_handle}, ${4:significance}, ${5:transpose_flag}, ${6:flip_axis_flag})$0",
"description": "function xp_compare_barplot_2D(xp, test_handle, significance, transpose_flag, flip_axis_flag)" 
},
"xp_comparison_plot_1D": {
"prefix": "xp_comparison_plot_1D",
"body": "xp_comparison_plot_1D(${2:xp}, ${3:test_handle}, ${4:significance})$0",
"description": "function xp_comparison_plot_1D(xp, test_handle, significance)" 
},
"xp_comparison_plot_2D": {
"prefix": "xp_comparison_plot_2D",
"body": "xp_comparison_plot_2D(${2:xp}, ${3:op})$0",
"description": "function xp_comparison_plot_2D(xp, op)" 
},
"xp_corr": {
"prefix": "xp_corr",
"body": "${1:[p, rho, fit] = }xp_corr(${2:xp})$0",
"description": "function [p, rho, fit] = xp_corr(xp)" 
},
"xp_handles_newfig": {
"prefix": "xp_handles_newfig",
"body": "${1:hxp = }xp_handles_newfig(${2:xp}, ${3:op})$0",
"description": "function hxp = xp_handles_newfig (xp, op)" 
},
"xp_matrix": {
"prefix": "xp_matrix",
"body": "${1:hxp = }xp_matrix(${2:xp}, ${3:legend_flag})$0",
"description": "function hxp = xp_matrix (xp, legend_flag)" 
},
"xp_matrix_advancedplot3D": {
"prefix": "xp_matrix_advancedplot3D",
"body": "${1:hxp = }xp_matrix_advancedplot3D(${2:xp}, ${3:op})$0",
"description": "function hxp = xp_matrix_advancedplot3D (xp, op)" 
},
"xp_matrix_barplot": {
"prefix": "xp_matrix_barplot",
"body": "xp_matrix_barplot(${2:xp})$0",
"description": "function xp_matrix_barplot (xp)" 
},
"xp_matrix_basicplot": {
"prefix": "xp_matrix_basicplot",
"body": "${1:hxp = }xp_matrix_basicplot(${2:xp}, ${3:options})$0",
"description": "function hxp = xp_matrix_basicplot (xp, options)" 
},
"xp_matrix_basicplot_cdata": {
"prefix": "xp_matrix_basicplot_cdata",
"body": "${1:hxp = }xp_matrix_basicplot_cdata(${2:xp})$0",
"description": "function hxp = xp_matrix_basicplot_cdata (xp)" 
},
"xp_matrix_imagesc": {
"prefix": "xp_matrix_imagesc",
"body": "${1:hxp = }xp_matrix_imagesc(${2:xp}, ${3:options})$0",
"description": "function hxp = xp_matrix_imagesc (xp, options)" 
},
"xp_matrix_transpose": {
"prefix": "xp_matrix_transpose",
"body": "${1:obj = }xp_matrix_transpose(${2:obj})$0",
"description": "function obj = xp_matrix_transpose(obj)" 
},
"xp_parfor": {
"prefix": "xp_parfor",
"body": "${1:varargout = }xp_parfor(${2:xp})$0",
"description": "function varargout = xp_parfor (xp)" 
},
"xp_pass_values": {
"prefix": "xp_pass_values",
"body": "${1:varargout = }xp_pass_values(${2:xp})$0",
"description": "function varargout = xp_pass_values (xp)" 
},
"xp_plotimage": {
"prefix": "xp_plotimage",
"body": "${1:hxp = }xp_plotimage(${2:xp}, ${3:op})$0",
"description": "function hxp = xp_plotimage (xp,op)" 
},
"xp_scatter": {
"prefix": "xp_scatter",
"body": "xp_scatter(${2:xp})$0",
"description": "function xp_scatter(xp)" 
},
"xp_scatter_w_corr": {
"prefix": "xp_scatter_w_corr",
"body": "xp_scatter_w_corr(${2:xp})$0",
"description": "function xp_scatter_w_corr(xp)" 
},
"xp_subplot": {
"prefix": "xp_subplot",
"body": "${1:hxp = }xp_subplot(${2:xp}, ${3:options})$0",
"description": "function hxp=xp_subplot (xp,options)" 
},
"xp_subplot_grid": {
"prefix": "xp_subplot_grid",
"body": "${1:hxp = }xp_subplot_grid(${2:xp}, ${3:op})$0",
"description": "function hxp = xp_subplot_grid (xp, op)" 
},
"xp_subplot_grid3D": {
"prefix": "xp_subplot_grid3D",
"body": "${1:hxp = }xp_subplot_grid3D(${2:xp}, ${3:op})$0",
"description": "function hxp = xp_subplot_grid3D (xp, op)" 
},
"xp_subplot_grid_adaptive": {
"prefix": "xp_subplot_grid_adaptive",
"body": "${1:hsg = }xp_subplot_grid_adaptive(${2:xp}, ${3:dim_order}, ${4:max_subplot_side}, ${5:display_mode}, ${6:transpose_on})$0",
"description": "function hsg = xp_subplot_grid_adaptive (xp, dim_order, max_subplot_side, display_mode, transpose_on)" 
},
"xp_tight_subplot_adaptive": {
"prefix": "xp_tight_subplot_adaptive",
"body": "${1:[hts, titles] = }xp_tight_subplot_adaptive(${2:xp}, ${3:dim_order}, ${4:max_subplot_side}, ${5:transpose_on}, ${6:sync_axes_flag})$0",
"description": "function [hts, titles] = xp_tight_subplot_adaptive (xp, dim_order, max_subplot_side, transpose_on, sync_axes_flag)" 
},
"myMDDAxisSubclass": {
"prefix": "myMDDAxisSubclass",
"body": "myMDDAxisSubclass$0",
"description": "myMDDAxisSubclass" 
},
"myMDDRefSubclass": {
"prefix": "myMDDRefSubclass",
"body": "${1:obj = }myMDDRefSubclass(${2:varargin})$0",
"description": "function obj = myMDDRefSubclass(varargin)" 
},
"myMDDSubclass": {
"prefix": "myMDDSubclass",
"body": "${1:obj = }myMDDSubclass(${2:varargin})$0",
"description": "function obj = ImportDataTable(varargin)    % Function for importing data in a 2D table format" 
},
"OverlayTable": {
"prefix": "OverlayTable",
"body": "${1:[h, hbox] = }OverlayTable(${2:hfig}, ${3:tableData}, ${4:left}, ${5:top}, ${6:width}, ${7:height}, ${8:varargin})$0",
"description": "function [h,hbox] = OverlayTable(hfig,tableData,left,top,width,height,varargin)" 
},
"OverlayTableEdit": {
"prefix": "OverlayTableEdit",
"body": "${1:out = }OverlayTableEdit(${2:d}, ${3:defCell})$0",
"description": "function out = OverlayTableEdit(d,defCell)" 
},
"bwr": {
"prefix": "bwr",
"body": "${1:rgb = }bwr(${2:n})$0",
"description": "function rgb = bwr(n)" 
},
"test_wiggle": {
"prefix": "test_wiggle",
"body": "test_wiggle$0",
"description": "test_wiggle" 
},
"wiggle": {
"prefix": "wiggle",
"body": "wiggle(${2:varargin})$0",
"description": "function wiggle(varargin)" 
},
"Createproject_Lrw": {
"prefix": "Createproject_Lrw",
"body": "Createproject_Lrw(${2:foldername}, ${3:projname})$0",
"description": "function Createproject_Lrw(foldername, projname)" 
},
"absolutepath": {
"prefix": "absolutepath",
"body": "${1:abs_path = }absolutepath(${2:rel_path}, ${3:act_path})$0",
"description": "function  abs_path = absolutepath( rel_path, act_path )" 
},
"absolutepathrobust": {
"prefix": "absolutepathrobust",
"body": "${1:abs_path = }absolutepathrobust(${2:rel_path}, ${3:act_path})$0",
"description": "function  abs_path = absolutepathrobust( rel_path, act_path )" 
},
"addpath_recurse": {
"prefix": "addpath_recurse",
"body": "addpath_recurse(${2:strStartDir}, ${3:caStrsIgnoreDirs}, ${4:strXorIntAddpathMode}, ${5:blnRemDirs}, ${6:blnDebug})$0",
"description": "function addpath_recurse(strStartDir, caStrsIgnoreDirs, strXorIntAddpathMode, blnRemDirs, blnDebug)" 
},
"addpathgenpath": {
"prefix": "addpathgenpath",
"body": "${1:pathadd = }addpathgenpath(${2:pathwk}, ${3:varargin})$0",
"description": "function pathadd = addpathgenpath(pathwk,varargin)" 
},
"addpathmfile": {
"prefix": "addpathmfile",
"body": "${1:varargout = }addpathmfile(${2:imfile}, ${3:varargin})$0",
"description": "function varargout =  addpathmfile(imfile, varargin)" 
},
"addpathprj": {
"prefix": "addpathprj",
"body": "${1:varargout = }addpathprj(${2:varargin})$0",
"description": "function varargout =  addpathprj(varargin)" 
},
"addpathprjBackup": {
"prefix": "addpathprjBackup",
"body": "addpathprjBackup(${2:varargin})$0",
"description": "function addpathprjBackup(varargin)" 
},
"addpathprjVER2017": {
"prefix": "addpathprjVER2017",
"body": "${1:varargout = }addpathprjVER2017(${2:currentmfilepath}, ${3:varargin})$0",
"description": "function varargout =  addpathprj(currentmfilepath, varargin)" 
},
"addpathprj_test": {
"prefix": "addpathprj_test",
"body": "addpathprj_test$0",
"description": "function addpathprj_test" 
},
"associateFiles": {
"prefix": "associateFiles",
"body": "associateFiles(${2:action}, ${3:userExtList}, ${4:fileStr})$0",
"description": "function associateFiles(action, userExtList, fileStr)" 
},
"cdmfile": {
"prefix": "cdmfile",
"body": "${1:p = }cdmfile(${2:mfile})$0",
"description": "function p = cdmfile(mfile)" 
},
"cdmfileAddpathprj": {
"prefix": "cdmfileAddpathprj",
"body": "${1:[pathwk, pathprj, pathadded] = }cdmfileAddpathprj(${2:myMfilename}, ${3:varargin})$0",
"description": "function [pathwk,pathprj,pathadded] = cdmfileAddpathprj(myMfilename,varargin)" 
},
"cdmfileMkdirProjectFolders": {
"prefix": "cdmfileMkdirProjectFolders",
"body": "${1:[P, F] = }cdmfileMkdirProjectFolders(${2:myMfilename}, ${3:varargin})$0",
"description": "function [P,F] = cdmfileMkdirProjectFolders(myMfilename,varargin)" 
},
"cell2csvUTF8": {
"prefix": "cell2csvUTF8",
"body": "cell2csvUTF8(${2:fileName}, ${3:cellArray}, ${4:separator}, ${5:excelYear}, ${6:decimal})$0",
"description": "function cell2csvUTF8(fileName, cellArray, separator, excelYear, decimal)" 
},
"copyfileNoOverwrite": {
"prefix": "copyfileNoOverwrite",
"body": "${1:flag = }copyfileNoOverwrite(${2:fA}, ${3:fB})$0",
"description": "function flag = copyfileNoOverwrite(fA, fB)" 
},
"csv2celltxtscan": {
"prefix": "csv2celltxtscan",
"body": "${1:data = }csv2celltxtscan(${2:varargin})$0",
"description": "function data = csv2celltxtscan(varargin)" 
},
"dir2cell": {
"prefix": "dir2cell",
"body": "${1:[names, datenums, dates, bytes, isdirs] = }dir2cell(${2:arg}, ${3:varargin})$0",
"description": "function [names, datenums, dates, bytes, isdirs] = dir2cell(arg,varargin)" 
},
"dir2table": {
"prefix": "dir2table",
"body": "${1:Ftab = }dir2table(${2:p}, ${3:varargin})$0",
"description": "function Ftab = dir2table(p,varargin)" 
},
"dirrec": {
"prefix": "dirrec",
"body": "${1:varargout = }dirrec(${2:reper}, ${3:ext})$0",
"description": "function [varargout] = dirrec(reper,ext)" 
},
"ffpath": {
"prefix": "ffpath",
"body": "${1:pth = }ffpath(${2:fname})$0",
"description": "function pth = ffpath(fname)" 
},
"fgetsall": {
"prefix": "fgetsall",
"body": "${1:str = }fgetsall(${2:file1})$0",
"description": "function str = fgetsall(file1)" 
},
"filedatenum": {
"prefix": "filedatenum",
"body": "${1:datemodified = }filedatenum(${2:filename})$0",
"description": "function datemodified = filedatenum(filename)" 
},
"filepartsname": {
"prefix": "filepartsname",
"body": "${1:fname = }filepartsname(${2:file})$0",
"description": "function fname = filepartsname(file)" 
},
"findfiles": {
"prefix": "findfiles",
"body": "${1:varargout = }findfiles(${2:varargin})$0",
"description": "function [varargout] = findfiles(varargin)" 
},
"findfullname": {
"prefix": "findfullname",
"body": "${1:pth = }findfullname(${2:fname})$0",
"description": "function pth = findfullname(fname)" 
},
"freadJson": {
"prefix": "freadJson",
"body": "${1:s = }freadJson(${2:f})$0",
"description": "function s = freadJson(f)" 
},
"fwriteCN": {
"prefix": "fwriteCN",
"body": "fwriteCN(${2:file1}, ${3:AA1})$0",
"description": "function fwriteCN(file1,AA1)" 
},
"fwriteJson": {
"prefix": "fwriteJson",
"body": "${1:strJson = }fwriteJson(${2:file1}, ${3:s})$0",
"description": "function strJson = fwriteJson(file1, s)" 
},
"fwriteUTF8": {
"prefix": "fwriteUTF8",
"body": "fwriteUTF8(${2:file1}, ${3:AA1})$0",
"description": "function fwriteUTF8(file1,AA1)" 
},
"getfilenames": {
"prefix": "getfilenames",
"body": "${1:filenames = }getfilenames(${2:varargin})$0",
"description": "function filenames = getfilenames(varargin)" 
},
"index2xlsregion": {
"prefix": "index2xlsregion",
"body": "${1:regionidx = }index2xlsregion(${2:idrows}, ${3:idcols})$0",
"description": "function regionidx = index2xlsregion(idrows,idcols)" 
},
"load1": {
"prefix": "load1",
"body": "load1(${2:filenames}, ${3:varargin})$0",
"description": "function load1(filenames, varargin)" 
},
"locateFolderInPath": {
"prefix": "locateFolderInPath",
"body": "${1:varargout = }locateFolderInPath(${2:folder}, ${3:startpath}, ${4:varargin})$0",
"description": "function varargout = locateFolderinPath(folder, startpath, varargin)" 
},
"locateFolderInPathOld": {
"prefix": "locateFolderInPathOld",
"body": "${1:varargout = }locateFolderInPathOld(${2:folder})$0",
"description": "function varargout = locatefolderInPath(folder)" 
},
"locatefile": {
"prefix": "locatefile",
"body": "${1:varargout = }locatefile(${2:varargin})$0",
"description": "function [varargout] = locatefile(varargin)" 
},
"locatefileInproject": {
"prefix": "locatefileInproject",
"body": "${1:pathres = }locatefileInproject(${2:file})$0",
"description": "function pathres = locatefileInproject(file)" 
},
"locatefolder": {
"prefix": "locatefolder",
"body": "${1:varargout = }locatefolder(${2:startpath}, ${3:folder}, ${4:varargin})$0",
"description": "function varargout = locatefolder(startpath, folder, varargin)" 
},
"locatefolderInProject": {
"prefix": "locatefolderInProject",
"body": "${1:varargout = }locatefolderInProject(${2:myfolder}, ${3:varargin})$0",
"description": "function varargout = locatefolderInProject(myfolder, varargin)" 
},
"mkdirProjectFolders": {
"prefix": "mkdirProjectFolders",
"body": "${1:[path, file] = }mkdirProjectFolders(${2:pathWorkspace})$0",
"description": "function [path,file] = mkdirProjectFolders(pathWorkspace)" 
},
"path_demo": {
"prefix": "path_demo",
"body": "path_demo$0",
"description": "path_demo" 
},
"pathcaller": {
"prefix": "pathcaller",
"body": "${1:pathb = }pathcaller$0",
"description": "function pathb = pathcaller()" 
},
"pathcallermfile": {
"prefix": "pathcallermfile",
"body": "${1:pathb = }pathcallermfile$0",
"description": "function pathb = pathcallermfile()" 
},
"pathcallerpwd": {
"prefix": "pathcallerpwd",
"body": "${1:pathb = }pathcallerpwd$0",
"description": "function pathb = pathcallerpwd()" 
},
"rdir": {
"prefix": "rdir",
"body": "${1:varargout = }rdir(${2:rootdir}, ${3:varargin})$0",
"description": "function [varargout] = rdir(rootdir,varargin)" 
},
"readascii": {
"prefix": "readascii",
"body": "${1:argout = }readascii(${2:argin})$0",
"description": "function argout = readascii(argin)" 
},
"readtableCSMARENCN": {
"prefix": "readtableCSMARENCN",
"body": "${1:[T1, C1, heads] = }readtableCSMARENCN(${2:fData}, ${3:fVarDes})$0",
"description": "function [T1, C1, heads] = readtableCSMARENCN(fData, fVarDes)" 
},
"relativepath": {
"prefix": "relativepath",
"body": "${1:rel_path = }relativepath(${2:tgt_path}, ${3:act_path})$0",
"description": "function  rel_path = relativepath( tgt_path, act_path )" 
},
"searchfile": {
"prefix": "searchfile",
"body": "${1:list = }searchfile(${2:varargin})$0",
"description": "function list = searchfile(varargin)" 
},
"squeezecellstr": {
"prefix": "squeezecellstr",
"body": "${1:cellB = }squeezecellstr(${2:cellAs})$0",
"description": "function cellB = squeezecellstr(cellAs)" 
},
"textfile": {
"prefix": "textfile",
"body": "${1:content = }textfile(${2:filename}, ${3:arg1}, ${4:arg2})$0",
"description": "function content = textfile(filename, arg1, arg2)" 
},
"textfileGBK": {
"prefix": "textfileGBK",
"body": "${1:content = }textfileGBK(${2:filename}, ${3:arg1}, ${4:arg2})$0",
"description": "function content = textfileGBK(filename, arg1, arg2)" 
},
"textfileRep": {
"prefix": "textfileRep",
"body": "textfileRep(${2:ftarget}, ${3:strss})$0",
"description": "function textfileRep(ftarget,strss)" 
},
"textscanu": {
"prefix": "textscanu",
"body": "${1:C = }textscanu(${2:filename}, ${3:encoding}, ${4:del_sym}, ${5:eol_sym}, ${6:wb})$0",
"description": "function C = textscanu(filename, encoding, del_sym, eol_sym, wb)" 
},
"xlsxsheet2csv": {
"prefix": "xlsxsheet2csv",
"body": "${1:fcsv = }xlsxsheet2csv(${2:fxls}, ${3:sheets}, ${4:varargin})$0",
"description": "function fcsv = xlsxsheet2csv(fxls,sheets,varargin)" 
},
"GetFullPath": {
"prefix": "GetFullPath",
"body": "${1:File = }GetFullPath(${2:File}, ${3:Style})$0",
"description": "function File = GetFullPath(File, Style)" 
},
"InstallMex": {
"prefix": "InstallMex",
"body": "InstallMex(${2:SourceFile}, ${3:varargin})$0",
"description": "function InstallMex(SourceFile, varargin)" 
},
"uTest_GetFullPath": {
"prefix": "uTest_GetFullPath",
"body": "uTest_GetFullPath(${2:doSpeed})$0",
"description": "function uTest_GetFullPath(doSpeed)  %#ok<INUSD>" 
},
"exportToZip": {
"prefix": "exportToZip",
"body": "${1:[zipfilename, req] = }exportToZip(${2:funcname}, ${3:zipfilename})$0",
"description": "function [zipfilename,req] = exportToZip(funcname,zipfilename)" 
},
"exportToZipLRW": {
"prefix": "exportToZipLRW",
"body": "${1:[zipfilename, req] = }exportToZipLRW(${2:funcname}, ${3:zipfilename})$0",
"description": "function [zipfilename,req] = exportToZipLRW(funcname,zipfilename)" 
},
"exportToZipWithFundep": {
"prefix": "exportToZipWithFundep",
"body": "${1:[fzip, fmAndemf] = }exportToZipWithFundep(${2:f}, ${3:varargin})$0",
"description": "function [fzip,fmAndemf] = exportToZipWithFundep(f,varargin)" 
},
"exportToZipWithFundep_demo": {
"prefix": "exportToZipWithFundep_demo",
"body": "exportToZipWithFundep_demo$0",
"description": "exportToZipWithFundep_demo" 
},
"mydepfun": {
"prefix": "mydepfun",
"body": "${1:filelist = }mydepfun(${2:fn}, ${3:recursive})$0",
"description": "function filelist = mydepfun(fn,recursive)" 
},
"pack_n_go": {
"prefix": "pack_n_go",
"body": "pack_n_go(${2:zipTarget}, ${3:varargin})$0",
"description": "function pack_n_go(zipTarget,varargin)" 
},
"plot_depfunLRW": {
"prefix": "plot_depfunLRW",
"body": "${1:varargout = }plot_depfunLRW(${2:foo}, ${3:varargin})$0",
"description": "function varargout = plot_depfunLRW(foo,varargin)" 
},
"fdep": {
"prefix": "fdep",
"body": "${1:po = }fdep(${2:varargin})$0",
"description": "function	po=fdep(varargin)" 
},
"mGraphViz": {
"prefix": "mGraphViz",
"body": "${1:[textObj, patchObj, nodeNames, adjacent] = }mGraphViz(${2:dotFile}, ${3:surface}, ${4:varargin})$0",
"description": "function [textObj,patchObj,nodeNames,adjacent]=mGraphViz(dotFile,surface,varargin)" 
},
"mkdotfile": {
"prefix": "mkdotfile",
"body": "${1:txt = }mkdotfile(${2:Ifile}, ${3:Ofile})$0",
"description": "function txt = mkdotfile(Ifile,Ofile)" 
},
"tfdep1": {
"prefix": "tfdep1",
"body": "tfdep1$0",
"description": "function	tfdep1" 
},
"tfdep2": {
"prefix": "tfdep2",
"body": "tfdep2$0",
"description": "tfdep2" 
},
"tfdep3": {
"prefix": "tfdep3",
"body": "${1:r = }tfdep3(${2:varargin})$0",
"description": "function	r=tfdep3(varargin)" 
},
"tfdep4": {
"prefix": "tfdep4",
"body": "tfdep4(${2:varargin})$0",
"description": "function	tfdep4(varargin)" 
},
"struct2jdata": {
"prefix": "struct2jdata",
"body": "${1:newdata = }struct2jdata(${2:data}, ${3:varargin})$0",
"description": "function newdata=struct2jdata(data,varargin)" 
},
"demo_subfun": {
"prefix": "demo_subfun",
"body": "demo_subfun$0",
"description": "demo_subfun" 
},
"plot_subfun": {
"prefix": "plot_subfun",
"body": "${1:varargout = }plot_subfun(${2:foo}, ${3:varargin})$0",
"description": "function varargout = plot_subfun(foo,varargin)" 
},
"plot_depfun": {
"prefix": "plot_depfun",
"body": "${1:varargout = }plot_depfun(${2:foo}, ${3:varargin})$0",
"description": "function varargout = plot_depfun(foo,varargin)" 
},
"._plot_depfun": {
"prefix": "._plot_depfun",
"body": "._plot_depfun$0",
"description": "._plot_depfun" 
},
"fillmissingProvinceByCity": {
"prefix": "fillmissingProvinceByCity",
"body": "${1:T = }fillmissingProvinceByCity(${2:T}, ${3:varNameCityProv})$0",
"description": "function T = fillmissingProvinceByCity(T,varNameCityProv)" 
},
"frontierAssetAB": {
"prefix": "frontierAssetAB",
"body": "${1:[muPy, strlatex] = }frontierAssetAB(${2:mu}, ${3:cov}, ${4:sigPx})$0",
"description": "function [muPy, strlatex] = frontierAssetAB(mu,cov,sigPx)" 
},
"assert备份": {
"prefix": "assert备份",
"body": "assert备份(${2:pred}, ${3:str})$0",
"description": "function assert(pred, str)" 
},
"audcad_trading": {
"prefix": "audcad_trading",
"body": "audcad_trading$0",
"description": "audcad_trading" 
},
"bollinger_5min": {
"prefix": "bollinger_5min",
"body": "bollinger_5min$0",
"description": "bollinger_5min" 
},
"bollinger_5min_parameterless": {
"prefix": "bollinger_5min_parameterless",
"body": "bollinger_5min_parameterless$0",
"description": "bollinger_5min_parameterless" 
},
"calculateAvgHoldday": {
"prefix": "calculateAvgHoldday",
"body": "${1:avgNumHoldDays = }calculateAvgHoldday(${2:positionTable})$0",
"description": "function avgNumHoldDays=calculateAvgHoldday(positionTable)" 
},
"calculateAvgHoldday2": {
"prefix": "calculateAvgHoldday2",
"body": "${1:avgNumHoldDays = }calculateAvgHoldday2(${2:positionTable})$0",
"description": "function avgNumHoldDays=calculateAvgHoldday2(positionTable)" 
},
"calculateMaxDD_simple": {
"prefix": "calculateMaxDD_simple",
"body": "${1:maxDD maxDDD = }calculateMaxDD_simple(${2:cumret})$0",
"description": "function [maxDD maxDDD]=calculateMaxDD_simple(cumret)" 
},
"calculateNumRTTrades": {
"prefix": "calculateNumRTTrades",
"body": "${1:numRTTrades = }calculateNumRTTrades(${2:positionTable})$0",
"description": "function numRTTrades=calculateNumRTTrades(positionTable)" 
},
"example3_1": {
"prefix": "example3_1",
"body": "example3_1$0",
"description": "example3_1" 
},
"example3_4": {
"prefix": "example3_4",
"body": "example3_4$0",
"description": "example3_4" 
},
"example3_6": {
"prefix": "example3_6",
"body": "example3_6$0",
"description": "example3_6" 
},
"example3_6_1": {
"prefix": "example3_6_1",
"body": "example3_6_1$0",
"description": "example3_6_1" 
},
"example3_7": {
"prefix": "example3_7",
"body": "example3_7$0",
"description": "example3_7" 
},
"example6_3": {
"prefix": "example6_3",
"body": "example6_3$0",
"description": "example6_3" 
},
"example7_2": {
"prefix": "example7_2",
"body": "example7_2$0",
"description": "example7_2" 
},
"example7_3": {
"prefix": "example7_3",
"body": "example7_3$0",
"description": "example7_3" 
},
"example7_4": {
"prefix": "example7_4",
"body": "example7_4$0",
"description": "example7_4" 
},
"example7_5": {
"prefix": "example7_5",
"body": "example7_5$0",
"description": "example7_5" 
},
"example7_6": {
"prefix": "example7_6",
"body": "example7_6$0",
"description": "example7_6" 
},
"example7_7": {
"prefix": "example7_7",
"body": "example7_7$0",
"description": "example7_7" 
},
"fillMissingData_V1": {
"prefix": "fillMissingData_V1",
"body": "${1:filledPrices = }fillMissingData(${2:prices})$0",
"description": "function [filledPrices]=fillMissingData(prices)" 
},
"fx_portfolio_trading_parameterless": {
"prefix": "fx_portfolio_trading_parameterless",
"body": "fx_portfolio_trading_parameterless$0",
"description": "fx_portfolio_trading_parameterless" 
},
"gldgdx_trading": {
"prefix": "gldgdx_trading",
"body": "gldgdx_trading$0",
"description": "gldgdx_trading" 
},
"gldgdx_trading_parameterless": {
"prefix": "gldgdx_trading_parameterless",
"body": "gldgdx_trading_parameterless$0",
"description": "gldgdx_trading_parameterless" 
},
"gldgdxuso_trading": {
"prefix": "gldgdxuso_trading",
"body": "gldgdxuso_trading$0",
"description": "gldgdxuso_trading" 
},
"indexArbXLE": {
"prefix": "indexArbXLE",
"body": "indexArbXLE$0",
"description": "indexArbXLE" 
},
"isLastTradingDayOfMonth": {
"prefix": "isLastTradingDayOfMonth",
"body": "${1:isLastTradingDayOfMonth = }isLastTradingDayOfMonth(${2:tday})$0",
"description": "function isLastTradingDayOfMonth=isLastTradingDayOfMonth(tday)" 
},
"kellyCapAlloc": {
"prefix": "kellyCapAlloc",
"body": "kellyCapAlloc$0",
"description": "kellyCapAlloc" 
},
"lag1": {
"prefix": "lag1",
"body": "${1:y = }lag1(${2:x})$0",
"description": "function y=lag(x)" 
},
"month": {
"prefix": "month",
"body": "${1:[n, m] = }month(${2:d})$0",
"description": "function [n,m] = month(d)" 
},
"movingMax": {
"prefix": "movingMax",
"body": "${1:mvmax = }movingMax(${2:x}, ${3:T})$0",
"description": "function [mvmax] = movingMax(x, T)" 
},
"movingMin": {
"prefix": "movingMin",
"body": "${1:mvmin = }movingMin(${2:x}, ${3:T})$0",
"description": "function [mvmin] = movingMin(x, T)" 
},
"port_trade": {
"prefix": "port_trade",
"body": "port_trade$0",
"description": "port_trade" 
},
"port_trade_lookaheadbias": {
"prefix": "port_trade_lookaheadbias",
"body": "port_trade_lookaheadbias$0",
"description": "port_trade_lookaheadbias" 
},
"port_trade_truncate": {
"prefix": "port_trade_truncate",
"body": "port_trade_truncate$0",
"description": "port_trade_truncate" 
},
"retrieveHQuoteHistoricalPrice": {
"prefix": "retrieveHQuoteHistoricalPrice",
"body": "retrieveHQuoteHistoricalPrice$0",
"description": "retrieveHQuoteHistoricalPrice" 
},
"smartMovingAvg_V1": {
"prefix": "smartMovingAvg_V1",
"body": "${1:mvavg = }smartMovingAvg(${2:x}, ${3:T}, ${4:varargin})$0",
"description": "function [mvavg] = smartMovingAvg(x, T, varargin)" 
},
"smartMovingStd_V1": {
"prefix": "smartMovingStd_V1",
"body": "${1:sd = }smartMovingStd(${2:x}, ${3:T}, ${4:varargin})$0",
"description": "function sd=smartMovingStd(x, T, varargin)" 
},
"smartMovingStd2": {
"prefix": "smartMovingStd2",
"body": "${1:sd = }smartMovingStd2(${2:x}, ${3:T}, ${4:varargin})$0",
"description": "function sd=smartMovingStd2(x, T, varargin)" 
},
"smartcov": {
"prefix": "smartcov",
"body": "${1:y = }smartcov(${2:x})$0",
"description": "function y = smartcov(x)" 
},
"smartcumsum": {
"prefix": "smartcumsum",
"body": "${1:y = }smartcumsum(${2:x}, ${3:dim})$0",
"description": "function y = smartcumsum(x,dim)" 
},
"smartmean_V1": {
"prefix": "smartmean_V1",
"body": "${1:y = }smartmean(${2:x}, ${3:dim})$0",
"description": "function y = smartmean(x, dim)" 
},
"smartmean2": {
"prefix": "smartmean2",
"body": "${1:y = }smartmean2(${2:x}, ${3:dim})$0",
"description": "function y = smartmean(x,dim)" 
},
"smartstd_V1": {
"prefix": "smartstd_V1",
"body": "${1:y = }smartstd(${2:x}, ${3:dim})$0",
"description": "function y = smartstd(x, dim)" 
},
"smartstd2": {
"prefix": "smartstd2",
"body": "${1:y = }smartstd2(${2:x}, ${3:dim})$0",
"description": "function y = smartstd(x,dim)" 
},
"smartsum2": {
"prefix": "smartsum2",
"body": "${1:y = }smartsum2(${2:x}, ${3:dim})$0",
"description": "function y = smartsum2(x,dim)" 
},
"year": {
"prefix": "year",
"body": "${1:y = }year(${2:d})$0",
"description": "function y = year(d)" 
},
"AUDCAD_daily": {
"prefix": "AUDCAD_daily",
"body": "AUDCAD_daily$0",
"description": "AUDCAD_daily" 
},
"AUDCAD_unequal": {
"prefix": "AUDCAD_unequal",
"body": "AUDCAD_unequal$0",
"description": "AUDCAD_unequal" 
},
"CL_rev": {
"prefix": "CL_rev",
"body": "CL_rev$0",
"description": "CL_rev" 
},
"GLD_GC": {
"prefix": "GLD_GC",
"body": "GLD_GC$0",
"description": "GLD_GC" 
},
"KF_beta_EWA_EWC": {
"prefix": "KF_beta_EWA_EWC",
"body": "KF_beta_EWA_EWC$0",
"description": "KF_beta_EWA_EWC" 
},
"LogPriceSpread": {
"prefix": "LogPriceSpread",
"body": "LogPriceSpread$0",
"description": "LogPriceSpread" 
},
"PriceSpread": {
"prefix": "PriceSpread",
"body": "PriceSpread$0",
"description": "PriceSpread" 
},
"Ratio": {
"prefix": "Ratio",
"body": "Ratio$0",
"description": "Ratio" 
},
"TU_mom": {
"prefix": "TU_mom",
"body": "TU_mom$0",
"description": "TU_mom" 
},
"TU_mom_hypothesisTest": {
"prefix": "TU_mom_hypothesisTest",
"body": "TU_mom_hypothesisTest$0",
"description": "TU_mom_hypothesisTest" 
},
"VX_ES": {
"prefix": "VX_ES",
"body": "VX_ES$0",
"description": "VX_ES" 
},
"VX_ES_rollreturn": {
"prefix": "VX_ES_rollreturn",
"body": "VX_ES_rollreturn$0",
"description": "VX_ES_rollreturn" 
},
"XLE_CL_rollReturn": {
"prefix": "XLE_CL_rollReturn",
"body": "XLE_CL_rollReturn$0",
"description": "XLE_CL_rollReturn" 
},
"andrewlo_2007_2012": {
"prefix": "andrewlo_2007_2012",
"body": "andrewlo_2007_2012$0",
"description": "andrewlo_2007_2012" 
},
"bog": {
"prefix": "bog",
"body": "bog$0",
"description": "bog" 
},
"calendarSpdsMeanReversion": {
"prefix": "calendarSpdsMeanReversion",
"body": "calendarSpdsMeanReversion$0",
"description": "calendarSpdsMeanReversion" 
},
"cointegrationTests": {
"prefix": "cointegrationTests",
"body": "cointegrationTests$0",
"description": "cointegrationTests" 
},
"correlationTest": {
"prefix": "correlationTest",
"body": "correlationTest$0",
"description": "correlationTest" 
},
"estimateFuturesReturns": {
"prefix": "estimateFuturesReturns",
"body": "estimateFuturesReturns$0",
"description": "estimateFuturesReturns" 
},
"fillMissingData_V2": {
"prefix": "fillMissingData_V2",
"body": "${1:my_prices = }fillMissingData(${2:prices}, ${3:varargin})$0",
"description": "function my_prices=fillMissingData(prices, varargin)" 
},
"gapFutures_FSTX": {
"prefix": "gapFutures_FSTX",
"body": "gapFutures_FSTX$0",
"description": "gapFutures_FSTX" 
},
"indexArb": {
"prefix": "indexArb",
"body": "indexArb$0",
"description": "indexArb" 
},
"kentdaniel": {
"prefix": "kentdaniel",
"body": "kentdaniel$0",
"description": "kentdaniel" 
},
"monteCarloOptimLeverage": {
"prefix": "monteCarloOptimLeverage",
"body": "monteCarloOptimLeverage$0",
"description": "monteCarloOptimLeverage" 
},
"movingStd": {
"prefix": "movingStd",
"body": "${1:sd = }movingStd(${2:x}, ${3:T}, ${4:varargin})$0",
"description": "function sd=movingStd(x, T, varargin)" 
},
"parseEarningsCalendarFromEarningsDotCom": {
"prefix": "parseEarningsCalendarFromEarningsDotCom",
"body": "parseEarningsCalendarFromEarningsDotCom$0",
"description": "parseEarningsCalendarFromEarningsDotCom" 
},
"pead": {
"prefix": "pead",
"body": "pead$0",
"description": "pead" 
},
"smartMovingAvg_V2": {
"prefix": "smartMovingAvg_V2",
"body": "smartMovingAvg$0",
"description": "smartMovingAvg" 
},
"smartMovingStd_V2": {
"prefix": "smartMovingStd_V2",
"body": "smartMovingStd$0",
"description": "smartMovingStd" 
},
"smartmean_V2": {
"prefix": "smartmean_V2",
"body": "smartmean$0",
"description": "smartmean" 
},
"smartstd_V2": {
"prefix": "smartstd_V2",
"body": "smartstd$0",
"description": "smartstd" 
},
"stationarityTests": {
"prefix": "stationarityTests",
"body": "stationarityTests$0",
"description": "stationarityTests" 
},
"FitOU": {
"prefix": "FitOU",
"body": "${1:[Mu, Th, Sig] = }FitOU(${2:Y}, ${3:tau})$0",
"description": "function [Mu,Th,Sig]=FitOU(Y,tau)" 
},
"ProjectOU": {
"prefix": "ProjectOU",
"body": "${1:[Mu_t, Sig_t] = }ProjectOU(${2:x_0}, ${3:t}, ${4:Mu}, ${5:Th}, ${6:Sig})$0",
"description": "function [Mu_t,Sig_t]=ProjectOU(x_0,t,Mu,Th,Sig)" 
},
"S_FitProjectRates": {
"prefix": "S_FitProjectRates",
"body": "S_FitProjectRates$0",
"description": "S_FitProjectRates" 
},
"S_StatArbSwaps": {
"prefix": "S_StatArbSwaps",
"body": "S_StatArbSwaps$0",
"description": "S_StatArbSwaps" 
},
"AnimateTrajectory": {
"prefix": "AnimateTrajectory",
"body": "AnimateTrajectory(${2:x}, ${3:y}, ${4:z})$0",
"description": "function AnimateTrajectory(x,y,z)" 
},
"OUstepEuler": {
"prefix": "OUstepEuler",
"body": "${1:[X_t, Mu_t, Sig_t] = }OUstepEuler(${2:X_0}, ${3:Dt}, ${4:Mu}, ${5:Th}, ${6:Sig})$0",
"description": "function [X_t,Mu_t,Sig_t]=OUstepEuler(X_0,Dt,Mu,Th,Sig)" 
},
"S_CheckDiagonalization": {
"prefix": "S_CheckDiagonalization",
"body": "S_CheckDiagonalization$0",
"description": "S_CheckDiagonalization" 
},
"S_CovarianceEvolution": {
"prefix": "S_CovarianceEvolution",
"body": "S_CovarianceEvolution$0",
"description": "S_CovarianceEvolution" 
},
"S_DeterministicEvolution": {
"prefix": "S_DeterministicEvolution",
"body": "S_DeterministicEvolution$0",
"description": "S_DeterministicEvolution" 
},
"computeHistoricalVaR": {
"prefix": "computeHistoricalVaR",
"body": "${1:VaR = }computeHistoricalVaR(${2:returns}, ${3:confidence_level}, ${4:plot_flag})$0",
"description": "function VaR = computeHistoricalVaR(returns,confidence_level,plot_flag)" 
},
"computeVaRlrw": {
"prefix": "computeVaRlrw",
"body": "${1:VaR = }computeVaRlrw(${2:loss}, ${3:confidence_level}, ${4:plot_flag})$0",
"description": "function VaR = computeVaRlrw(loss,confidence_level,plot_flag)" 
},
"examplehistvar": {
"prefix": "examplehistvar",
"body": "examplehistvar$0",
"description": "examplehistvar" 
},
"huberloss": {
"prefix": "huberloss",
"body": "${1:[v, G] = }huberloss(${2:Z}, ${3:Y}, ${4:r})$0",
"description": "function [v, G] = huberloss(Z, Y, r)" 
},
"lossfnHuber": {
"prefix": "lossfnHuber",
"body": "${1:v = }lossfnHuber(${2:Err}, ${3:delta})$0",
"description": "function v = lossfnHuber(Err,delta)" 
},
"lossfnMeanabs": {
"prefix": "lossfnMeanabs",
"body": "${1:v = }lossfnMeanabs(${2:Err})$0",
"description": "function v = lossfnMeanabs(Err)" 
},
"MySqlMex": {
"prefix": "MySqlMex",
"body": "MySqlMex$0",
"description": "MySqlMex" 
},
"mysql": {
"prefix": "mysql",
"body": "mysql$0",
"description": "mysql" 
},
"renameheadformysql": {
"prefix": "renameheadformysql",
"body": "${1:cellA = }renameheadformysql(${2:cellA})$0",
"description": "function cellA = renameheadformysql(cellA)" 
},
"myblob_close": {
"prefix": "myblob_close",
"body": "myblob_close(${2:ado_connection})$0",
"description": "function myblob_close (ado_connection)" 
},
"myblob_command": {
"prefix": "myblob_command",
"body": "${1:cell_array = }myblob_command(${2:ado_connection}, ${3:command})$0",
"description": "function cell_array = myblob_command (ado_connection, command)" 
},
"myblob_demo": {
"prefix": "myblob_demo",
"body": "myblob_demo$0",
"description": "myblob_demo" 
},
"myblob_from_db": {
"prefix": "myblob_from_db",
"body": "myblob_from_db(${2:ado_connection}, ${3:table}, ${4:column}, ${5:where}, ${6:file})$0",
"description": "function myblob_from_db (ado_connection, table, column, where, file)" 
},
"myblob_open": {
"prefix": "myblob_open",
"body": "${1:ado_connection = }myblob_open(${2:user}, ${3:password}, ${4:server}, ${5:database})$0",
"description": "function ado_connection = myblob_open (user, password, server, database)" 
},
"myblob_to_db": {
"prefix": "myblob_to_db",
"body": "myblob_to_db(${2:ado_connection}, ${3:table}, ${4:column}, ${5:where}, ${6:file})$0",
"description": "function myblob_to_db (ado_connection, table, column, where, file)" 
},
"dbadd": {
"prefix": "dbadd",
"body": "dbadd(${2:dbname})$0",
"description": "function dbadd(dbname)" 
},
"dbcurr_V1": {
"prefix": "dbcurr_V1",
"body": "dbcurr$0",
"description": "dbcurr" 
},
"dbdrop": {
"prefix": "dbdrop",
"body": "dbdrop(${2:name})$0",
"description": "function dbdrop(name)" 
},
"dblist": {
"prefix": "dblist",
"body": "dblist$0",
"description": "dblist" 
},
"dbopen": {
"prefix": "dbopen",
"body": "dbopen(${2:name})$0",
"description": "function dbopen(name)" 
},
"myclose": {
"prefix": "myclose",
"body": "myclose$0",
"description": "function myclose" 
},
"mydemo": {
"prefix": "mydemo",
"body": "mydemo$0",
"description": "mydemo" 
},
"myisopen": {
"prefix": "myisopen",
"body": "myisopen$0",
"description": "myisopen" 
},
"myopen": {
"prefix": "myopen",
"body": "myopen(${2:host}, ${3:user}, ${4:pwd})$0",
"description": "function myopen(host,user,pwd)" 
},
"mysql_mym_utilities_lrw_d": {
"prefix": "mysql_mym_utilities_lrw_d",
"body": "mysql_mym_utilities_lrw_d$0",
"description": "mysql_mym_utilities_lrw_d" 
},
"tbadd": {
"prefix": "tbadd",
"body": "tbadd(${2:table}, ${3:names}, ${4:types}, ${5:varargin})$0",
"description": "function tbadd(table,names,types,varargin)" 
},
"tbattr": {
"prefix": "tbattr",
"body": "tbattr$0",
"description": "tbattr" 
},
"tbdrop": {
"prefix": "tbdrop",
"body": "tbdrop(${2:table})$0",
"description": "function tbdrop(table)" 
},
"tblist": {
"prefix": "tblist",
"body": "tblist$0",
"description": "tblist" 
},
"tbprint": {
"prefix": "tbprint",
"body": "tbprint(${2:table})$0",
"description": "function tbprint(table)" 
},
"tbread": {
"prefix": "tbread",
"body": "tbread(${2:table}, ${3:cols}, ${4:vecs}, ${5:sql})$0",
"description": "function tbread(table,cols,vecs,sql)" 
},
"tbrename": {
"prefix": "tbrename",
"body": "tbrename(${2:old}, ${3:new})$0",
"description": "function tbrename(old,new)" 
},
"tbwrite": {
"prefix": "tbwrite",
"body": "tbwrite(${2:table}, ${3:cols}, ${4:vecs}, ${5:varargin})$0",
"description": "function tbwrite(table,cols,vecs,varargin)" 
},
"dbcurr_V2": {
"prefix": "dbcurr_V2",
"body": "${1:name = }dbcurr$0",
"description": "function [name] = dbcurr" 
},
"istablelrw": {
"prefix": "istablelrw",
"body": "istablelrw$0",
"description": "istablelrw" 
},
"tbattr_lrw": {
"prefix": "tbattr_lrw",
"body": "tbattr_lrw$0",
"description": "tbattr_lrw" 
},
"tbreadcell0": {
"prefix": "tbreadcell0",
"body": "${1:cellres = }tbreadcell0(${2:dbase}, ${3:table}, ${4:cols}, ${5:vecs}, ${6:sql})$0",
"description": "function cellres = tbreadcell0(dbase, table,cols,vecs,sql)" 
},
"tbreadcell": {
"prefix": "tbreadcell",
"body": "${1:cellres = }tbreadcell(${2:table}, ${3:cols}, ${4:vecs}, ${5:sql})$0",
"description": "function cellres = tbreadcell(table,cols,vecs,sql)" 
},
"splitBetween": {
"prefix": "splitBetween",
"body": "${1:[strArray, idbetween] = }splitBetween(${2:strA}, ${3:s1}, ${4:s2})$0",
"description": "function [strArray, idbetween] = splitBetween(strA,s1,s2)" 
},
"strrepBetween": {
"prefix": "strrepBetween",
"body": "${1:[strB, strcell, idbetween] = }strrepBetween(${2:strA}, ${3:s1}, ${4:s2}, ${5:fun})$0",
"description": "function [strB, strcell,idbetween] = strrepBetween(strA,s1,s2,fun)" 
},
"strsplitBetween": {
"prefix": "strsplitBetween",
"body": "${1:[strArray, idbetween] = }strsplitBetween(${2:strA}, ${3:s1}, ${4:s2})$0",
"description": "function [strArray,idbetween] = strsplitBetween(strA,s1,s2)" 
},
"geteq - 副本": {
"prefix": "geteq - 副本",
"body": "${1:[eqstrmatlab, eqstrcell] = }geteq - 副本(${2:assignstr})$0",
"description": "function [eqstrmatlab, eqstrcell] = geteq(assignstr)" 
},
"geteq": {
"prefix": "geteq",
"body": "${1:[eqstrmatlab, eqstrcell] = }geteq(${2:assignstr})$0",
"description": "function [eqstrmatlab, eqstrcell] = geteqlrw(assignstr)" 
},
"geteqcell": {
"prefix": "geteqcell",
"body": "${1:eqstrcell = }geteqcell(${2:assignstr})$0",
"description": "function [eqstrcell] = geteqcell(assignstr)" 
},
"geteqleft": {
"prefix": "geteqleft",
"body": "${1:para = }geteqleft(${2:assignstr})$0",
"description": "function para = geteqleft(assignstr)" 
},
"geteqleftstr": {
"prefix": "geteqleftstr",
"body": "${1:para = }geteqleftstr(${2:assignstr})$0",
"description": "function para = geteqleftstr(assignstr)" 
},
"geteqright": {
"prefix": "geteqright",
"body": "${1:para = }geteqright(${2:assignstr})$0",
"description": "function para = geteqright(assignstr)" 
},
"geteqrightnum": {
"prefix": "geteqrightnum",
"body": "${1:paranum = }geteqrightnum(${2:assignstr})$0",
"description": "function paranum = geteqrightnum(assignstr)" 
},
"getnofromCellstr": {
"prefix": "getnofromCellstr",
"body": "${1:nos = }getnofromCellstr(${2:toks})$0",
"description": "function  nos = getnofromCellstr(toks)" 
},
"getpara": {
"prefix": "getpara",
"body": "${1:v = }getpara(${2:str}, ${3:paras})$0",
"description": "function v = getpara(str,paras)" 
},
"is_str_numeric": {
"prefix": "is_str_numeric",
"body": "${1:out = }is_str_numeric(${2:s})$0",
"description": "function out = is_str_numeric(s)" 
},
"linkcellstr": {
"prefix": "linkcellstr",
"body": "${1:cellB = }linkcellstr(${2:cellAs})$0",
"description": "function cellB = linkcellstr(cellAs)" 
},
"matchpair_demo": {
"prefix": "matchpair_demo",
"body": "matchpair_demo$0",
"description": "matchpair_demo" 
},
"num2percentage": {
"prefix": "num2percentage",
"body": "${1:b = }num2percentage(${2:a}, ${3:varargin})$0",
"description": "function b = num2percentage(a,varargin)" 
},
"num2percentageChinese": {
"prefix": "num2percentageChinese",
"body": "${1:b = }num2percentageChinese(${2:a}, ${3:varargin})$0",
"description": "function b = num2percentageChinese(a,varargin)" 
},
"num2percentageMath": {
"prefix": "num2percentageMath",
"body": "${1:b = }num2percentageMath(${2:a}, ${3:varargin})$0",
"description": "function b = num2percentageMath(a,varargin)" 
},
"num2strexact": {
"prefix": "num2strexact",
"body": "${1:varargout = }num2strexact(${2:varargin})$0",
"description": "function varargout = num2strexact(varargin)" 
},
"pairbrace": {
"prefix": "pairbrace",
"body": "${1:[str1, str2, id1, id2] = }pairbrace(${2:str})$0",
"description": "function [str1, str2, id1, id2] = pairbrace(str)" 
},
"regexpcell": {
"prefix": "regexpcell",
"body": "${1:ids = }regexpcell(${2:tmpstr}, ${3:cellNames})$0",
"description": "function ids =  regexpcell(tmpstr, cellNames)" 
},
"regexpreptokensfn": {
"prefix": "regexpreptokensfn",
"body": "${1:strb = }regexpreptokensfn(${2:stra}, ${3:pattern}, ${4:fn})$0",
"description": "function strb = regexpreptokensfn(stra,pattern,fn)" 
},
"regexptok": {
"prefix": "regexptok",
"body": "${1:[tok, strtail, strhead] = }regexptok(${2:strorg}, ${3:strsub}, ${4:varargin})$0",
"description": "function [tok, strtail, strhead] = regexptok(strorg, strsub, varargin)" 
},
"regexptokcell": {
"prefix": "regexptokcell",
"body": "${1:[toks, strtail, strhead] = }regexptokcell(${2:acell}, ${3:mystr})$0",
"description": "function [toks, strtail, strhead] = regexptokcell(acell, mystr)" 
},
"regexptokrem": {
"prefix": "regexptokrem",
"body": "${1:[strcell, tokBlockid, remBlockid, tokremid] = }regexptokrem(${2:str}, ${3:patterntok})$0",
"description": "function [strcell, tokBlockid, remBlockid, tokremid] = regexptokrem(str, patterntok)" 
},
"regexptokrem_demo": {
"prefix": "regexptokrem_demo",
"body": "regexptokrem_demo$0",
"description": "regexptokrem_demo" 
},
"rsplit": {
"prefix": "rsplit",
"body": "${1:l = }rsplit(${2:r}, ${3:s})$0",
"description": "function l = rsplit(r,s)" 
},
"str2strs": {
"prefix": "str2strs",
"body": "${1:y = }str2strs(${2:s})$0",
"description": "function y=str2strs(s)" 
},
"strcatrobust_d": {
"prefix": "strcatrobust_d",
"body": "${1:B = }strcatrobust_d(${2:varargin})$0",
"description": "function B = strcatrobust_d(varargin)" 
},
"strpercentage2num": {
"prefix": "strpercentage2num",
"body": "${1:b = }strpercentage2num(${2:astrorg})$0",
"description": "function b = strpercentage2num(astrorg)" 
},
"strrepcellbyelement": {
"prefix": "strrepcellbyelement",
"body": "${1:A = }strrepcellbyelement(${2:A}, ${3:yx})$0",
"description": "function A = strrepcellbyelement(A, yx)" 
},
"strsplit_V1": {
"prefix": "strsplit_V1",
"body": "${1:l = }strsplit(${2:s}, ${3:r})$0",
"description": "function l = strsplit(s,r)" 
},
"strsplitNameNum": {
"prefix": "strsplitNameNum",
"body": "${1:[strStr, strNum] = }strsplitNameNum(${2:str})$0",
"description": "function [strStr, strNum] = strsplitNameNum(str)" 
},
"strsplitUnique": {
"prefix": "strsplitUnique",
"body": "${1:[varsC, strvarsNew] = }strsplitUnique(${2:strvars}, ${3:aDelim}, ${4:varargin})$0",
"description": "function [varsC, strvarsNew] = strsplitUnique(strvars, aDelim, varargin)" 
},
"strsplitdigital": {
"prefix": "strsplitdigital",
"body": "${1:[strsplited, varargout] = }strsplitdigital(${2:strans}, ${3:varargin})$0",
"description": "function [strsplited, varargout]= strsplitdigital(strans, varargin)" 
},
"strsplitfixed": {
"prefix": "strsplitfixed",
"body": "${1:cellsplited = }strsplitfixed(${2:str}, ${3:terms})$0",
"description": "function cellsplited = strsplitfixed(str, terms)" 
},
"strsplitfixed_demo": {
"prefix": "strsplitfixed_demo",
"body": "strsplitfixed_demo$0",
"description": "strsplitfixed_demo" 
},
"strsplitlrw": {
"prefix": "strsplitlrw",
"body": "${1:l = }strsplitlrw(${2:s}, ${3:r})$0",
"description": "function l = strsplit(s,r)" 
},
"texTable_demo": {
"prefix": "texTable_demo",
"body": "texTable_demo$0",
"description": "function texTable_demo" 
},
"datastructure": {
"prefix": "datastructure",
"body": "${1:fieldstring = }datastructure(${2:structvar}, ${3:substructvar}, ${4:filename})$0",
"description": "function fieldstring=datastructure(structvar, substructvar, filename)" 
},
"foreachField": {
"prefix": "foreachField",
"body": "${1:y = }foreachField(${2:fn}, ${3:struct})$0",
"description": "function y = foreachField(fn,struct)" 
},
"rnfield": {
"prefix": "rnfield",
"body": "${1:t = }rnfield(${2:s}, ${3:f1}, ${4:f2})$0",
"description": "function t = rnfield(s,f1,f2)" 
},
"saveJSONfile": {
"prefix": "saveJSONfile",
"body": "saveJSONfile(${2:data}, ${3:jsonFileName})$0",
"description": "function saveJSONfile(data, jsonFileName)" 
},
"showstruct": {
"prefix": "showstruct",
"body": "showstruct(${2:Xname}, ${3:nameschild})$0",
"description": "function showstruct(Xname, nameschild)" 
},
"struct2vars": {
"prefix": "struct2vars",
"body": "struct2vars(${2:S}, ${3:namesfield}, ${4:namesnew})$0",
"description": "function struct2vars(S, namesfield, namesnew)" 
},
"structstruct": {
"prefix": "structstruct",
"body": "structstruct(${2:S})$0",
"description": "function structstruct(S)" 
},
"vars2struct": {
"prefix": "vars2struct",
"body": "${1:S = }vars2struct(${2:varargin})$0",
"description": "function S = vars2struct(varargin)" 
},
"nestedSortStruct": {
"prefix": "nestedSortStruct",
"body": "${1:sortedStruct index = }nestedSortStruct(${2:aStruct}, ${3:fieldNamesCell}, ${4:directions})$0",
"description": "function [sortedStruct index] = nestedSortStruct(aStruct, fieldNamesCell, directions)" 
},
"nestedSortStruct2": {
"prefix": "nestedSortStruct2",
"body": "${1:sortedStruct index = }nestedSortStruct2(${2:aStruct}, ${3:fieldNamesCell}, ${4:directions}, ${5:classFields})$0",
"description": "function [sortedStruct index] = nestedSortStruct2(aStruct, fieldNamesCell, directions, classFields)" 
},
"sortStruct": {
"prefix": "sortStruct",
"body": "${1:sortedStruct index = }sortStruct(${2:aStruct}, ${3:fieldName}, ${4:direction})$0",
"description": "function [sortedStruct index] = sortStruct(aStruct, fieldName, direction)" 
},
"sortStruct2": {
"prefix": "sortStruct2",
"body": "${1:sortedStruct index = }sortStruct2(${2:aStruct}, ${3:fieldName}, ${4:direction}, ${5:check})$0",
"description": "function [sortedStruct index] = sortStruct2(aStruct, fieldName, direction, check)" 
},
"each_V1": {
"prefix": "each_V1",
"body": "${1:out = }each(${2:A})$0",
"description": "function out = each(A)" 
},
"eachColumn_V1": {
"prefix": "eachColumn_V1",
"body": "${1:IO = }eachColumn(${2:A})$0",
"description": "function IO = eachColumn(A)" 
},
"eachCombination_V1": {
"prefix": "eachCombination_V1",
"body": "${1:out = }eachCombination(${2:varargin})$0",
"description": "function out = eachCombination(varargin)" 
},
"eachPermutation_V1": {
"prefix": "eachPermutation_V1",
"body": "${1:out = }eachPermutation(${2:v}, ${3:mode})$0",
"description": "function out = eachPermutation(v,mode)" 
},
"eachRow_V1": {
"prefix": "eachRow_V1",
"body": "${1:IO = }eachRow(${2:A})$0",
"description": "function IO = eachRow(A)" 
},
"eachSlice_V1": {
"prefix": "eachSlice_V1",
"body": "${1:IO = }eachSlice(${2:A}, ${3:workdim})$0",
"description": "function IO = eachSlice(A,workdim)" 
},
"eachTuple_V1": {
"prefix": "eachTuple_V1",
"body": "${1:out = }eachTuple(${2:varargin})$0",
"description": "function out = eachTuple(varargin)" 
},
"AllPermutationIterator": {
"prefix": "AllPermutationIterator",
"body": "${1:obj = }AllPermutationIterator(${2:vect})$0",
"description": "function obj = AllPermutationIterator(vect)" 
},
"ArrayIterator": {
"prefix": "ArrayIterator",
"body": "${1:obj = }ArrayIterator(${2:A})$0",
"description": "function obj = ArrayIterator(A)" 
},
"ArraySliceIterator": {
"prefix": "ArraySliceIterator",
"body": "${1:IO = }ArraySliceIterator(${2:A}, ${3:workdim})$0",
"description": "function IO = ArraySliceIterator(A,workdim)" 
},
"CellIterator": {
"prefix": "CellIterator",
"body": "${1:obj = }CellIterator(${2:C})$0",
"description": "function obj = CellIterator(C)" 
},
"CombinationIterator": {
"prefix": "CombinationIterator",
"body": "${1:obj = }CombinationIterator(${2:varargin})$0",
"description": "function obj = CombinationIterator(varargin)" 
},
"Iterable_V1": {
"prefix": "Iterable_V1",
"body": "${1:varargout = }Iterable(${2:obj})$0",
"description": "function [varargout] = size(obj)" 
},
"MaxIterations": {
"prefix": "MaxIterations",
"body": "${1:mi = }MaxIterations$0",
"description": "function mi = MaxIterations()" 
},
"PermutationIterator": {
"prefix": "PermutationIterator",
"body": "${1:perm = }PermutationIterator(${2:obj}, ${3:k})$0",
"description": "function perm = GetKthPerm(obj,k)" 
},
"TupleIterator": {
"prefix": "TupleIterator",
"body": "${1:obj = }TupleIterator(${2:varargin})$0",
"description": "function obj = TupleIterator(varargin)" 
},
"UniquePermutationIterator": {
"prefix": "UniquePermutationIterator",
"body": "${1:obj = }UniquePermutationIterator(${2:vect})$0",
"description": "function obj = UniquePermutationIterator(vect)" 
},
"getIterator": {
"prefix": "getIterator",
"body": "${1:it = }getIterator(${2:obj})$0",
"description": "function it = getIterator(obj)" 
},
"getNextPerm": {
"prefix": "getNextPerm",
"body": "${1:idx = }getNextPerm(${2:idx})$0",
"description": "function idx = getNextPerm(idx)" 
},
"Iterable_V2": {
"prefix": "Iterable_V2",
"body": "Iterable(${2:testcase})$0",
"description": "function negativeTest(testcase)" 
},
"all": {
"prefix": "all",
"body": "all$0",
"description": "all" 
},
"each_V2": {
"prefix": "each_V2",
"body": "each(${2:testcase})$0",
"description": "function eachVector(testcase)" 
},
"eachColumn_V2": {
"prefix": "eachColumn_V2",
"body": "eachColumn(${2:testcase})$0",
"description": "function numberOfIterations(testcase)" 
},
"eachCombination_V2": {
"prefix": "eachCombination_V2",
"body": "eachCombination(${2:testcase})$0",
"description": "function doubleIteration(testcase)" 
},
"eachPermutation_V2": {
"prefix": "eachPermutation_V2",
"body": "eachPermutation(${2:testcase})$0",
"description": "function inputArgs(testcase)" 
},
"eachRow_V2": {
"prefix": "eachRow_V2",
"body": "eachRow(${2:testcase})$0",
"description": "function numberOfIterations(testcase)" 
},
"eachSlice_V2": {
"prefix": "eachSlice_V2",
"body": "eachSlice(${2:testcase})$0",
"description": "function numberOfIterations(testcase)" 
},
"eachTuple_V2": {
"prefix": "eachTuple_V2",
"body": "eachTuple(${2:testcase})$0",
"description": "function SameTypes(testcase)" 
},
"BadIndexing": {
"prefix": "BadIndexing",
"body": "${1:out = }BadIndexing$0",
"description": "function [out] = subsref(~,varargin)" 
},
"NumberOfIterationsHelper": {
"prefix": "NumberOfIterationsHelper",
"body": "${1:obj = }NumberOfIterationsHelper(${2:Array})$0",
"description": "function obj = NumberOfIterationsHelper(Array)" 
},
"each_V3": {
"prefix": "each_V3",
"body": "${1:out = }each(${2:C})$0",
"description": "function out = each(C)" 
},
"v2struct": {
"prefix": "v2struct",
"body": "${1:varargout = }v2struct(${2:varargin})$0",
"description": "function varargout = v2struct(varargin)" 
},
"v2structDemo1": {
"prefix": "v2structDemo1",
"body": "v2structDemo1$0",
"description": "function [] = v2structDemo1()" 
},
"v2structDemo2": {
"prefix": "v2structDemo2",
"body": "v2structDemo2$0",
"description": "function []=v2structDemo2()" 
},
"sortRowsByColstab": {
"prefix": "sortRowsByColstab",
"body": "${1:cellA = }sortRowsByColstab(${2:cellA}, ${3:cols})$0",
"description": "function cellA = sortRowsByColstab(cellA, cols)" 
},
"sortcolsByheadrowtab": {
"prefix": "sortcolsByheadrowtab",
"body": "${1:cellA = }sortcolsByheadrowtab(${2:cellA}, ${3:cols})$0",
"description": "function cellA = sortcolsByheadrowtab(cellA, cols)" 
},
"tabfun": {
"prefix": "tabfun",
"body": "${1:Z = }tabfun(${2:fn}, ${3:varargin})$0",
"description": "function Z = tabfun(fn, varargin)" 
},
"tabfunallcols": {
"prefix": "tabfunallcols",
"body": "${1:Z = }tabfunallcols(${2:fn}, ${3:varargin})$0",
"description": "function Z = tabfunwithfirstcol(fn, varargin)" 
},
"tabfuncols2": {
"prefix": "tabfuncols2",
"body": "${1:Z = }tabfuncols2(${2:fn}, ${3:tab1}, ${4:tab2}, ${5:colsname1}, ${6:colsname2}, ${7:colsnamenew})$0",
"description": "function Z = tabfuncols2(fn, tab1, tab2, colsname1, colsname2, colsnamenew)" 
},
"adjusttime2excel": {
"prefix": "adjusttime2excel",
"body": "adjusttime2excel$0",
"description": "adjusttime2excel" 
},
"eomdateInterval": {
"prefix": "eomdateInterval",
"body": "${1:Date = }eomdateInterval(${2:Dstart}, ${3:Dend}, ${4:varargin})$0",
"description": "function Date = eomdateInterval(Dstart,Dend,varargin)" 
},
"eomdateKron": {
"prefix": "eomdateKron",
"body": "${1:Date = }eomdateKron(${2:Years}, ${3:Months}, ${4:varargin})$0",
"description": "function Date = eomdateKron(Years,Months,varargin)" 
},
"retimeDatetime": {
"prefix": "retimeDatetime",
"body": "${1:Dtime2 = }retimeDatetime(${2:Dtime}, ${3:varargin})$0",
"description": "function Dtime2 = retimeDatetime(Dtime,varargin)" 
},
"retimeDatetime_demo": {
"prefix": "retimeDatetime_demo",
"body": "retimeDatetime_demo$0",
"description": "retimeDatetime_demo" 
},
"retimeTableMonthlyEom": {
"prefix": "retimeTableMonthlyEom",
"body": "${1:T2 = }retimeTableMonthlyEom(${2:T1}, ${3:timeVariableName})$0",
"description": "function T2 = retimeTableMonthlyEom(T1,timeVariableName)" 
},
"fetchFred": {
"prefix": "fetchFred",
"body": "${1:TA = }fetchFred(${2:series})$0",
"description": "function TA = fetchFred(series)" 
},
"getTableFromWebbrowser": {
"prefix": "getTableFromWebbrowser",
"body": "${1:out_table = }getTableFromWebbrowser(${2:varargin})$0",
"description": "function out_table = getTableFromWebbrowser( varargin)" 
},
"url2table_deomo": {
"prefix": "url2table_deomo",
"body": "url2table_deomo$0",
"description": "url2table_deomo" 
},
"getTableDataScript": {
"prefix": "getTableDataScript",
"body": "getTableDataScript$0",
"description": "getTableDataScript" 
},
"getTableFromWeb": {
"prefix": "getTableFromWeb",
"body": "${1:varargout = }getTableFromWeb(${2:varargin})$0",
"description": "function varargout = getTableFromWeb(varargin)" 
},
"getTableFromWeb_mod": {
"prefix": "getTableFromWeb_mod",
"body": "${1:out_table = }getTableFromWeb_mod(${2:url_string}, ${3:nr_table})$0",
"description": "function out_table = getTableFromWeb_mod(url_string, nr_table)" 
},
"webbot": {
"prefix": "webbot",
"body": "${1:varargout = }webbot(${2:url_name_in}, ${3:varargin})$0",
"description": "function varargout = webbot(url_name_in, varargin)" 
},
"csv2cellv2": {
"prefix": "csv2cellv2",
"body": "${1:res = }csv2cellv2(${2:filename}, ${3:delimiter})$0",
"description": "function res = csv2cell( filename, delimiter )" 
},
"save2word": {
"prefix": "save2word",
"body": "save2word(${2:filespec}, ${3:prnopt})$0",
"description": "function save2word(filespec,prnopt)" 
},
"xls2cellActiveX": {
"prefix": "xls2cellActiveX",
"body": "${1:raw = }xls2cellActiveX(${2:file}, ${3:sheetno})$0",
"description": "function raw = xls2cellActiveX(file, sheetno)" 
},
"xls2mat": {
"prefix": "xls2mat",
"body": "xls2mat(${2:sourcefile__}, ${3:sheetname__}, ${4:destinefile__})$0",
"description": "function xls2mat(sourcefile__, sheetname__,destinefile__)" 
},
"xls2matfile": {
"prefix": "xls2matfile",
"body": "xls2matfile(${2:sourcefile__}, ${3:sheetname__}, ${4:destinefile__}, ${5:rawname})$0",
"description": "function xls2matfile(sourcefile__, sheetname__,destinefile__, rawname)" 
},
"xls2matonly": {
"prefix": "xls2matonly",
"body": "xls2matonly(${2:sourcefile__}, ${3:sheetname__}, ${4:matfile__}, ${5:varList}, ${6:varargin})$0",
"description": "function  xls2matonly(sourcefile__, sheetname__, matfile__, varList, varargin)" 
},
"xls2matonly_d (2)": {
"prefix": "xls2matonly_d (2)",
"body": "xls2matonly_d (2)$0",
"description": "xls2matonly_d (2)" 
},
"xls2matonly_d": {
"prefix": "xls2matonly_d",
"body": "xls2matonly_d$0",
"description": "xls2matonly_d" 
},
"xls2matsub": {
"prefix": "xls2matsub",
"body": "xls2matsub(${2:sourcefile__}, ${3:sheetname__}, ${4:destinefile__}, ${5:subPeriod})$0",
"description": "function xls2matsub(sourcefile__, sheetname__,destinefile__, subPeriod)" 
},
"xlsClean": {
"prefix": "xlsClean",
"body": "xlsClean$0",
"description": "xlsClean" 
},
"xls_check_if_open": {
"prefix": "xls_check_if_open",
"body": "${1:isopen = }xls_check_if_open(${2:xlsfile}, ${3:action})$0",
"description": "function isopen = xls_check_if_open(xlsfile,action)" 
},
"xlsalign": {
"prefix": "xlsalign",
"body": "xlsalign(${2:filename}, ${3:sheetname}, ${4:varargin})$0",
"description": "function xlsalign(filename,sheetname,varargin)" 
},
"xlsborder": {
"prefix": "xlsborder",
"body": "xlsborder(${2:filename}, ${3:sheetname}, ${4:varargin})$0",
"description": "function xlsborder(filename,sheetname,varargin)" 
},
"xlscol": {
"prefix": "xlscol",
"body": "${1:b = }xlscol(${2:a})$0",
"description": "function b = xlscol(a)" 
},
"xlscomment": {
"prefix": "xlscomment",
"body": "xlscomment(${2:filename}, ${3:sheetname}, ${4:cell}, ${5:comment}, ${6:visible})$0",
"description": "function xlscomment(filename,sheetname,cell,comment,visible)" 
},
"xlsfont": {
"prefix": "xlsfont",
"body": "xlsfont(${2:filename}, ${3:sheetname}, ${4:varargin})$0",
"description": "function xlsfont(filename,sheetname,varargin)" 
},
"xlsr": {
"prefix": "xlsr",
"body": "${1:raw = }xlsr(${2:file}, ${3:sheet})$0",
"description": "function raw = xlsr(file, sheet)" 
},
"xlsread1": {
"prefix": "xlsread1",
"body": "${1:[data, text, rawData, customOutput] = }xlsread1(${2:file}, ${3:sheet}, ${4:range}, ${5:mode}, ${6:customFun})$0",
"description": "function [data, text, rawData, customOutput]=xlsread1(file,sheet,range,mode,customFun)" 
},
"xlsread_d": {
"prefix": "xlsread_d",
"body": "xlsread_d$0",
"description": "xlsread_d" 
},
"xlsread_matfile": {
"prefix": "xlsread_matfile",
"body": "${1:[num, txt, C] = }xlsread_matfile(${2:fxls}, ${3:sheet}, ${4:varargin})$0",
"description": "function [num,txt,C] = xlsread_matfile(fxls,sheet,varargin)" 
},
"xlsreadrange": {
"prefix": "xlsreadrange",
"body": "${1:num txt raw = }xlsreadrange(${2:file}, ${3:sheet}, ${4:range}, ${5:headname})$0",
"description": "function [num txt raw] = xlsreadrange(file, sheet, range, headname)" 
},
"xlswordart": {
"prefix": "xlswordart",
"body": "xlswordart(${2:filename}, ${3:sheetname}, ${4:Effect}, ${5:Text}, ${6:Size}, ${7:Font}, ${8:Bold}, ${9:Italic}, ${10:Left}, ${11:Top})$0",
"description": "function xlswordart(filename,sheetname,Effect,Text,Size,Font,Bold,Italic,Left,Top);" 
},
"xlswrite1": {
"prefix": "xlswrite1",
"body": "xlswrite1(${2:file}, ${3:data}, ${4:sheet}, ${5:range})$0",
"description": "function xlswrite1(file,data,sheet,range)" 
},
"xlswrite2007": {
"prefix": "xlswrite2007",
"body": "${1:[success, message] = }xlswrite2007(${2:file}, ${3:data}, ${4:sheet}, ${5:range})$0",
"description": "function [success,message]=xlswrite2007(file,data,sheet,range)" 
},
"xlswriteActiveX": {
"prefix": "xlswriteActiveX",
"body": "${1:raw = }xlswriteActiveX(${2:file}, ${3:data}, ${4:sheet}, ${5:range})$0",
"description": "function raw = xlswriteActiveX(file,data,sheet,range)" 
},
"xlswriteFast": {
"prefix": "xlswriteFast",
"body": "${1:[success, message] = }xlswriteFast(${2:file}, ${3:data}, ${4:sheet}, ${5:range})$0",
"description": "function [success,message]=xlswrite(file,data,sheet,range)" 
},
"xlswritekey": {
"prefix": "xlswritekey",
"body": "xlswritekey(${2:key}, ${3:raw})$0",
"description": "function xlswritekey(key, raw)" 
},
"xlsx2csv": {
"prefix": "xlsx2csv",
"body": "xlsx2csv(${2:pathxlsx}, ${3:varargin})$0",
"description": "function xlsx2csv(pathxlsx, varargin)" 
},
"xlsx2csv_d": {
"prefix": "xlsx2csv_d",
"body": "xlsx2csv_d$0",
"description": "xlsx2csv_d" 
},
"xlsx2csv_web": {
"prefix": "xlsx2csv_web",
"body": "${1:counts = }xlsx2csv_web(${2:path})$0",
"description": "function [counts] = xlsx2csv_web(path)" 
},
"xlsx2csvlrw": {
"prefix": "xlsx2csvlrw",
"body": "xlsx2csvlrw(${2:path}, ${3:varargin})$0",
"description": "function xlsx2csv(path,varargin)" 
},
"xlsx2matfile": {
"prefix": "xlsx2matfile",
"body": "xlsx2matfile(${2:pathxlsx}, ${3:pathmat})$0",
"description": "function xlsx2matfile(pathxlsx, pathmat)" 
},
"xlsx2matfile_d": {
"prefix": "xlsx2matfile_d",
"body": "xlsx2matfile_d$0",
"description": "xlsx2matfile_d" 
},
"mat2exl": {
"prefix": "mat2exl",
"body": "mat2exl(${2:code})$0",
"description": "function mat2exl (code)" 
},
"mat2txt_V2": {
"prefix": "mat2txt_V2",
"body": "mat2txt(${2:type})$0",
"description": "function mat2txt(type)" 
},
"IRFfigdata2cell": {
"prefix": "IRFfigdata2cell",
"body": "${1:datacell = }IRFfigdata2cell(${2:datacells}, ${3:dataName})$0",
"description": "function datacell = IRFfigdata2cell(datacells, dataName)" 
},
"cell2txt": {
"prefix": "cell2txt",
"body": "cell2txt(${2:Acell}, ${3:file})$0",
"description": "function cell2txt(Acell,file)" 
},
"dsgelrw2dynare": {
"prefix": "dsgelrw2dynare",
"body": "dsgelrw2dynare(${2:file}, ${3:vtt}, ${4:vextt}, ${5:paraeq}, ${6:foc}, ${7:vsseq}, ${8:shockdefcell})$0",
"description": "function dsgelrw2dynare(file, vtt, vextt, paraeq, foc, vsseq, shockdefcell)" 
},
"dsgelrw2dynarewithMapleSS": {
"prefix": "dsgelrw2dynarewithMapleSS",
"body": "dsgelrw2dynarewithMapleSS(${2:file}, ${3:vtt}, ${4:vextt}, ${5:paraeq}, ${6:foc}, ${7:vsseqMaple}, ${8:shockdefcell})$0",
"description": "function dsgelrw2dynarewithMapleSS(file, vtt, vextt, paraeq, foc, vsseqMaple, shockdefcell)" 
},
"findssvalue": {
"prefix": "findssvalue",
"body": "${1:vssvalue = }findssvalue(${2:vss}, ${3:varsseqvalue})$0",
"description": "function vssvalue = findssvalue(vss, varsseqvalue)" 
},
"getTightSubplotHandlesDSGE": {
"prefix": "getTightSubplotHandlesDSGE",
"body": "getTightSubplotHandlesDSGE$0",
"description": "getTightSubplotHandlesDSGE" 
},
"getdynareSteadyState_SingleReform": {
"prefix": "getdynareSteadyState_SingleReform",
"body": "${1:TssPoolTranspose = }getdynareSteadyState_SingleReform(${2:fs}, ${3:reformType}, ${4:reformStrength})$0",
"description": "function TssPoolTranspose = getdynareSteadyState_SingleReform(fs,reformType,reformStrength)" 
},
"getdynareirf": {
"prefix": "getdynareirf",
"body": "${1:data = }getdynareirf(${2:mat_name}, ${3:var_name}, ${4:irf_name})$0",
"description": "function data = getdynareirf(mat_name,var_name,irf_name)" 
},
"getdynareirf_all": {
"prefix": "getdynareirf_all",
"body": "${1:dataT = }getdynareirf_all(${2:mat_name})$0",
"description": "function dataT = getdynareirf_all(mat_name)" 
},
"getdynareirf_multiResult": {
"prefix": "getdynareirf_multiResult",
"body": "${1:Tpool = }getdynareirf_multiResult(${2:fs})$0",
"description": "function Tpool = getdynareirf_multiResult(fs)" 
},
"getssvalues": {
"prefix": "getssvalues",
"body": "${1:[varsseqvalue, focvalue] = }getssvalues(${2:paraeq}, ${3:vex}, ${4:strssexp}, ${5:focsym}, ${6:vareq})$0",
"description": "function [varsseqvalue, focvalue] = getssvalues(paraeq,vex, strssexp,focsym, vareq)" 
},
"idsub": {
"prefix": "idsub",
"body": "${1:iSubSeq = }idsub(${2:Seq}, ${3:SubSeq})$0",
"description": "function iSubSeq = idsub(Seq, SubSeq)" 
},
"idsubset": {
"prefix": "idsubset",
"body": "${1:iSubSeq index = }idsubset(${2:Seq}, ${3:SubSeq})$0",
"description": "function [iSubSeq index]= idsubset(Seq, SubSeq)" 
},
"mergeeq": {
"prefix": "mergeeq",
"body": "${1:eqC = }mergeeq(${2:eqcellA}, ${3:eqcellB})$0",
"description": "function eqC = mergeeq(eqcellA, eqcellB)" 
},
"setupSSequationMaple": {
"prefix": "setupSSequationMaple",
"body": "${1:strssexp = }setupSSequationMaple(${2:xnames}, ${3:xsnopt}, ${4:file1varMaple}, ${5:fileSSmatlab})$0",
"description": "function strssexp  = setupSSequationMaple(xnames,xsnopt,file1varMaple,fileSSmatlab)" 
},
"setupSSfn1var": {
"prefix": "setupSSfn1var",
"body": "setupSSfn1var(${2:vex}, ${3:paracalibrationstr}, ${4:file1varMaple}, ${5:file})$0",
"description": "function setupSSfn1var(vex,paracalibrationstr,file1varMaple,file)" 
},
"setupSteadyStatefnSubvSNOPT": {
"prefix": "setupSteadyStatefnSubvSNOPT",
"body": "setupSteadyStatefnSubvSNOPT(${2:eqsym}, ${3:xeq}, ${4:xsubeq}, ${5:vex}, ${6:paracalibrationstr}, ${7:file})$0",
"description": "function setupSteadyStatefnSubvSNOPT(eqsym,xeq,xsubeq,vex,paracalibrationstr,file)" 
},
"txt2cellline": {
"prefix": "txt2cellline",
"body": "${1:Acell = }txt2cellline(${2:f1})$0",
"description": "function Acell = txt2cellline(f1)" 
},
"cell02mysqltab": {
"prefix": "cell02mysqltab",
"body": "cell02mysqltab(${2:cellorg}, ${3:dbase}, ${4:tabname})$0",
"description": "function cell02mysqltab(cellorg, dbase, tabname)" 
},
"cell2mysqltabHK": {
"prefix": "cell2mysqltabHK",
"body": "cell2mysqltabHK(${2:cellA}, ${3:dbase}, ${4:tabname})$0",
"description": "function cell2mysqltabHK(cellA, dbase, tabname)" 
},
"cell2mysqltable": {
"prefix": "cell2mysqltable",
"body": "cell2mysqltable(${2:cellA}, ${3:nametab})$0",
"description": "function cell2mysqltable(cellA, nametab)" 
},
"cell2mysqltable0": {
"prefix": "cell2mysqltable0",
"body": "cell2mysqltable0(${2:cellA}, ${3:dbase}, ${4:tabname})$0",
"description": "function cell2mysqltable0(cellA, dbase, tabname)" 
},
"cell2mysqltablefast": {
"prefix": "cell2mysqltablefast",
"body": "cell2mysqltablefast(${2:cellA}, ${3:nametab})$0",
"description": "function cell2mysqltablefast(cellA, nametab)" 
},
"cell2mysqltablefast_adj": {
"prefix": "cell2mysqltablefast_adj",
"body": "${1:cellA types = }cell2mysqltablefast_adj(${2:cellA})$0",
"description": "function [cellA types] = cell2mysqltablefast_adj(cellA)" 
},
"cell2mysqltablefast_adj_d": {
"prefix": "cell2mysqltablefast_adj_d",
"body": "cell2mysqltablefast_adj_d$0",
"description": "cell2mysqltablefast_adj_d" 
},
"cellorg2mysqltab": {
"prefix": "cellorg2mysqltab",
"body": "cellorg2mysqltab(${2:cellorg}, ${3:dbase}, ${4:tabname})$0",
"description": "function cellorg2mysqltab(cellorg, dbase, tabname)" 
},
"csv2mysql": {
"prefix": "csv2mysql",
"body": "csv2mysql(${2:file1}, ${3:file2}, ${4:nameTab})$0",
"description": "function csv2mysql(file1, file2, nameTab)" 
},
"csv2mysql_d": {
"prefix": "csv2mysql_d",
"body": "csv2mysql_d$0",
"description": "csv2mysql_d" 
},
"csv2mysql_d2": {
"prefix": "csv2mysql_d2",
"body": "csv2mysql_d2$0",
"description": "csv2mysql_d2" 
},
"csv2mysql_mysqlsource_d": {
"prefix": "csv2mysql_mysqlsource_d",
"body": "csv2mysql_mysqlsource_d$0",
"description": "csv2mysql_mysqlsource_d" 
},
"csv2mysqleasy": {
"prefix": "csv2mysqleasy",
"body": "csv2mysqleasy(${2:filecsv}, ${3:filesql}, ${4:nameTab})$0",
"description": "function csv2mysqleasy(filecsv, filesql, nameTab)" 
},
"csv2mysqltab (2)": {
"prefix": "csv2mysqltab (2)",
"body": "csv2mysqltab (2)(${2:filecsv}, ${3:filesql}, ${4:dbase}, ${5:tabname})$0",
"description": "function csv2mysqltab(filecsv,filesql,dbase,tabname)" 
},
"csv2mysqltab": {
"prefix": "csv2mysqltab",
"body": "csv2mysqltab(${2:filecsv}, ${3:dbase}, ${4:tabname})$0",
"description": "function csv2mysqltab0(filecsv,dbase,tabname)" 
},
"csv2mysqltab0": {
"prefix": "csv2mysqltab0",
"body": "csv2mysqltab0(${2:filecsv}, ${3:dbase}, ${4:tabname})$0",
"description": "function csv2mysqltab0(filecsv,dbase,tabname)" 
},
"csv2mysqltab_old": {
"prefix": "csv2mysqltab_old",
"body": "csv2mysqltab_old(${2:file1}, ${3:file2}, ${4:nameTab})$0",
"description": "function csv2mysqltab(file1, file2, nameTab)" 
},
"dbaddlrw": {
"prefix": "dbaddlrw",
"body": "dbaddlrw(${2:dbname})$0",
"description": "function dbaddlrw(dbname)" 
},
"dbopenlrw": {
"prefix": "dbopenlrw",
"body": "dbopenlrw(${2:name})$0",
"description": "function dbopenlrw(name)" 
},
"insertHead": {
"prefix": "insertHead",
"body": "${1:cmds = }insertHead(${2:nameTab}, ${3:head}, ${4:types}, ${5:strlength})$0",
"description": "function cmds = insertHead(nameTab, head, types, strlength)" 
},
"insertHeadeasy": {
"prefix": "insertHeadeasy",
"body": "${1:cmds = }insertHeadeasy(${2:nameTab}, ${3:head}, ${4:types}, ${5:strlength})$0",
"description": "function cmds = insertHeadeasy(nameTab, head, types, strlength)" 
},
"insertRecord": {
"prefix": "insertRecord",
"body": "${1:cmds = }insertRecord(${2:nameTab}, ${3:record}, ${4:types})$0",
"description": "function cmds = insertRecord(nameTab, record, types)" 
},
"insertRecordeasy": {
"prefix": "insertRecordeasy",
"body": "${1:cmds = }insertRecordeasy(${2:nameTab}, ${3:bodynum}, ${4:bodystr}, ${5:types})$0",
"description": "function cmds = insertRecordeasy(nameTab, bodynum, bodystr,types)" 
},
"mat2mysqltab": {
"prefix": "mat2mysqltab",
"body": "mat2mysqltab(${2:A}, ${3:varargin})$0",
"description": "function mat2mysqltab(A, varargin)" 
},
"mysqlsource": {
"prefix": "mysqlsource",
"body": "mysqlsource(${2:file})$0",
"description": "function mysqlsource(file)" 
},
"mysqltab2cell": {
"prefix": "mysqltab2cell",
"body": "${1:cellres = }mysqltab2cell(${2:varargin})$0",
"description": "function cellres =  mysqltab2cell(varargin)" 
},
"mysqltab2cellorg": {
"prefix": "mysqltab2cellorg",
"body": "${1:cellorg = }mysqltab2cellorg(${2:varargin})$0",
"description": "function cellorg = mysqltab2cellorg(varargin)" 
},
"mysqltab2mat": {
"prefix": "mysqltab2mat",
"body": "${1:matres = }mysqltab2mat(${2:varargin})$0",
"description": "function matres =  mysqltab2mat(varargin)" 
},
"num2mysqltab": {
"prefix": "num2mysqltab",
"body": "num2mysqltab(${2:A}, ${3:varargin})$0",
"description": "function num2mysqltab(A, varargin)" 
},
"idtril": {
"prefix": "idtril",
"body": "${1:ids = }idtril(${2:M}, ${3:k})$0",
"description": "function ids = idtril(M,k)" 
},
"idtriu": {
"prefix": "idtriu",
"body": "${1:ids = }idtriu(${2:M}, ${3:k})$0",
"description": "function ids = idtriu(M,k)" 
},
"triuget": {
"prefix": "triuget",
"body": "${1:a = }triuget(${2:A}, ${3:varargin})$0",
"description": "function a = triuget(A,varargin)" 
},
"DiagM": {
"prefix": "DiagM",
"body": "${1:M = }DiagM(${2:n})$0",
"description": "function M = DiagM(n)" 
},
"DuplicationM": {
"prefix": "DuplicationM",
"body": "${1:M = }DuplicationM(${2:n}, ${3:option})$0",
"description": "function M = DuplicationM(n, option)" 
},
"EliminationM": {
"prefix": "EliminationM",
"body": "${1:M = }EliminationM(${2:n}, ${3:varargin})$0",
"description": "function M = EliminationM(n, varargin)" 
},
"diagonal01": {
"prefix": "diagonal01",
"body": "${1:B = }diagonal01(${2:A})$0",
"description": "function B=diagonal01(A)" 
},
"idiag": {
"prefix": "idiag",
"body": "${1:I J = }idiag(${2:sz}, ${3:k})$0",
"description": "function [I J] = idiag(sz, k)" 
},
"itril": {
"prefix": "itril",
"body": "${1:I J = }itril(${2:sz}, ${3:k})$0",
"description": "function [I J] = itril(sz, k)" 
},
"itriu": {
"prefix": "itriu",
"body": "${1:I J = }itriu(${2:sz}, ${3:k})$0",
"description": "function [I J] = itriu(sz, k)" 
},
"mytoeplitz": {
"prefix": "mytoeplitz",
"body": "${1:T = }mytoeplitz(${2:c}, ${3:r})$0",
"description": "function T = mytoeplitz(c, r)" 
},
"testprog": {
"prefix": "testprog",
"body": "testprog$0",
"description": "testprog" 
},
"cubic_value": {
"prefix": "cubic_value",
"body": "${1:[f, d, s, t] = }cubic_value(${2:x})$0",
"description": "function [ f, d, s, t ] = cubic_value ( x )" 
},
"hermite_cubic_spline_value": {
"prefix": "hermite_cubic_spline_value",
"body": "${1:[f, d, s, t] = }hermite_cubic_spline_value(${2:nn}, ${3:xn}, ${4:fn}, ${5:dn}, ${6:n}, ${7:x})$0",
"description": "function [ f, d, s, t ] = hermite_cubic_spline_value ( nn, xn, fn, dn, n, x )" 
},
"hermite_cubic_test01": {
"prefix": "hermite_cubic_test01",
"body": "hermite_cubic_test01$0",
"description": "function hermite_cubic_test01 ( )" 
},
"hermite_cubic_test02": {
"prefix": "hermite_cubic_test02",
"body": "hermite_cubic_test02$0",
"description": "function hermite_cubic_test02 ( )" 
},
"hermite_cubic_test04": {
"prefix": "hermite_cubic_test04",
"body": "hermite_cubic_test04$0",
"description": "function hermite_cubic_test04 ( )" 
},
"hermite_cubic_to_power_cubic": {
"prefix": "hermite_cubic_to_power_cubic",
"body": "${1:[c0, c1, c2, c3] = }hermite_cubic_to_power_cubic(${2:x1}, ${3:f1}, ${4:d1}, ${5:x2}, ${6:f2}, ${7:d2})$0",
"description": "function [ c0, c1, c2, c3 ] = hermite_cubic_to_power_cubic ( x1, f1, d1, x2, f2, d2 )" 
},
"hermite_cubic_value": {
"prefix": "hermite_cubic_value",
"body": "${1:[f, d, s, t] = }hermite_cubic_value(${2:x1}, ${3:f1}, ${4:d1}, ${5:x2}, ${6:f2}, ${7:d2}, ${8:n}, ${9:x})$0",
"description": "function [ f, d, s, t ] = hermite_cubic_value ( x1, f1, d1, x2, f2, d2, n, x )" 
},
"power_cubic_to_hermite_cubic": {
"prefix": "power_cubic_to_hermite_cubic",
"body": "${1:[f1, d1, f2, d2] = }power_cubic_to_hermite_cubic(${2:c0}, ${3:c1}, ${4:c2}, ${5:c3}, ${6:x1}, ${7:x2})$0",
"description": "function [ f1, d1, f2, d2 ] = power_cubic_to_hermite_cubic ( c0, c1, c2, c3, x1, x2 )" 
},
"dctn": {
"prefix": "dctn",
"body": "${1:[y, w] = }dctn(${2:y}, ${3:DIM}, ${4:w})$0",
"description": "function [y,w] = dctn(y,DIM,w)" 
},
"idctn": {
"prefix": "idctn",
"body": "${1:[y, w] = }idctn(${2:y}, ${3:DIM}, ${4:w})$0",
"description": "function [y,w] = idctn(y,DIM,w)" 
},
"smoothn": {
"prefix": "smoothn",
"body": "${1:[z, s, exitflag] = }smoothn(${2:varargin})$0",
"description": "function [z,s,exitflag] = smoothn(varargin)" 
},
"LRW2ExamtxtChoiceMultiRandStreamEN": {
"prefix": "LRW2ExamtxtChoiceMultiRandStreamEN",
"body": "${1:varargout = }LRW2ExamtxtChoiceMultiRandStreamEN(${2:s}, ${3:cellQ}, ${4:varargin})$0",
"description": "function varargout = LRW2ExamtxtChoiceMultiRandStreamEN(s,cellQ, varargin)" 
},
"anydatatype2strlatex": {
"prefix": "anydatatype2strlatex",
"body": "${1:xx_vvv = }anydatatype2strlatex(${2:xx_uuu})$0",
"description": "function xx_vvv = anydatatype2strlatex(xx_uuu)" 
},
"cell2latex": {
"prefix": "cell2latex",
"body": "cell2latex(${2:filename}, ${3:cell_arr}, ${4:with_title}, ${5:with_color})$0",
"description": "function cell2latex(filename,cell_arr,with_title,with_color)" 
},
"cell2latextable": {
"prefix": "cell2latextable",
"body": "${1:strcelllatex = }cell2latextable(${2:X}, ${3:varargin})$0",
"description": "function strcelllatex = cell2latextable(X,varargin)" 
},
"cell2latextable_demo": {
"prefix": "cell2latextable_demo",
"body": "cell2latextable_demo$0",
"description": "cell2latextable_demo" 
},
"dlmcell": {
"prefix": "dlmcell",
"body": "dlmcell(${2:file}, ${3:cell_arr}, ${4:delim}, ${5:perm}, ${6:endline})$0",
"description": "function dlmcell(file,cell_arr,delim,perm,endline)" 
},
"examRepVarnamesEN": {
"prefix": "examRepVarnamesEN",
"body": "${1:examstr = }examRepVarnamesEN(${2:examstr}, ${3:XX})$0",
"description": "function examstr =examRepVarnamesEN(examstr, XX)" 
},
"getQAsLRW2txtRandStreamEN": {
"prefix": "getQAsLRW2txtRandStreamEN",
"body": "${1:QAs = }getQAsLRW2txtRandStreamEN(${2:s}, ${3:E})$0",
"description": "function QAs = getQAsLRW2txtRandStreamEN(s,E)" 
},
"latexAheadEN": {
"prefix": "latexAheadEN",
"body": "${1:Qheads = }latexAheadEN(${2:Qhead1}, ${3:Qhead2})$0",
"description": "function Qheads = latexAheadEN(Qhead1,Qhead2)" 
},
"latexQheadEN": {
"prefix": "latexQheadEN",
"body": "${1:Qheads = }latexQheadEN(${2:Qheads1}, ${3:Qheads2})$0",
"description": "function Qheads = latexQheadEN(Qheads1,Qheads2)" 
},
"latextable_runExamples": {
"prefix": "latextable_runExamples",
"body": "latextable_runExamples$0",
"description": "latextable_runExamples" 
},
"m2tex": {
"prefix": "m2tex",
"body": "${1:out = }m2tex(${2:filein}, ${3:fileout})$0",
"description": "function out=m2tex(filein,fileout)" 
},
"mathlatexReg_demo": {
"prefix": "mathlatexReg_demo",
"body": "mathlatexReg_demo$0",
"description": "mathlatexReg_demo" 
},
"matrix2latexLrw": {
"prefix": "matrix2latexLrw",
"body": "${1:texmy = }matrix2latexLrw(${2:matrix}, ${3:varargin})$0",
"description": "function texmy = matrix2latexLrw(matrix,  varargin)" 
},
"matrix2latexlrwChinese": {
"prefix": "matrix2latexlrwChinese",
"body": "${1:texmy = }matrix2latexlrwChinese(${2:matrix}, ${3:varargin})$0",
"description": "function texmy = matrix2latexlrwChinese(matrix,  varargin)" 
},
"matrix2latexlrwChinese_demo": {
"prefix": "matrix2latexlrwChinese_demo",
"body": "matrix2latexlrwChinese_demo$0",
"description": "matrix2latexlrwChinese_demo" 
},
"pdflatexmatlab": {
"prefix": "pdflatexmatlab",
"body": "${1:[hdos, wdos] = }pdflatexmatlab(${2:flatex}, ${3:varargin})$0",
"description": "function [hdos, wdos] = pdflatexmatlab(flatex, varargin)" 
},
"str2strlatex": {
"prefix": "str2strlatex",
"body": "${1:strlatex = }str2strlatex(${2:strOrg})$0",
"description": "function strlatex = str2strlatex(strOrg)" 
},
"str2strlatex_demo": {
"prefix": "str2strlatex_demo",
"body": "str2strlatex_demo$0",
"description": "str2strlatex_demo" 
},
"strmatlabeval2strlatex": {
"prefix": "strmatlabeval2strlatex",
"body": "${1:xx_strlatex = }strmatlabeval2strlatex(${2:xx_strmatlab})$0",
"description": "function xx_strlatex = strmatlabeval2strlatex(xx_strmatlab)" 
},
"table2latex": {
"prefix": "table2latex",
"body": "table2latex(${2:T}, ${3:filename})$0",
"description": "function table2latex(T, filename)" 
},
"runExamples": {
"prefix": "runExamples",
"body": "runExamples$0",
"description": "runExamples" 
},
"matlabfrag": {
"prefix": "matlabfrag",
"body": "matlabfrag(${2:FileName}, ${3:varargin})$0",
"description": "function matlabfrag(FileName,varargin)" 
},
"mlf2pdf": {
"prefix": "mlf2pdf",
"body": "mlf2pdf(${2:h}, ${3:FileName}, ${4:Packages})$0",
"description": "function mlf2pdf(h,FileName,Packages)" 
},
"mlf2pdf_ex": {
"prefix": "mlf2pdf_ex",
"body": "mlf2pdf_ex$0",
"description": "function mlf2pdf_ex" 
},
"comparison01": {
"prefix": "comparison01",
"body": "comparison01$0",
"description": "comparison01" 
},
"comparison02": {
"prefix": "comparison02",
"body": "comparison02$0",
"description": "comparison02" 
},
"ex01": {
"prefix": "ex01",
"body": "ex01$0",
"description": "ex01" 
},
"ex02": {
"prefix": "ex02",
"body": "ex02$0",
"description": "ex02" 
},
"ex03": {
"prefix": "ex03",
"body": "ex03$0",
"description": "ex03" 
},
"ex04": {
"prefix": "ex04",
"body": "ex04$0",
"description": "ex04" 
},
"ex05": {
"prefix": "ex05",
"body": "ex05$0",
"description": "ex05" 
},
"ex06": {
"prefix": "ex06",
"body": "ex06$0",
"description": "ex06" 
},
"ex07": {
"prefix": "ex07",
"body": "ex07$0",
"description": "ex07" 
},
"ex08": {
"prefix": "ex08",
"body": "ex08$0",
"description": "ex08" 
},
"ex09": {
"prefix": "ex09",
"body": "ex09$0",
"description": "ex09" 
},
"ex10": {
"prefix": "ex10",
"body": "ex10$0",
"description": "ex10" 
},
"ex11": {
"prefix": "ex11",
"body": "ex11$0",
"description": "ex11" 
},
"ex12": {
"prefix": "ex12",
"body": "ex12$0",
"description": "ex12" 
},
"ex13": {
"prefix": "ex13",
"body": "ex13$0",
"description": "ex13" 
},
"ex14": {
"prefix": "ex14",
"body": "ex14$0",
"description": "ex14" 
},
"ex15": {
"prefix": "ex15",
"body": "ex15$0",
"description": "ex15" 
},
"ex16": {
"prefix": "ex16",
"body": "ex16$0",
"description": "ex16" 
},
"ex17": {
"prefix": "ex17",
"body": "ex17$0",
"description": "ex17" 
},
"run_all": {
"prefix": "run_all",
"body": "run_all$0",
"description": "run_all" 
},
"test01": {
"prefix": "test01",
"body": "test01$0",
"description": "test01" 
},
"test02": {
"prefix": "test02",
"body": "test02$0",
"description": "test02" 
},
"test03": {
"prefix": "test03",
"body": "test03$0",
"description": "test03" 
},
"test04": {
"prefix": "test04",
"body": "test04$0",
"description": "test04" 
},
"test05": {
"prefix": "test05",
"body": "test05$0",
"description": "test05" 
},
"test06": {
"prefix": "test06",
"body": "test06$0",
"description": "test06" 
},
"test07": {
"prefix": "test07",
"body": "test07$0",
"description": "test07" 
},
"test08": {
"prefix": "test08",
"body": "test08$0",
"description": "test08" 
},
"test09": {
"prefix": "test09",
"body": "test09$0",
"description": "test09" 
},
"test10": {
"prefix": "test10",
"body": "test10$0",
"description": "test10" 
},
"test11": {
"prefix": "test11",
"body": "test11$0",
"description": "test11" 
},
"test12": {
"prefix": "test12",
"body": "test12$0",
"description": "test12" 
},
"test13": {
"prefix": "test13",
"body": "test13$0",
"description": "test13" 
},
"test14": {
"prefix": "test14",
"body": "test14$0",
"description": "test14" 
},
"test15": {
"prefix": "test15",
"body": "test15$0",
"description": "test15" 
},
"test16": {
"prefix": "test16",
"body": "test16$0",
"description": "test16" 
},
"untexlabel": {
"prefix": "untexlabel",
"body": "${1:newstr = }untexlabel(${2:str})$0",
"description": "function newstr = untexlabel(str)" 
},
"autocorr": {
"prefix": "autocorr",
"body": "${1:Rho = }autocorr(${2:data}, ${3:order})$0",
"description": "function Rho = autocorr(data,order)" 
},
"covcorr": {
"prefix": "covcorr",
"body": "${1:out = }covcorr(${2:data})$0",
"description": "function out = covcorr(data)" 
},
"desc": {
"prefix": "desc",
"body": "${1:results = }desc(${2:X})$0",
"description": "function results = desc(X)" 
},
"efffront": {
"prefix": "efffront",
"body": "${1:[out, wts, g, h, tanstats] = }efffront(${2:mu}, ${3:Sig}, ${4:rf}, ${5:names}, ${6:plotdum})$0",
"description": "function [out, wts, g, h, tanstats]=efffront(mu,Sig,rf,names,plotdum)" 
},
"hj": {
"prefix": "hj",
"body": "${1:[mlop, mna, output] = }hj(${2:R}, ${3:mbar}, ${4:d}, ${5:nadum}, ${6:plotdum}, ${7:nlags})$0",
"description": "function [mlop,mna,output]=hj(R,mbar,d,nadum,plotdum,nlags)" 
},
"hjm": {
"prefix": "hjm",
"body": "${1:[m, e] = }hjm(${2:b}, ${3:infoz}, ${4:stat}, ${5:y}, ${6:x}, ${7:z}, ${8:w})$0",
"description": "function [m,e] = hjm(b,infoz,stat,y,x,z,w)" 
},
"hjshift": {
"prefix": "hjshift",
"body": "${1:[gmmout, dist, m1, m2] = }hjshift(${2:R1}, ${3:R2}, ${4:mu}, ${5:nadum}, ${6:fid})$0",
"description": "function [gmmout,dist,m1,m2]=hjshift(R1,R2,mu,nadum,fid)" 
},
"hjshiftm": {
"prefix": "hjshiftm",
"body": "${1:[m, e] = }hjshiftm(${2:b}, ${3:infoz}, ${4:stat}, ${5:y}, ${6:x}, ${7:z}, ${8:w})$0",
"description": "function [m,e] = hjshiftm(b,infoz,stat,y,x,z,w)" 
},
"kzspan": {
"prefix": "kzspan",
"body": "${1:out = }kzspan(${2:R1}, ${3:R2}, ${4:mu}, ${5:nlags}, ${6:fid})$0",
"description": "function out=kzspan(R1,R2,mu,nlags,fid)" 
},
"makelags": {
"prefix": "makelags",
"body": "${1:Y = }makelags(${2:X}, ${3:a}, ${4:b}, ${5:hush})$0",
"description": "function Y=makelags(X,a,b,hush)" 
},
"mcov": {
"prefix": "mcov",
"body": "${1:xuux = }mcov(${2:x}, ${3:u})$0",
"description": "function xuux = mcov(x,u)" 
},
"nwse": {
"prefix": "nwse",
"body": "${1:[V, S] = }nwse(${2:e}, ${3:X}, ${4:nlags})$0",
"description": "function [V,S]=nwse(e,X,nlags)" 
},
"prt_corr": {
"prefix": "prt_corr",
"body": "${1:out = }prt_corr(${2:in}, ${3:info})$0",
"description": "function out = prt_corr(in,info)" 
},
"prt_desc": {
"prefix": "prt_desc",
"body": "${1:[out1, out2] = }prt_desc(${2:results}, ${3:type}, ${4:vnames}, ${5:fid})$0",
"description": "function [out1, out2] = prt_desc(results,type,vnames,fid)" 
},
"andmon": {
"prefix": "andmon",
"body": "${1:[band, uout, D, eflag] = }andmon(${2:gmmopt}, ${3:e}, ${4:M}, ${5:Z})$0",
"description": "function [band,uout,D,eflag] = andmon(gmmopt,e,M,Z)" 
},
"arma": {
"prefix": "arma",
"body": "${1:result = }arma(${2:y}, ${3:arp}, ${4:maq}, ${5:cflag}, ${6:maxit})$0",
"description": "function result = arma(y,arp,maq,cflag,maxit)" 
},
"diagw": {
"prefix": "diagw",
"body": "diagw(${2:W}, ${3:iter})$0",
"description": "function diagw(W,iter)" 
},
"gmm": {
"prefix": "gmm",
"body": "${1:[gmmout, gmmopt] = }gmm(${2:b}, ${3:gmmopt}, ${4:Y}, ${5:X}, ${6:Z}, ${7:Win})$0",
"description": "function [gmmout, gmmopt]=gmm(b,gmmopt,Y,X,Z,Win)" 
},
"gmmS": {
"prefix": "gmmS",
"body": "${1:[S, eflag, gmmopt] = }gmmS(${2:b}, ${3:gmmopt}, ${4:Y}, ${5:X}, ${6:Z})$0",
"description": "function [S,eflag,gmmopt] = gmmS(b,gmmopt,Y,X,Z)" 
},
"lingmmh": {
"prefix": "lingmmh",
"body": "${1:stat = }lingmmh(${2:b}, ${3:infoz}, ${4:stat}, ${5:y}, ${6:x}, ${7:z}, ${8:w})$0",
"description": "function stat = lingmmh(b,infoz,stat,y,x,z,w)" 
},
"lingmmj": {
"prefix": "lingmmj",
"body": "${1:M = }lingmmj(${2:b}, ${3:infoz}, ${4:stat}, ${5:y}, ${6:x}, ${7:z})$0",
"description": "function M = lingmmj(b,infoz,stat,y,x,z)" 
},
"lingmmm": {
"prefix": "lingmmm",
"body": "${1:[m, e] = }lingmmm(${2:b}, ${3:infoz}, ${4:stat}, ${5:y}, ${6:x}, ${7:z})$0",
"description": "function [m,e] = lingmmm(b,infoz,stat,y,x,z)" 
},
"msdj": {
"prefix": "msdj",
"body": "${1:[M, e] = }msdj(${2:b}, ${3:infoz}, ${4:stat}, ${5:y}, ${6:x}, ${7:z}, ${8:w})$0",
"description": "function [M,e] = msdj(b,infoz,stat,y,x,z,w)" 
},
"msdm": {
"prefix": "msdm",
"body": "${1:[m, e] = }msdm(${2:b}, ${3:infoz}, ${4:stat}, ${5:y}, ${6:x}, ${7:z}, ${8:w})$0",
"description": "function [m,e] = msdm(b,infoz,stat,y,x,z,w)" 
},
"objplot": {
"prefix": "objplot",
"body": "${1:[a, b, height] = }objplot(${2:infoz}, ${3:Y}, ${4:X}, ${5:Z}, ${6:W}, ${7:bin}, ${8:index}, ${9:r1}, ${10:r2}, ${11:labs})$0",
"description": "function [a,b,height]=objplot(infoz,Y,X,Z,W,bin,index,r1,r2,labs)" 
},
"stdn_prb": {
"prefix": "stdn_prb",
"body": "${1:prob = }stdn_prb(${2:x})$0",
"description": "function prob = stdn_prb(x)" 
},
"ckls_d": {
"prefix": "ckls_d",
"body": "ckls_d$0",
"description": "function ckls_d()" 
},
"ckls_dj": {
"prefix": "ckls_dj",
"body": "${1:G = }ckls_dj(${2:b}, ${3:infoz}, ${4:stat}, ${5:y}, ${6:X}, ${7:Z})$0",
"description": "function G=ckls_dj(b,infoz,stat,y,X,Z)" 
},
"ckls_dm": {
"prefix": "ckls_dm",
"body": "${1:[m, e] = }ckls_dm(${2:b}, ${3:infoz}, ${4:stat}, ${5:y}, ${6:X}, ${7:Z})$0",
"description": "function [m,e]=ckls_dm(b,infoz,stat,y,X,Z)" 
},
"gmm_d": {
"prefix": "gmm_d",
"body": "gmm_d$0",
"description": "gmm_d" 
},
"gmmdata": {
"prefix": "gmmdata",
"body": "gmmdata$0",
"description": "gmmdata" 
},
"gmmexj": {
"prefix": "gmmexj",
"body": "${1:G = }gmmexj(${2:b}, ${3:infoz}, ${4:stat}, ${5:Y}, ${6:X}, ${7:Z})$0",
"description": "function G=gmmexj(b,infoz,stat,Y,X,Z)" 
},
"gmmexm": {
"prefix": "gmmexm",
"body": "${1:[m, e] = }gmmexm(${2:b}, ${3:infoz}, ${4:stat}, ${5:Y}, ${6:X}, ${7:Z})$0",
"description": "function [m,e]=gmmexm(b,infoz,stat,Y,X,Z)" 
},
"gmmldv_d": {
"prefix": "gmmldv_d",
"body": "gmmldv_d$0",
"description": "gmmldv_d" 
},
"hyptest_d": {
"prefix": "hyptest_d",
"body": "hyptest_d$0",
"description": "hyptest_d" 
},
"lingmm_d": {
"prefix": "lingmm_d",
"body": "lingmm_d$0",
"description": "lingmm_d" 
},
"logitS": {
"prefix": "logitS",
"body": "${1:S = }logitS(${2:b}, ${3:infoz}, ${4:y}, ${5:x}, ${6:z})$0",
"description": "function S = logitS(b,infoz,y,x,z)" 
},
"logitj": {
"prefix": "logitj",
"body": "${1:M = }logitj(${2:b}, ${3:infoz}, ${4:stat}, ${5:y}, ${6:x}, ${7:z})$0",
"description": "function M = logitj(b,infoz,stat,y,x,z)" 
},
"logitm": {
"prefix": "logitm",
"body": "${1:[m, e] = }logitm(${2:b}, ${3:infoz}, ${4:stat}, ${5:y}, ${6:x}, ${7:z})$0",
"description": "function [m,e] = logitm(b,infoz,stat,y,x,z)" 
},
"probitS": {
"prefix": "probitS",
"body": "${1:S = }probitS(${2:b}, ${3:infoz}, ${4:y}, ${5:x}, ${6:z})$0",
"description": "function S = probitS(b,infoz,y,x,z)" 
},
"probitj": {
"prefix": "probitj",
"body": "${1:M = }probitj(${2:b}, ${3:infoz}, ${4:stat}, ${5:y}, ${6:x}, ${7:z})$0",
"description": "function M = probitj(b,infoz,stat,y,x,z)%" 
},
"probitm": {
"prefix": "probitm",
"body": "${1:[m, e] = }probitm(${2:b}, ${3:infoz}, ${4:stat}, ${5:y}, ${6:x}, ${7:z})$0",
"description": "function [m,e] = probitm(b,infoz,stat,y,x,z)" 
},
"sumstats_d": {
"prefix": "sumstats_d",
"body": "sumstats_d$0",
"description": "sumstats_d" 
},
"userw": {
"prefix": "userw",
"body": "${1:W = }userw(${2:b}, ${3:gmmopt}, ${4:Y}, ${5:X}, ${6:Z})$0",
"description": "function W = userw(b,gmmopt,Y,X,Z);" 
},
"userw_d": {
"prefix": "userw_d",
"body": "userw_d$0",
"description": "userw_d" 
},
"cols_V1": {
"prefix": "cols_V1",
"body": "${1:c = }cols(${2:A})$0",
"description": "function c=cols(A)" 
},
"rows_V1": {
"prefix": "rows_V1",
"body": "${1:r = }rows(${2:A})$0",
"description": "function r=rows(A)" 
},
"Dtest": {
"prefix": "Dtest",
"body": "${1:Dt = }Dtest(${2:num_restr}, ${3:unrestr_theta}, ${4:restr_theta}, ${5:unrestr_S}, ${6:popmom}, ${7:data}, ${8:varargin})$0",
"description": "function Dt = dtest(num_restr, unrestr_theta, restr_theta, unrestr_S, popmom, data, varargin);" 
},
"cugmmest": {
"prefix": "cugmmest",
"body": "${1:[theta_final, S_final, J_test, probJ, bandw, var_theta, std_theta, conf_inter] = }cugmmest(${2:options}, ${3:data}, ${4:popmom}, ${5:startval}, ${6:varargin})$0",
"description": "function [theta_final, S_final, J_test, probJ, bandw, var_theta, std_theta, conf_inter] = cugmmest(options, data, popmom, startval, varargin);" 
},
"cugobj": {
"prefix": "cugobj",
"body": "${1:obj = }cugobj(${2:theta}, ${3:popmom}, ${4:data}, ${5:center}, ${6:method}, ${7:bandw}, ${8:varargin})$0",
"description": "function obj = cugobj(theta, popmom, data, center, method, bandw, varargin);" 
},
"gmmest": {
"prefix": "gmmest",
"body": "${1:[theta_final, J_test, probJ, S_final, final_moments, final_moments_grad, bandw, var_theta, std_theta, conf_inter] = }gmmest(${2:options}, ${3:data}, ${4:popmom}, ${5:startval}, ${6:We}, ${7:varargin})$0",
"description": "function [theta_final, J_test, probJ, S_final, final_moments,final_moments_grad, bandw, var_theta, std_theta,conf_inter] = gmmest(options, data, popmom, startval, We, varargin);" 
},
"gmmout": {
"prefix": "gmmout",
"body": "${1:varargout = }gmmout(${2:varargin})$0",
"description": "function varargout = gmmout(varargin)" 
},
"gobj": {
"prefix": "gobj",
"body": "${1:[obj, gradobj] = }gobj(${2:theta}, ${3:popmom}, ${4:data}, ${5:W}, ${6:varargin})$0",
"description": "function [obj, gradobj] = gobj(theta, popmom, data, W, varargin);" 
},
"kernelest": {
"prefix": "kernelest",
"body": "${1:K = }kernelest(${2:T}, ${3:b}, ${4:kernel_type})$0",
"description": "function K = kernelest(T,b,kernel_type);" 
},
"lmtest_V1": {
"prefix": "lmtest_V1",
"body": "${1:LM = }lmtest(${2:num_restr}, ${3:restr_theta}, ${4:unrestr_S}, ${5:popmom}, ${6:data}, ${7:varargin})$0",
"description": "function LM = lmtest(num_restr, restr_theta, unrestr_S, popmom, data, varargin);" 
},
"longvar": {
"prefix": "longvar",
"body": "${1:[S, bandw] = }longvar(${2:pm}, ${3:center}, ${4:method}, ${5:bandw})$0",
"description": "function [S, bandw] = longvar(pm, center, method, bandw);" 
},
"msc": {
"prefix": "msc",
"body": "${1:msc_stat = }msc(${2:method}, ${3:b}, ${4:p}, ${5:Jvec}, ${6:qvec}, ${7:Tvec})$0",
"description": "function msc_stat = msc(method, b, p, Jvec, qvec, Tvec)" 
},
"optbandw": {
"prefix": "optbandw",
"body": "${1:bandwidth = }optbandw(${2:moments}, ${3:kernel_type})$0",
"description": "function bandwidth = optbandw(moments, kernel_type)" 
},
"optget": {
"prefix": "optget",
"body": "${1:optvalue = }optget(${2:funcname}, ${3:optname}, ${4:optvalue})$0",
"description": "function optvalue = optget(funcname,optname,optvalue)" 
},
"optset": {
"prefix": "optset",
"body": "optset(${2:funcname}, ${3:optname}, ${4:optvalue})$0",
"description": "function optset(funcname,optname,optvalue)" 
},
"r_gmmest": {
"prefix": "r_gmmest",
"body": "${1:[theta_final, J_test, probJ, S_final, final_moments, final_moments_grad, bandw, var_theta, std_theta, conf_inter] = }r_gmmest(${2:options}, ${3:data}, ${4:popmom}, ${5:startval}, ${6:Wstart}, ${7:varargin})$0",
"description": "function [theta_final, J_test, probJ, S_final, final_moments,final_moments_grad,bandw, var_theta, std_theta,conf_inter] = r_gmmest(options, data, popmom, startval, Wstart, varargin);" 
},
"rmsc": {
"prefix": "rmsc",
"body": "${1:rmsc_stat = }rmsc(${2:p_vec}, ${3:detVar_vec}, ${4:q_vec}, ${5:tau_vec})$0",
"description": "function rmsc_stat = rmsc(p_vec, detVar_vec, q_vec, tau_vec)" 
},
"sstests": {
"prefix": "sstests",
"body": "${1:[theta1, theta2, Wss, LMss, Dss, O, O1, O2] = }sstests(${2:options}, ${3:data}, ${4:popmom}, ${5:thetaf}, ${6:Sfull}, ${7:Df}, ${8:bp}, ${9:varargin})$0",
"description": "function [theta1, theta2, Wss, LMss, Dss, O, O1, O2] = sstests(options, data, popmom, thetaf, Sfull, Df, bp, varargin)" 
},
"sstestsu": {
"prefix": "sstestsu",
"body": "${1:[ss_statvec, thetas] = }sstestsu(${2:options}, ${3:data}, ${4:popmom}, ${5:thetafull}, ${6:Sf}, ${7:Dfull}, ${8:pi_l}, ${9:pi_u}, ${10:varargin})$0",
"description": "function [ss_statvec, thetas] = sstestsu(options, data, popmom, thetafull, Sf, Dfull, pi_l, pi_u, varargin)" 
},
"ubss_stat": {
"prefix": "ubss_stat",
"body": "${1:[Sup, bpt, Av, Exp] = }ubss_stat(${2:stat})$0",
"description": "function [Sup, bpt, Av, Exp] = ubss_stat(stat);" 
},
"varest": {
"prefix": "varest",
"body": "${1:[VAR, SD, CI] = }varest(${2:D}, ${3:S}, ${4:theta}, ${5:T})$0",
"description": "function [VAR,SD,CI]=varest(D,S,theta,T);" 
},
"wtest": {
"prefix": "wtest",
"body": "${1:Wald = }wtest(${2:num_restr}, ${3:unrestr_theta}, ${4:unrestr_S}, ${5:constrf}, ${6:popmom}, ${7:data}, ${8:varargin})$0",
"description": "function Wald = wtest(num_restr, unrestr_theta, unrestr_S, constrf, popmom, data, varargin)" 
},
"findtexmf": {
"prefix": "findtexmf",
"body": "${1:[path, folder] = }findtexmf(${2:file})$0",
"description": "function [path,folder] = findtexmf(file)" 
},
"idoc": {
"prefix": "idoc",
"body": "idoc(${2:varargin})$0",
"description": "function idoc(varargin)" 
},
"iriscleanup": {
"prefix": "iriscleanup",
"body": "iriscleanup$0",
"description": "iriscleanup" 
},
"irisconfig": {
"prefix": "irisconfig",
"body": "${1:Config = }irisconfig$0",
"description": "function Config = irisconfig()" 
},
"irisconfigmaster": {
"prefix": "irisconfigmaster",
"body": "${1:varargout = }irisconfigmaster(${2:Req}, ${3:varargin})$0",
"description": "function varargout = irisconfigmaster(Req,varargin)" 
},
"irisextensions": {
"prefix": "irisextensions",
"body": "irisextensions$0",
"description": "function irisextensions()" 
},
"irisfinish": {
"prefix": "irisfinish",
"body": "irisfinish(${2:varargin})$0",
"description": "function irisfinish(varargin)" 
},
"irisget": {
"prefix": "irisget",
"body": "${1:varargout = }irisget(${2:varargin})$0",
"description": "function varargout = irisget(varargin)" 
},
"irispathmanager": {
"prefix": "irispathmanager",
"body": "${1:varargout = }irispathmanager(${2:Req}, ${3:varargin})$0",
"description": "function varargout = irispathmanager(Req,varargin)" 
},
"irisrequired": {
"prefix": "irisrequired",
"body": "irisrequired(${2:Min})$0",
"description": "function irisrequired(Min)" 
},
"irisreset": {
"prefix": "irisreset",
"body": "irisreset$0",
"description": "function irisreset()" 
},
"irisroot": {
"prefix": "irisroot",
"body": "${1:X = }irisroot$0",
"description": "function X = irisroot()" 
},
"irisset": {
"prefix": "irisset",
"body": "irisset(${2:varargin})$0",
"description": "function irisset(varargin)" 
},
"irisstartup": {
"prefix": "irisstartup",
"body": "irisstartup(${2:varargin})$0",
"description": "function irisstartup(varargin)" 
},
"irisuserconfighelp": {
"prefix": "irisuserconfighelp",
"body": "irisuserconfighelp$0",
"description": "irisuserconfighelp" 
},
"irisversion": {
"prefix": "irisversion",
"body": "${1:[C, N] = }irisversion$0",
"description": "function [C,N] = irisversion()" 
},
"passvalopt": {
"prefix": "passvalopt",
"body": "${1:[Opt, varargout] = }passvalopt(${2:Spec}, ${3:varargin})$0",
"description": "function [Opt,varargout] = passvalopt(Spec,varargin)" 
},
"covmat_V1": {
"prefix": "covmat_V1",
"body": "${1:[This, Y0, K0, Y1, G1] = }covmat(${2:C}, ${3:Repeat}, ${4:varargin})$0",
"description": "function [This,Y0,K0,Y1,G1] = covmat(C,Repeat,varargin)" 
},
"litterman_V1": {
"prefix": "litterman_V1",
"body": "${1:[This, Y0, K0, Y1, G1] = }litterman(${2:Rho}, ${3:Mu}, ${4:Lmb}, ${5:varargin})$0",
"description": "function [This,Y0,K0,Y1,G1] = litterman(Rho,Mu,Lmb,varargin)" 
},
"mydummymat": {
"prefix": "mydummymat",
"body": "${1:[Y0, K0, Y1, G1] = }mydummymat(${2:This}, ${3:varargin})$0",
"description": "function [Y0,K0,Y1,G1] = mydummymat(This,varargin)" 
},
"sumofcoeff": {
"prefix": "sumofcoeff",
"body": "${1:[O, Y0, K0, Y1, G1] = }sumofcoeff(${2:Mu}, ${3:varargin})$0",
"description": "function [O,Y0,K0,Y1,G1] = sumofcoeff(Mu,varargin)" 
},
"uncmean": {
"prefix": "uncmean",
"body": "${1:[This, Y0, K0, Y1, G1] = }uncmean(${2:YBar}, ${3:Mu}, ${4:varargin})$0",
"description": "function [This,Y0,K0,Y1,G1] = uncmean(YBar,Mu,varargin)" 
},
"user": {
"prefix": "user",
"body": "${1:This = }user(${2:UserY0}, ${3:UserK0}, ${4:UserY1}, ${5:UserG1})$0",
"description": "function This = user(UserY0,UserK0,UserY1,UserG1)" 
},
"bvarobj": {
"prefix": "bvarobj",
"body": "${1:This = }bvarobj(${2:varargin})$0",
"description": "function This = bvarobj(varargin)" 
},
"VARs": {
"prefix": "VARs",
"body": "VARs$0",
"description": "VARs" 
},
"data": {
"prefix": "data",
"body": "data$0",
"description": "data" 
},
"index": {
"prefix": "index",
"body": "index$0",
"description": "index" 
},
"models": {
"prefix": "models",
"body": "models$0",
"description": "models" 
},
"reporting_V1": {
"prefix": "reporting_V1",
"body": "reporting$0",
"description": "reporting" 
},
"sessions": {
"prefix": "sessions",
"body": "sessions$0",
"description": "sessions" 
},
"acovf": {
"prefix": "acovf",
"body": "${1:[C, Diffuse] = }acovf(${2:T}, ${3:R})$0",
"description": "function [C,Diffuse] = acovf(T,R,~,Z,H,~,U,Omg,Eig,Order)" 
},
"acovfsmp": {
"prefix": "acovfsmp",
"body": "${1:C = }acovfsmp(${2:x}, ${3:options})$0",
"description": "function C = acovfsmp(x,options)" 
},
"cov2corr_V1": {
"prefix": "cov2corr_V1",
"body": "${1:R = }cov2corr(${2:C}, ${3:varargin})$0",
"description": "function R = cov2corr(C,varargin)" 
},
"cov2stdcorr": {
"prefix": "cov2stdcorr",
"body": "${1:Stdcorr = }cov2stdcorr(${2:Omg}, ${3:varargin})$0",
"description": "function Stdcorr = cov2stdcorr(Omg,varargin)" 
},
"cov2var": {
"prefix": "cov2var",
"body": "${1:D = }cov2var(${2:P}, ${3:varargin})$0",
"description": "function D = cov2var(P,varargin)" 
},
"factorise": {
"prefix": "factorise",
"body": "${1:[F, Di] = }factorise(${2:C}, ${3:SvdOnly})$0",
"description": "function [F,Di] = factorise(C,SvdOnly)" 
},
"lyapunov_V1": {
"prefix": "lyapunov_V1",
"body": "${1:C = }lyapunov(${2:T}, ${3:SGM}, ${4:BETA}, ${5:FIRSTROW})$0",
"description": "function C = lyapunov(T,SGM,BETA,FIRSTROW)" 
},
"orthonorm": {
"prefix": "orthonorm",
"body": "${1:[B, u] = }orthonorm(${2:Omega}, ${3:q}, ${4:std}, ${5:e})$0",
"description": "function [B,u] = orthonorm(Omega,q,std,e)" 
},
"popregress": {
"prefix": "popregress",
"body": "${1:[B, COVRES] = }popregress(${2:YY}, ${3:YX}, ${4:XX})$0",
"description": "function [B,COVRES] = popregress(YY,YX,XX)" 
},
"stdcorr2cov": {
"prefix": "stdcorr2cov",
"body": "${1:Omg = }stdcorr2cov(${2:stdcorr}, ${3:ne})$0",
"description": "function Omg = stdcorr2cov(stdcorr,ne)" 
},
"applyfilteropt": {
"prefix": "applyfilteropt",
"body": "${1:[IsFilter, Filter, Freq, ApplyTo] = }applyfilteropt(${2:Opt}, ${3:Freq}, ${4:SspaceVec})$0",
"description": "function [IsFilter,Filter,Freq,ApplyTo] = applyfilteropt(Opt,Freq,SspaceVec)" 
},
"ffrf_V1": {
"prefix": "ffrf_V1",
"body": "${1:f = }ffrf(${2:T}, ${3:R})$0",
"description": "function f = ffrf(T,R,~,Z,H,~,U,Omega,freq,tolerance,maxiter)" 
},
"ffrf2": {
"prefix": "ffrf2",
"body": "${1:[f, count] = }ffrf2(${2:T}, ${3:R})$0",
"description": "function [f,count] = ffrf2(T,R,~,Z,H,~,U,Omg,freq,tolerance,maxiter)" 
},
"ffrf3": {
"prefix": "ffrf3",
"body": "${1:[Y, Count] = }ffrf3(${2:T}, ${3:R})$0",
"description": "function [Y,Count] = ffrf3(T,R,~,Z,H,~,U,Omg,Freq,Exclude,Tol,MaxIter)" 
},
"ffrfanalytic": {
"prefix": "ffrfanalytic",
"body": "${1:[f, s] = }ffrfanalytic(${2:process})$0",
"description": "function [f,s] = ffrfanalytic(process)" 
},
"ifrf_V1": {
"prefix": "ifrf_V1",
"body": "${1:W = }ifrf(${2:T}, ${3:R}, ${4:K}, ${5:Z}, ${6:H}, ${7:D}, ${8:Zp}, ${9:Omega}, ${10:freq})$0",
"description": "function W = ifrf(T,R,K,Z,H,D,Zp,Omega,freq)" 
},
"psf2sdf": {
"prefix": "psf2sdf",
"body": "${1:D = }psf2sdf(${2:S}, ${3:C})$0",
"description": "function D = psf2sdf(S,C)" 
},
"xsf_V1": {
"prefix": "xsf_V1",
"body": "${1:S = }xsf(${2:T}, ${3:R})$0",
"description": "function S = xsf(T,R,~,Z,H,~,U,Omg,Freq,Filter,ApplyTo)" 
},
"xsf2acf": {
"prefix": "xsf2acf",
"body": "${1:C = }xsf2acf(${2:S}, ${3:freq}, ${4:order})$0",
"description": "function C = xsf2acf(S,freq,order)" 
},
"xsfvar": {
"prefix": "xsfvar",
"body": "${1:S = }xsfvar(${2:A}, ${3:Omega}, ${4:freq}, ${5:filter}, ${6:applyto})$0",
"description": "function S = xsfvar(A,Omega,freq,filter,applyto)" 
},
"axisoneitherside": {
"prefix": "axisoneitherside",
"body": "${1:ax = }axisoneitherside(${2:varargin})$0",
"description": "function ax = axisoneitherside(varargin)" 
},
"bardatatips": {
"prefix": "bardatatips",
"body": "${1:TT = }bardatatips(${2:H}, ${3:varargin})$0",
"description": "function TT = bardatatips(H,varargin)" 
},
"bottomlegend_V1": {
"prefix": "bottomlegend_V1",
"body": "${1:Le = }bottomlegend(${2:varargin})$0",
"description": "function Le = bottomlegend(varargin)" 
},
"clicktocopy": {
"prefix": "clicktocopy",
"body": "clicktocopy(${2:ax})$0",
"description": "function clicktocopy(ax)" 
},
"excludefromlegend": {
"prefix": "excludefromlegend",
"body": "excludefromlegend(${2:h})$0",
"description": "function excludefromlegend(h)" 
},
"fsection": {
"prefix": "fsection",
"body": "${1:h = }fsection(${2:Sec}, ${3:varargin})$0",
"description": "function h = fsection(Sec,varargin)" 
},
"ftitle_V1": {
"prefix": "ftitle_V1",
"body": "${1:h = }ftitle(${2:varargin})$0",
"description": "function h = ftitle(varargin)" 
},
"halegend": {
"prefix": "halegend",
"body": "${1:[lg, lgtt] = }halegend(${2:varargin})$0",
"description": "function [lg,lgtt] = halegend(varargin)" 
},
"highlight_V1": {
"prefix": "highlight_V1",
"body": "${1:[Pp, Cp] = }highlight(${2:varargin})$0",
"description": "function [Pp,Cp] = highlight(varargin)" 
},
"hline_V1": {
"prefix": "hline_V1",
"body": "${1:[Ln, Cp] = }hline(${2:varargin})$0",
"description": "function [Ln,Cp] = hline(varargin)" 
},
"listener": {
"prefix": "listener",
"body": "${1:Ls = }listener(${2:Leader}, ${3:Follower}, ${4:Name}, ${5:varargin})$0",
"description": "function Ls = listener(Leader,Follower,Name,varargin)" 
},
"maxfigure_V1": {
"prefix": "maxfigure_V1",
"body": "${1:Fig = }maxfigure(${2:varargin})$0",
"description": "function Fig = maxfigure(varargin)" 
},
"movetobkg": {
"prefix": "movetobkg",
"body": "movetobkg(${2:Par}, ${3:Bkg})$0",
"description": "function movetobkg(Par,Bkg)" 
},
"movetosubplot_V1": {
"prefix": "movetosubplot_V1",
"body": "${1:Ax = }movetosubplot(${2:Ax}, ${3:varargin})$0",
"description": "function Ax = movetosubplot(Ax,varargin)" 
},
"mycaption": {
"prefix": "mycaption",
"body": "${1:h = }mycaption(${2:ax}, ${3:location}, ${4:caption}, ${5:vPosition}, ${6:hPosition})$0",
"description": "function h = mycaption(ax,location,caption,vPosition,hPosition)" 
},
"mychkforpeers": {
"prefix": "mychkforpeers",
"body": "${1:H = }mychkforpeers(${2:Ax})$0",
"description": "function H = mychkforpeers(Ax)" 
},
"myreplacenancols": {
"prefix": "myreplacenancols",
"body": "${1:X = }myreplacenancols(${2:X}, ${3:Replace})$0",
"description": "function X = myreplacenancols(X,Replace)" 
},
"nextplot_V1": {
"prefix": "nextplot_V1",
"body": "${1:varargout = }nextplot(${2:x}, ${3:varargin})$0",
"description": "function varargout = nextplot(x,varargin)" 
},
"plotbounds": {
"prefix": "plotbounds",
"body": "${1:[HLow, HHigh] = }plotbounds(${2:Ax}, ${3:Low}, ${4:High}, ${5:Y}, ${6:PlotBounds})$0",
"description": "function [HLow,HHigh] = plotbounds(Ax,Low,High,Y,PlotBounds)" 
},
"plotcircle": {
"prefix": "plotcircle",
"body": "${1:H = }plotcircle(${2:x}, ${3:y}, ${4:radius}, ${5:varargin})$0",
"description": "function H = plotcircle(x,y,radius,varargin)" 
},
"plotcmpsstate": {
"prefix": "plotcmpsstate",
"body": "${1:[GR, FIG, AX, LN] = }plotcmpsstate(${2:m0}, ${3:m}, ${4:parname}, ${5:list}, ${6:varargin})$0",
"description": "function [GR,FIG,AX,LN] = plotcmpsstate(m0,m,parname,list,varargin)" 
},
"ploteig_V1": {
"prefix": "ploteig_V1",
"body": "${1:[H, HU, HQ] = }ploteig(${2:X}, ${3:varargin})$0",
"description": "function [H,HU,HQ] = ploteig(X,varargin)" 
},
"plotmat_V1": {
"prefix": "plotmat_V1",
"body": "${1:[HPos, HNeg, HNaNInf, HMax] = }plotmat(${2:X}, ${3:varargin})$0",
"description": "function [HPos,HNeg,HNaNInf,HMax] = plotmat(X,varargin)" 
},
"plotneigh_V1": {
"prefix": "plotneigh_V1",
"body": "${1:varargout = }plotneigh(${2:d}, ${3:varargin})$0",
"description": "function varargout = plotneigh(d,varargin)" 
},
"plotpp_V1": {
"prefix": "plotpp_V1",
"body": "${1:[PrG, PoG, varargout] = }plotpp(${2:Pr}, ${3:varargin})$0",
"description": "function [PrG,PoG,varargout] = plotpp(Pr,varargin)" 
},
"swaplhsrhs": {
"prefix": "swaplhsrhs",
"body": "swaplhsrhs(${2:Lhs}, ${3:Rhs})$0",
"description": "function swaplhsrhs(Lhs,Rhs)" 
},
"title": {
"prefix": "title",
"body": "${1:TT = }title(${2:varargin})$0",
"description": "function TT = title(varargin)" 
},
"ucircle_V1": {
"prefix": "ucircle_V1",
"body": "${1:H = }ucircle(${2:varargin})$0",
"description": "function H = ucircle(varargin)" 
},
"vline_V1": {
"prefix": "vline_V1",
"body": "${1:[Ln, Cp] = }vline(${2:varargin})$0",
"description": "function [Ln,Cp] = vline(varargin)" 
},
"yaxisreformat": {
"prefix": "yaxisreformat",
"body": "yaxisreformat(${2:varargin})$0",
"description": "function yaxisreformat(varargin)" 
},
"yaxistight": {
"prefix": "yaxistight",
"body": "yaxistight(${2:varargin})$0",
"description": "function yaxistight(varargin)" 
},
"zeroline_V1": {
"prefix": "zeroline_V1",
"body": "${1:[Ln, Cp] = }zeroline(${2:varargin})$0",
"description": "function [Ln,Cp] = zeroline(varargin)" 
},
"FAVAR_V1": {
"prefix": "FAVAR_V1",
"body": "${1:def = }FAVAR$0",
"description": "function def = FAVAR()" 
},
"IRIS": {
"prefix": "IRIS",
"body": "${1:default = }IRIS$0",
"description": "function default = IRIS()" 
},
"PVAR": {
"prefix": "PVAR",
"body": "${1:Def = }PVAR$0",
"description": "function Def = PVAR()" 
},
"SVAR_V1": {
"prefix": "SVAR_V1",
"body": "${1:def = }SVAR$0",
"description": "function def = SVAR()" 
},
"VAR_V1": {
"prefix": "VAR_V1",
"body": "${1:Def = }VAR$0",
"description": "function Def = VAR()" 
},
"bkw_V1": {
"prefix": "bkw_V1",
"body": "${1:default = }bkw$0",
"description": "function default = bkw()" 
},
"bkwmodel": {
"prefix": "bkwmodel",
"body": "${1:default = }bkwmodel$0",
"description": "function default = bkwmodel()" 
},
"dates_V1": {
"prefix": "dates_V1",
"body": "${1:Def = }dates$0",
"description": "function Def = dates()" 
},
"dbase_V1": {
"prefix": "dbase_V1",
"body": "${1:Def = }dbase$0",
"description": "function Def = dbase()" 
},
"estimateobj_V1": {
"prefix": "estimateobj_V1",
"body": "${1:Def = }estimateobj$0",
"description": "function Def = estimateobj()" 
},
"freqdom": {
"prefix": "freqdom",
"body": "${1:default = }freqdom$0",
"description": "function default = freqdom()" 
},
"grfun": {
"prefix": "grfun",
"body": "${1:Def = }grfun$0",
"description": "function Def = grfun()" 
},
"latex": {
"prefix": "latex",
"body": "${1:Def = }latex$0",
"description": "function Def = latex()" 
},
"model_V1": {
"prefix": "model_V1",
"body": "${1:Def = }model$0",
"description": "function Def = model()" 
},
"poster_V1": {
"prefix": "poster_V1",
"body": "${1:def = }poster$0",
"description": "function def = poster()" 
},
"preparser_V1": {
"prefix": "preparser_V1",
"body": "${1:default = }preparser$0",
"description": "function default = preparser()" 
},
"qreport_V1": {
"prefix": "qreport_V1",
"body": "${1:Def = }qreport$0",
"description": "function Def = qreport()" 
},
"quickreport": {
"prefix": "quickreport",
"body": "${1:default = }quickreport$0",
"description": "function default = quickreport()" 
},
"report": {
"prefix": "report",
"body": "${1:Def = }report$0",
"description": "function Def = report()" 
},
"sstate_V1": {
"prefix": "sstate_V1",
"body": "${1:default = }sstate$0",
"description": "function default = sstate()" 
},
"stlop": {
"prefix": "stlop",
"body": "${1:Def = }stlop$0",
"description": "function Def = stlop()" 
},
"strfun": {
"prefix": "strfun",
"body": "${1:default = }strfun$0",
"description": "function default = strfun()" 
},
"systemfit": {
"prefix": "systemfit",
"body": "${1:def = }systemfit$0",
"description": "function def = systemfit()" 
},
"systempriors_V1": {
"prefix": "systempriors_V1",
"body": "${1:def = }systempriors$0",
"description": "function def = systempriors()" 
},
"tseries_V1": {
"prefix": "tseries_V1",
"body": "${1:Def = }tseries$0",
"description": "function Def = tseries()" 
},
"varobj_V1": {
"prefix": "varobj_V1",
"body": "${1:Def = }varobj$0",
"description": "function Def = varobj()" 
},
"cont": {
"prefix": "cont",
"body": "${1:S = }cont(${2:S})$0",
"description": "function S = cont(S)" 
},
"correct": {
"prefix": "correct",
"body": "${1:[Pe0, A0, Y0, YDelta] = }correct(${2:S}, ${3:Pe0}, ${4:A0}, ${5:Y0}, ${6:Est}, ${7:D})$0",
"description": "function [Pe0,A0,Y0,YDelta] = correct(S,Pe0,A0,Y0,Est,D)" 
},
"onestepbackmean": {
"prefix": "onestepbackmean",
"body": "${1:[Y2, F2, B2, E2, r] = }onestepbackmean(${2:S}, ${3:Time}, ${4:Pe}, ${5:A0}, ${6:F0}, ${7:YDelta}, ${8:D}, ${9:r})$0",
"description": "function [Y2,F2,B2,E2,r] = onestepbackmean(S,Time,Pe,A0,F0,YDelta,D,r)" 
},
"oolik": {
"prefix": "oolik",
"body": "${1:[Obj, V, Est, PEst] = }oolik(${2:L0}, ${3:L1}, ${4:L2}, ${5:L3}, ${6:NObs}, ${7:Opt})$0",
"description": "function [Obj,V,Est,PEst] = oolik(L0,L1,L2,L3,NObs,Opt)" 
},
"pa2pb": {
"prefix": "pa2pb",
"body": "${1:P = }pa2pb(${2:U}, ${3:P})$0",
"description": "function P = pa2pb(U,P)" 
},
"ped": {
"prefix": "ped",
"body": "${1:[Obj, S] = }ped(${2:S}, ${3:S2}, ${4:Opt})$0",
"description": "function [Obj,S] = ped(S,S2,Opt)" 
},
"compile_V1": {
"prefix": "compile_V1",
"body": "${1:x = }compile(${2:inputfilename}, ${3:varargin})$0",
"description": "function x = compile(inputfilename,varargin)" 
},
"compilepdf": {
"prefix": "compilepdf",
"body": "${1:[Pdf, Count] = }compilepdf(${2:InpFile}, ${3:varargin})$0",
"description": "function [Pdf,Count] = compilepdf(InpFile,varargin)" 
},
"epstopdf": {
"prefix": "epstopdf",
"body": "epstopdf(${2:List}, ${3:CmdArgs}, ${4:varargin})$0",
"description": "function epstopdf(List,CmdArgs,varargin)" 
},
"findeps2pdf": {
"prefix": "findeps2pdf",
"body": "findeps2pdf(${2:inputfile})$0",
"description": "function findeps2pdf(inputfile)" 
},
"matlab": {
"prefix": "matlab",
"body": "matlab(${2:FNAME}, ${3:D}, ${4:varargin})$0",
"description": "function matlab(FNAME,D,varargin)" 
},
"ps2pdf": {
"prefix": "ps2pdf",
"body": "ps2pdf(${2:list}, ${3:varargin})$0",
"description": "function ps2pdf(list,varargin)" 
},
"publish_V1": {
"prefix": "publish_V1",
"body": "publish(${2:InputFile}, ${3:OutputFile}, ${4:varargin})$0",
"description": "function publish(InputFile,OutputFile,varargin)" 
},
"stringsubs": {
"prefix": "stringsubs",
"body": "${1:C = }stringsubs(${2:C})$0",
"description": "function C = stringsubs(C)" 
},
"xml2tex": {
"prefix": "xml2tex",
"body": "${1:[C, Author, Event] = }xml2tex(${2:X}, ${3:Type}, ${4:Opt})$0",
"description": "function [C,Author,Event] = xml2tex(X,Type,Opt)" 
},
"xpath": {
"prefix": "xpath",
"body": "${1:n = }xpath(${2:x}, ${3:query}, ${4:type})$0",
"description": "function n = xpath(x,query,type)" 
},
"beta_V1": {
"prefix": "beta_V1",
"body": "${1:F = }beta(${2:Mean}, ${3:Std})$0",
"description": "function F = beta(Mean,Std)" 
},
"gamma_V1": {
"prefix": "gamma_V1",
"body": "${1:F = }gamma(${2:Mean}, ${3:Std})$0",
"description": "function F = gamma(Mean,Std)" 
},
"invgamma_V1": {
"prefix": "invgamma_V1",
"body": "${1:F = }invgamma(${2:Mean}, ${3:Std})$0",
"description": "function F = invgamma(Mean,Std)" 
},
"lognormal_V1": {
"prefix": "lognormal_V1",
"body": "${1:F = }lognormal(${2:Mean}, ${3:Std})$0",
"description": "function F = lognormal(Mean,Std)" 
},
"normal_V1": {
"prefix": "normal_V1",
"body": "${1:F = }normal(${2:Mean}, ${3:Std})$0",
"description": "function F = normal(Mean,Std)" 
},
"uniform_V1": {
"prefix": "uniform_V1",
"body": "${1:F = }uniform(${2:Lo}, ${3:Hi})$0",
"description": "function F = uniform(Lo,Hi)" 
},
"beta_V2": {
"prefix": "beta_V2",
"body": "${1:varargout = }beta(${2:varargin})$0",
"description": "function varargout = beta(varargin)" 
},
"gamma_V2": {
"prefix": "gamma_V2",
"body": "${1:varargout = }gamma(${2:varargin})$0",
"description": "function varargout = gamma(varargin)" 
},
"invgamma_V2": {
"prefix": "invgamma_V2",
"body": "${1:varargout = }invgamma(${2:varargin})$0",
"description": "function varargout = invgamma(varargin)" 
},
"lognormal_V2": {
"prefix": "lognormal_V2",
"body": "${1:varargout = }lognormal(${2:varargin})$0",
"description": "function varargout = lognormal(varargin)" 
},
"normal_V2": {
"prefix": "normal_V2",
"body": "${1:varargout = }normal(${2:varargin})$0",
"description": "function varargout = normal(varargin)" 
},
"uniform_V2": {
"prefix": "uniform_V2",
"body": "${1:varargout = }uniform(${2:varargin})$0",
"description": "function varargout = uniform(varargin)" 
},
"alias": {
"prefix": "alias",
"body": "alias$0",
"description": "alias" 
},
"autoexogenise_V1": {
"prefix": "autoexogenise_V1",
"body": "autoexogenise$0",
"description": "autoexogenise" 
},
"blockcomments": {
"prefix": "blockcomments",
"body": "blockcomments$0",
"description": "blockcomments" 
},
"case": {
"prefix": "case",
"body": "case$0",
"description": "case" 
},
"diff_V1": {
"prefix": "diff_V1",
"body": "diff$0",
"description": "diff" 
},
"difflog": {
"prefix": "difflog",
"body": "difflog$0",
"description": "difflog" 
},
"do": {
"prefix": "do",
"body": "do$0",
"description": "do" 
},
"dot": {
"prefix": "dot",
"body": "dot$0",
"description": "dot" 
},
"dtrends": {
"prefix": "dtrends",
"body": "dtrends$0",
"description": "dtrends" 
},
"else": {
"prefix": "else",
"body": "else$0",
"description": "else" 
},
"end_V1": {
"prefix": "end_V1",
"body": "end$0",
"description": "end" 
},
"exactnonlin": {
"prefix": "exactnonlin",
"body": "exactnonlin$0",
"description": "exactnonlin" 
},
"exogenousvariables": {
"prefix": "exogenousvariables",
"body": "exogenousvariables$0",
"description": "exogenousvariables" 
},
"export_V1": {
"prefix": "export_V1",
"body": "export$0",
"description": "export" 
},
"for": {
"prefix": "for",
"body": "for$0",
"description": "for" 
},
"if": {
"prefix": "if",
"body": "if$0",
"description": "if" 
},
"import": {
"prefix": "import",
"body": "import$0",
"description": "import" 
},
"laglead": {
"prefix": "laglead",
"body": "laglead$0",
"description": "laglead" 
},
"linecomments": {
"prefix": "linecomments",
"body": "linecomments$0",
"description": "linecomments" 
},
"links": {
"prefix": "links",
"body": "links$0",
"description": "links" 
},
"measurementequations": {
"prefix": "measurementequations",
"body": "measurementequations$0",
"description": "measurementequations" 
},
"measurementshocks": {
"prefix": "measurementshocks",
"body": "measurementshocks$0",
"description": "measurementshocks" 
},
"measurementvariables": {
"prefix": "measurementvariables",
"body": "measurementvariables$0",
"description": "measurementvariables" 
},
"min": {
"prefix": "min",
"body": "min$0",
"description": "min" 
},
"movavg": {
"prefix": "movavg",
"body": "movavg$0",
"description": "movavg" 
},
"movprod": {
"prefix": "movprod",
"body": "movprod$0",
"description": "movprod" 
},
"movsumLRW": {
"prefix": "movsumLRW",
"body": "movsumLRW$0",
"description": "movsumLRW" 
},
"parameters": {
"prefix": "parameters",
"body": "parameters$0",
"description": "parameters" 
},
"regexpression": {
"prefix": "regexpression",
"body": "regexpression$0",
"description": "regexpression" 
},
"sstateref": {
"prefix": "sstateref",
"body": "sstateref$0",
"description": "sstateref" 
},
"sstateversion": {
"prefix": "sstateversion",
"body": "sstateversion$0",
"description": "sstateversion" 
},
"substitutions": {
"prefix": "substitutions",
"body": "substitutions$0",
"description": "substitutions" 
},
"switch": {
"prefix": "switch",
"body": "switch$0",
"description": "switch" 
},
"transitionequations": {
"prefix": "transitionequations",
"body": "transitionequations$0",
"description": "transitionequations" 
},
"transitionshocks": {
"prefix": "transitionshocks",
"body": "transitionshocks$0",
"description": "transitionshocks" 
},
"transitionvariables": {
"prefix": "transitionvariables",
"body": "transitionvariables$0",
"description": "transitionvariables" 
},
"ttrend": {
"prefix": "ttrend",
"body": "ttrend$0",
"description": "ttrend" 
},
"userdiff": {
"prefix": "userdiff",
"body": "userdiff$0",
"description": "userdiff" 
},
"linex": {
"prefix": "linex",
"body": "${1:Y = }linex(${2:X}, ${3:A}, ${4:B}, ${5:varargin})$0",
"description": "function Y = linex(X,A,B,varargin)" 
},
"poly2var": {
"prefix": "poly2var",
"body": "${1:A = }poly2var(${2:A})$0",
"description": "function A = poly2var(A)" 
},
"polyprod": {
"prefix": "polyprod",
"body": "${1:C = }polyprod(${2:A}, ${3:B})$0",
"description": "function C = polyprod(A,B)" 
},
"polysum": {
"prefix": "polysum",
"body": "${1:C = }polysum(${2:A}, ${3:B})$0",
"description": "function C = polysum(A,B)" 
},
"var2poly": {
"prefix": "var2poly",
"body": "${1:A = }var2poly(${2:A})$0",
"description": "function A = var2poly(A)" 
},
"qplot_V1": {
"prefix": "qplot_V1",
"body": "${1:[FF, AA, PDb] = }qplot(${2:QFile}, ${3:D}, ${4:Range}, ${5:varargin})$0",
"description": "function [FF,AA,PDb] = qplot(QFile,D,Range,varargin)" 
},
"qplot3": {
"prefix": "qplot3",
"body": "${1:[hfig, hax, hline, htit, plotdb] = }qplot3(${2:cdfname}, ${3:data}, ${4:range}, ${5:varargin})$0",
"description": "function [hfig,hax,hline,htit,plotdb] = qplot(cdfname,data,range,varargin)" 
},
"qreport_V2": {
"prefix": "qreport_V2",
"body": "${1:[FF, AA, PDb] = }qreport(${2:FileName}, ${3:D}, ${4:Range}, ${5:varargin})$0",
"description": "function [FF,AA,PDb] = qreport(FileName,D,Range,varargin)" 
},
"qstyle_V1": {
"prefix": "qstyle_V1",
"body": "qstyle(${2:GS}, ${3:H}, ${4:varargin})$0",
"description": "function qstyle(GS,H,varargin)" 
},
"styleprocessor": {
"prefix": "styleprocessor",
"body": "${1:SET = }styleprocessor(${2:H}, ${3:varargin})$0",
"description": "function SET = styleprocessor(H,varargin) %#ok<INUSL,STOUT>" 
},
"bargraph": {
"prefix": "bargraph",
"body": "bargraph$0",
"description": "bargraph" 
},
"blank": {
"prefix": "blank",
"body": "blank$0",
"description": "blank" 
},
"errorbargraph": {
"prefix": "errorbargraph",
"body": "errorbargraph$0",
"description": "errorbargraph" 
},
"histgraph": {
"prefix": "histgraph",
"body": "histgraph$0",
"description": "histgraph" 
},
"linebreak": {
"prefix": "linebreak",
"body": "linebreak$0",
"description": "linebreak" 
},
"linegraph": {
"prefix": "linegraph",
"body": "linegraph$0",
"description": "linegraph" 
},
"stemgraph": {
"prefix": "stemgraph",
"body": "stemgraph$0",
"description": "stemgraph" 
},
"subplot": {
"prefix": "subplot",
"body": "subplot$0",
"description": "subplot" 
},
"subtitle": {
"prefix": "subtitle",
"body": "subtitle$0",
"description": "subtitle" 
},
"align": {
"prefix": "align",
"body": "align$0",
"description": "align" 
},
"array": {
"prefix": "array",
"body": "array$0",
"description": "array" 
},
"band": {
"prefix": "band",
"body": "band$0",
"description": "band" 
},
"copy_V2": {
"prefix": "copy_V2",
"body": "copy$0",
"description": "copy" 
},
"disp_V1": {
"prefix": "disp_V1",
"body": "disp$0",
"description": "disp" 
},
"display_V2": {
"prefix": "display_V2",
"body": "display$0",
"description": "display" 
},
"empty_V1": {
"prefix": "empty_V1",
"body": "empty$0",
"description": "empty" 
},
"fanchart_V1": {
"prefix": "fanchart_V1",
"body": "fanchart$0",
"description": "fanchart" 
},
"findall_V1": {
"prefix": "findall_V1",
"body": "findall$0",
"description": "findall" 
},
"graph": {
"prefix": "graph",
"body": "graph$0",
"description": "graph" 
},
"highlight_V2": {
"prefix": "highlight_V2",
"body": "highlight$0",
"description": "highlight" 
},
"include": {
"prefix": "include",
"body": "include$0",
"description": "include" 
},
"matrix": {
"prefix": "matrix",
"body": "matrix$0",
"description": "matrix" 
},
"merge_V3": {
"prefix": "merge_V3",
"body": "merge$0",
"description": "merge" 
},
"modelfile": {
"prefix": "modelfile",
"body": "modelfile$0",
"description": "modelfile" 
},
"new": {
"prefix": "new",
"body": "${1:This = }new(${2:varargin})$0",
"description": "function This = new(varargin)" 
},
"pagebreak": {
"prefix": "pagebreak",
"body": "pagebreak$0",
"description": "pagebreak" 
},
"publish_V2": {
"prefix": "publish_V2",
"body": "publish$0",
"description": "publish" 
},
"section": {
"prefix": "section",
"body": "section$0",
"description": "section" 
},
"series": {
"prefix": "series",
"body": "series$0",
"description": "series" 
},
"subheading": {
"prefix": "subheading",
"body": "subheading$0",
"description": "subheading" 
},
"table": {
"prefix": "table",
"body": "table$0",
"description": "table" 
},
"tex": {
"prefix": "tex",
"body": "tex$0",
"description": "tex" 
},
"userfigure": {
"prefix": "userfigure",
"body": "userfigure$0",
"description": "userfigure" 
},
"vline_V2": {
"prefix": "vline_V2",
"body": "vline$0",
"description": "vline" 
},
"alignobj": {
"prefix": "alignobj",
"body": "${1:This = }alignobj(${2:varargin})$0",
"description": "function This = alignobj(varargin)" 
},
"annotateobj": {
"prefix": "annotateobj",
"body": "${1:this = }annotateobj(${2:varargin})$0",
"description": "function this = annotateobj(varargin)" 
},
"arrayobj": {
"prefix": "arrayobj",
"body": "${1:This = }arrayobj(${2:varargin})$0",
"description": "function This = arrayobj(varargin)" 
},
"bandobj": {
"prefix": "bandobj",
"body": "${1:This = }bandobj(${2:varargin})$0",
"description": "function This = bandobj(varargin)" 
},
"chkconsistency": {
"prefix": "chkconsistency",
"body": "chkconsistency(${2:This})$0",
"description": "function chkconsistency(This)" 
},
"latexonerow_V1": {
"prefix": "latexonerow_V1",
"body": "${1:C = }latexonerow(${2:This}, ${3:IRow}, ${4:Time}, ${5:Data}, ${6:Mark}, ${7:Text})$0",
"description": "function C = latexonerow(This,IRow,Time,Data,Mark,Text)" 
},
"plot_V1": {
"prefix": "plot_V1",
"body": "${1:LegendEntry = }plot(${2:This}, ${3:Ax})$0",
"description": "function LegendEntry = plot(This,Ax)" 
},
"basefigureobj": {
"prefix": "basefigureobj",
"body": "${1:This = }basefigureobj(${2:varargin})$0",
"description": "function This = basefigureobj(varargin)" 
},
"mycompilepdf": {
"prefix": "mycompilepdf",
"body": "${1:[InclGraph, Temps, Raise] = }mycompilepdf(${2:This}, ${3:Opt})$0",
"description": "function [InclGraph,Temps,Raise] = mycompilepdf(This,Opt)" 
},
"mysubplot": {
"prefix": "mysubplot",
"body": "${1:Sub = }mysubplot(${2:This})$0",
"description": "function Sub = mysubplot(This)" 
},
"assign_V1": {
"prefix": "assign_V1",
"body": "${1:This = }assign(${2:This}, ${3:Opt})$0",
"description": "function This = assign(This,Opt)" 
},
"condformatobj": {
"prefix": "condformatobj",
"body": "${1:This = }condformatobj(${2:varargin})$0",
"description": "function This = condformatobj(varargin)" 
},
"testnformat": {
"prefix": "testnformat",
"body": "${1:C = }testnformat(${2:This}, ${3:A}, ${4:ColW}, ${5:Just}, ${6:HColor})$0",
"description": "function C = testnformat(This,A,ColW,Just,HColor)" 
},
"emptyobj": {
"prefix": "emptyobj",
"body": "${1:This = }emptyobj(${2:varargin})$0",
"description": "function This = emptyobj(varargin)" 
},
"fanchartobj": {
"prefix": "fanchartobj",
"body": "${1:This = }fanchartobj(${2:varargin})$0",
"description": "function This = fanchartobj(varargin)" 
},
"plot_V2": {
"prefix": "plot_V2",
"body": "${1:Leg = }plot(${2:This}, ${3:Ax})$0",
"description": "function Leg = plot(This,Ax)" 
},
"figureobj": {
"prefix": "figureobj",
"body": "${1:This = }figureobj(${2:varargin})$0",
"description": "function This = figureobj(varargin)" 
},
"add_V2": {
"prefix": "add_V2",
"body": "${1:This = }add(${2:This}, ${3:Child}, ${4:varargin})$0",
"description": "function This = add(This,Child,varargin)" 
},
"copy_V3": {
"prefix": "copy_V3",
"body": "${1:New = }copy(${2:This})$0",
"description": "function New = copy(This)" 
},
"disp_V2": {
"prefix": "disp_V2",
"body": "disp(${2:This}, ${3:Level})$0",
"description": "function disp(This,Level)" 
},
"display_V3": {
"prefix": "display_V3",
"body": "display(${2:This})$0",
"description": "function display(This)" 
},
"findall_V2": {
"prefix": "findall_V2",
"body": "${1:Collect = }findall(${2:This}, ${3:varargin})$0",
"description": "function Collect = findall(This,varargin)" 
},
"genericobj": {
"prefix": "genericobj",
"body": "${1:This = }genericobj(${2:varargin})$0",
"description": "function This = genericobj(varargin)" 
},
"getrootprop": {
"prefix": "getrootprop",
"body": "${1:Val = }getrootprop(${2:This}, ${3:Prop})$0",
"description": "function Val = getrootprop(This,Prop)" 
},
"latexcode": {
"prefix": "latexcode",
"body": "${1:[C, Temps] = }latexcode(${2:This})$0",
"description": "function [C,Temps] = latexcode(This)" 
},
"printcaption": {
"prefix": "printcaption",
"body": "${1:C = }printcaption(${2:This}, ${3:NCol}, ${4:Just}, ${5:Space})$0",
"description": "function C = printcaption(This,NCol,Just,Space)" 
},
"root_V2": {
"prefix": "root_V2",
"body": "${1:X = }root(${2:This}, ${3:varargin})$0",
"description": "function X = root(This,varargin)" 
},
"setrootprop": {
"prefix": "setrootprop",
"body": "${1:X = }setrootprop(${2:This}, ${3:Prop}, ${4:Val})$0",
"description": "function X = setrootprop(This,Prop,Val)" 
},
"shortclass": {
"prefix": "shortclass",
"body": "${1:C = }shortclass(${2:This})$0",
"description": "function C = shortclass(This)" 
},
"speclatexcode": {
"prefix": "speclatexcode",
"body": "${1:[C, HelperFiles] = }speclatexcode(${2:This})$0",
"description": "function [C,HelperFiles] = speclatexcode(This) %#ok<INUSD>" 
},
"graphobj": {
"prefix": "graphobj",
"body": "${1:This = }graphobj(${2:varargin})$0",
"description": "function This = graphobj(varargin)" 
},
"highlightobj": {
"prefix": "highlightobj",
"body": "${1:This = }highlightobj(${2:varargin})$0",
"description": "function This = highlightobj(varargin)" 
},
"includeobj": {
"prefix": "includeobj",
"body": "${1:This = }includeobj(${2:varargin})$0",
"description": "function This = includeobj(varargin)" 
},
"anycolname": {
"prefix": "anycolname",
"body": "${1:Flag = }anycolname(${2:This})$0",
"description": "function Flag = anycolname(This)" 
},
"anyrowname": {
"prefix": "anyrowname",
"body": "${1:Flag = }anyrowname(${2:This})$0",
"description": "function Flag = anyrowname(This)" 
},
"matrixobj": {
"prefix": "matrixobj",
"body": "${1:This = }matrixobj(${2:varargin})$0",
"description": "function This = matrixobj(varargin)" 
},
"modelfileobj": {
"prefix": "modelfileobj",
"body": "${1:This = }modelfileobj(${2:varargin})$0",
"description": "function This = modelfileobj(varargin)" 
},
"printmodelfile": {
"prefix": "printmodelfile",
"body": "${1:C = }printmodelfile(${2:This})$0",
"description": "function C = printmodelfile(This)" 
},
"pagebreakobj": {
"prefix": "pagebreakobj",
"body": "${1:This = }pagebreakobj(${2:varargin})$0",
"description": "function This = pagebreakobj(varargin)" 
},
"cleanup": {
"prefix": "cleanup",
"body": "cleanup(${2:This}, ${3:LatexFile}, ${4:Temps})$0",
"description": "function cleanup(This,LatexFile,Temps)" 
},
"merge_V4": {
"prefix": "merge_V4",
"body": "${1:This = }merge(${2:This}, ${3:varargin})$0",
"description": "function This = merge(This,varargin)" 
},
"publish_V3": {
"prefix": "publish_V3",
"body": "publish(${2:This}, ${3:OutputFile}, ${4:varargin})$0",
"description": "function publish(This,OutputFile,varargin)" 
},
"reportobj": {
"prefix": "reportobj",
"body": "${1:This = }reportobj(${2:varargin})$0",
"description": "function This = reportobj(varargin)" 
},
"sectionobj": {
"prefix": "sectionobj",
"body": "${1:This = }sectionobj(${2:varargin})$0",
"description": "function This = sectionobj(varargin)" 
},
"autodata": {
"prefix": "autodata",
"body": "${1:This = }autodata(${2:This})$0",
"description": "function This = autodata(This)" 
},
"getdata_V1": {
"prefix": "getdata_V1",
"body": "${1:[Outp, Time] = }getdata(${2:This}, ${3:Inp}, ${4:Range}, ${5:ColStruct})$0",
"description": "function [Outp,Time] = getdata(This,Inp,Range,ColStruct)" 
},
"latexdata": {
"prefix": "latexdata",
"body": "${1:C = }latexdata(${2:This}, ${3:Ros}, ${4:Time}, ${5:Data}, ${6:Format}, ${7:Mark}, ${8:Text})$0",
"description": "function C = latexdata(This,Ros,Time,Data,Format,Mark,Text)" 
},
"latexonerow_V2": {
"prefix": "latexonerow_V2",
"body": "${1:C = }latexonerow(${2:This}, ${3:Row}, ${4:Time}, ${5:Data}, ${6:Mark}, ${7:Text})$0",
"description": "function C = latexonerow(This,Row,Time,Data,Mark,Text)" 
},
"mylegend": {
"prefix": "mylegend",
"body": "${1:[LegendEntry, Exclude] = }mylegend(${2:This}, ${3:NData})$0",
"description": "function [LegendEntry,Exclude] = mylegend(This,NData)" 
},
"plot_V3": {
"prefix": "plot_V3",
"body": "${1:[LegeEntry, H, Time, Data, Grid] = }plot(${2:This}, ${3:Ax})$0",
"description": "function [LegeEntry,H,Time,Data,Grid] = plot(This,Ax)" 
},
"seriesobj": {
"prefix": "seriesobj",
"body": "${1:This = }seriesobj(${2:varargin})$0",
"description": "function This = seriesobj(varargin)" 
},
"subheadingobj": {
"prefix": "subheadingobj",
"body": "${1:This = }subheadingobj(${2:varargin})$0",
"description": "function This = subheadingobj(varargin)" 
},
"headline": {
"prefix": "headline",
"body": "${1:C = }headline(${2:This})$0",
"description": "function C = headline(This)" 
},
"tableobj": {
"prefix": "tableobj",
"body": "${1:This = }tableobj(${2:varargin})$0",
"description": "function This = tableobj(varargin)" 
},
"tabularobj": {
"prefix": "tabularobj",
"body": "${1:This = }tabularobj(${2:varargin})$0",
"description": "function This = tabularobj(varargin)" 
},
"texcommandobj": {
"prefix": "texcommandobj",
"body": "${1:This = }texcommandobj(${2:varargin})$0",
"description": "function This = texcommandobj(varargin)" 
},
"texobj": {
"prefix": "texobj",
"body": "${1:This = }texobj(${2:varargin})$0",
"description": "function This = texobj(varargin)" 
},
"userfigureobj": {
"prefix": "userfigureobj",
"body": "${1:This = }userfigureobj(${2:varargin})$0",
"description": "function This = userfigureobj(varargin)" 
},
"userinputobj": {
"prefix": "userinputobj",
"body": "${1:This = }userinputobj(${2:varargin})$0",
"description": "function This = userinputobj(varargin)" 
},
"vlineobj": {
"prefix": "vlineobj",
"body": "${1:This = }vlineobj(${2:varargin})$0",
"description": "function This = vlineobj(varargin)" 
},
"equations": {
"prefix": "equations",
"body": "equations$0",
"description": "equations" 
},
"growthnames": {
"prefix": "growthnames",
"body": "growthnames$0",
"description": "growthnames" 
},
"growthnames2imag": {
"prefix": "growthnames2imag",
"body": "growthnames2imag$0",
"description": "growthnames2imag" 
},
"input": {
"prefix": "input",
"body": "input$0",
"description": "input" 
},
"solvefor": {
"prefix": "solvefor",
"body": "solvefor$0",
"description": "solvefor" 
},
"symbolic": {
"prefix": "symbolic",
"body": "symbolic$0",
"description": "symbolic" 
},
"charlist2cellstr": {
"prefix": "charlist2cellstr",
"body": "${1:[strings, labels] = }charlist2cellstr(${2:x}, ${3:sep})$0",
"description": "function [strings,labels] = charlist2cellstr(x,sep)" 
},
"cleaneval": {
"prefix": "cleaneval",
"body": "${1:varargout = }cleaneval(${2:varargin})$0",
"description": "function varargout = cleaneval(varargin)" 
},
"converteols": {
"prefix": "converteols",
"body": "${1:x = }converteols(${2:x})$0",
"description": "function x = converteols(x)" 
},
"cslist": {
"prefix": "cslist",
"body": "${1:S = }cslist(${2:C}, ${3:varargin})$0",
"description": "function S = cslist(C,varargin)" 
},
"ellipsis": {
"prefix": "ellipsis",
"body": "${1:C = }ellipsis(${2:C}, ${3:N})$0",
"description": "function C = ellipsis(C,N)" 
},
"emptycellstr": {
"prefix": "emptycellstr",
"body": "${1:varargout = }emptycellstr(${2:varargin})$0",
"description": "function varargout = emptycellstr(varargin)" 
},
"file2char_V1": {
"prefix": "file2char_V1",
"body": "${1:[c, flag] = }file2char(${2:fname}, ${3:type}, ${4:lines})$0",
"description": "function [c,flag] = file2char(fname,type,lines)" 
},
"findnames_V1": {
"prefix": "findnames_V1",
"body": "${1:[Inx, NotFound, Inx1] = }findnames(${2:List}, ${3:Select}, ${4:Pattern})$0",
"description": "function [Inx,NotFound,Inx1] = findnames(List,Select,Pattern)" 
},
"findremove": {
"prefix": "findremove",
"body": "${1:[flag, s] = }findremove(${2:s}, ${3:x})$0",
"description": "function [flag,s] = findremove(s,x)" 
},
"grabtext": {
"prefix": "grabtext",
"body": "${1:text = }grabtext(${2:startTag}, ${3:endTag})$0",
"description": "function text = grabtext(startTag,endTag)" 
},
"loosespace": {
"prefix": "loosespace",
"body": "loosespace$0",
"description": "function loosespace()" 
},
"matchbrk": {
"prefix": "matchbrk",
"body": "${1:[Close, Inside, ThisLevel] = }matchbrk(${2:C}, ${3:Open}, ${4:Fill})$0",
"description": "function [Close,Inside,ThisLevel] = matchbrk(C,Open,Fill)" 
},
"matchindex": {
"prefix": "matchindex",
"body": "${1:[index, match, tokens] = }matchindex(${2:list}, ${3:pattern})$0",
"description": "function [index,match,tokens] = matchindex(list,pattern)" 
},
"maxdisp": {
"prefix": "maxdisp",
"body": "${1:c = }maxdisp(${2:c}, ${3:n})$0",
"description": "function c = maxdisp(c,n)" 
},
"nonunique_V1": {
"prefix": "nonunique_V1",
"body": "${1:List = }nonunique(${2:List})$0",
"description": "function List = nonunique(List)" 
},
"removecomments": {
"prefix": "removecomments",
"body": "${1:text = }removecomments(${2:text}, ${3:varargin})$0",
"description": "function text = removecomments(text,varargin)" 
},
"removeltel": {
"prefix": "removeltel",
"body": "${1:c = }removeltel(${2:c})$0",
"description": "function c = removeltel(c)" 
},
"removetrails": {
"prefix": "removetrails",
"body": "${1:c = }removetrails(${2:c})$0",
"description": "function c = removetrails(c)" 
},
"strcmporregexp": {
"prefix": "strcmporregexp",
"body": "${1:Inx = }strcmporregexp(${2:List}, ${3:String})$0",
"description": "function Inx = strcmporregexp(List,String)" 
},
"strrepoutside": {
"prefix": "strrepoutside",
"body": "${1:str = }strrepoutside(${2:str}, ${3:find}, ${4:replace}, ${5:varargin})$0",
"description": "function str = strrepoutside(str,find,replace,varargin)" 
},
"vectorise": {
"prefix": "vectorise",
"body": "${1:s = }vectorise(${2:s})$0",
"description": "function s = vectorise(s)" 
},
"kde_V1": {
"prefix": "kde_V1",
"body": "${1:[bandwidth, density, xmesh, cdf] = }kde(${2:data}, ${3:n}, ${4:MIN}, ${5:MAX})$0",
"description": "function [bandwidth,density,xmesh,cdf]=kde(data,n,MIN,MAX)" 
},
"x12_V1": {
"prefix": "x12_V1",
"body": "${1:[Y, varargout] = }x12(${2:X}, ${3:STARTDATE}, ${4:DUMMY}, ${5:OPT})$0",
"description": "function [Y,varargout] = x12(X,STARTDATE,DUMMY,OPT)" 
},
"fevd_V1": {
"prefix": "fevd_V1",
"body": "${1:[X, Y] = }fevd(${2:T}, ${3:R}, ${4:K}, ${5:Z}, ${6:H}, ${7:D}, ${8:U}, ${9:OMG}, ${10:NPER})$0",
"description": "function [X,Y] = fevd(T,R,K,Z,H,D,U,OMG,NPER)" 
},
"filterxf": {
"prefix": "filterxf",
"body": "${1:s = }filterxf(${2:s})$0",
"description": "function s = filterxf(s)" 
},
"fixcov": {
"prefix": "fixcov",
"body": "${1:X = }fixcov(${2:X})$0",
"description": "function X = fixcov(X)" 
},
"fmse_V1": {
"prefix": "fmse_V1",
"body": "${1:X = }fmse(${2:T}, ${3:R}, ${4:K}, ${5:Z}, ${6:H}, ${7:D}, ${8:U}, ${9:Omega}, ${10:nper})$0",
"description": "function X = fmse(T,R,K,Z,H,D,U,Omega,nper)" 
},
"icrf_V1": {
"prefix": "icrf_V1",
"body": "${1:[Phi, icsize] = }icrf(${2:T}, ${3:R}, ${4:K}, ${5:Z}, ${6:H}, ${7:D}, ${8:U}, ${9:Omega}, ${10:nper}, ${11:icsize}, ${12:icindex})$0",
"description": "function [Phi,icsize] = icrf(T,R,K,Z,H,D,U,Omega,nper,icsize,icindex) %#ok<INUSL>" 
},
"multiplierea": {
"prefix": "multiplierea",
"body": "${1:[DyDe, DaDe, DfDe] = }multiplierea(${2:T}, ${3:R}, ${4:K}, ${5:Z}, ${6:H}, ${7:D}, ${8:U}, ${9:last}, ${10:active})$0",
"description": "function [DyDe,DaDe,DfDe] = multiplierea(T,R,K,Z,H,D,U,last,active)" 
},
"multipliereu": {
"prefix": "multipliereu",
"body": "${1:[DyDe, DaDe, DfDe] = }multipliereu(${2:T}, ${3:R}, ${4:K}, ${5:Z}, ${6:H}, ${7:D}, ${8:U}, ${9:last}, ${10:active})$0",
"description": "function [DyDe,DaDe,DfDe] = multipliereu(T,R,K,Z,H,D,U,last,active)" 
},
"multiplierinit": {
"prefix": "multiplierinit",
"body": "${1:[DyDa0, DaDa0, DfDa0] = }multiplierinit(${2:T}, ${3:R}, ${4:K}, ${5:Z}, ${6:H}, ${7:D}, ${8:U}, ${9:last}, ${10:active})$0",
"description": "function [DyDa0,DaDa0,DfDa0] = multiplierinit(T,R,K,Z,H,D,U,last,active)" 
},
"simulatemean": {
"prefix": "simulatemean",
"body": "${1:[Y, W, E] = }simulatemean(${2:T}, ${3:R}, ${4:K}, ${5:Z}, ${6:H}, ${7:D})$0",
"description": "function [Y,W,E] = simulatemean(T,R,K,Z,H,D,~,A0,E,Nper,Ant,Dev,Q,q)" 
},
"srf_V1": {
"prefix": "srf_V1",
"body": "${1:[Phi, ShkSize] = }srf(${2:T}, ${3:R})$0",
"description": "function [Phi,ShkSize] = srf(T,R,~,Z,H,~,U,~,NPer,ShkSize)" 
},
"var2vma": {
"prefix": "var2vma",
"body": "${1:Phi = }var2vma(${2:A}, ${3:B}, ${4:NPer}, ${5:Select})$0",
"description": "function Phi = var2vma(A,B,NPer,Select)" 
},
"varsmoother": {
"prefix": "varsmoother",
"body": "${1:[X2, Px2, E, U, Y2, Py2, YInx, Y0, F, Y1, Py1] = }varsmoother(${2:A}, ${3:B}, ${4:K}, ${5:Z}, ${6:D}, ${7:Omg}, ${8:Sgm}, ${9:y}, ${10:E}, ${11:x0}, ${12:P0}, ${13:S})$0",
"description": "function [X2,Px2,E,U,Y2,Py2,YInx,Y0,F,Y1,Py1] = varsmoother(A,B,K,Z,D,Omg,Sgm,y,E,x0,P0,S)" 
},
"altersubs": {
"prefix": "altersubs",
"body": "${1:s = }altersubs(${2:s}, ${3:n}, ${4:obj})$0",
"description": "function s = altersubs(s,n,obj)" 
},
"any2str": {
"prefix": "any2str",
"body": "${1:c = }any2str(${2:x}, ${3:prec})$0",
"description": "function c = any2str(x,prec)" 
},
"autosubplot": {
"prefix": "autosubplot",
"body": "${1:varargout = }autosubplot(${2:npanel})$0",
"description": "function varargout = autosubplot(npanel)" 
},
"cell2csv_V2": {
"prefix": "cell2csv_V2",
"body": "cell2csv(${2:C}, ${3:FNAME}, ${4:varargin})$0",
"description": "function cell2csv(C,FNAME,varargin)" 
},
"datacursor": {
"prefix": "datacursor",
"body": "${1:Text = }datacursor$0",
"description": "function Text = datacursor(~,Obj)" 
},
"displaystack": {
"prefix": "displaystack",
"body": "${1:C = }displaystack(${2:Stack})$0",
"description": "function C = displaystack(Stack)" 
},
"error_V1": {
"prefix": "error_V1",
"body": "${1:varargout = }error(${2:Mnemonic}, ${3:Body}, ${4:varargin})$0",
"description": "function varargout = error(Mnemonic,Body,varargin)" 
},
"findlast": {
"prefix": "findlast",
"body": "${1:POS = }findlast(${2:X})$0",
"description": "function POS = findlast(X)" 
},
"getstack": {
"prefix": "getstack",
"body": "${1:Stack = }getstack$0",
"description": "function Stack = getstack()" 
},
"iff_V2": {
"prefix": "iff_V2",
"body": "${1:X = }iff(${2:Cond}, ${3:IfTrue}, ${4:IfFalse})$0",
"description": "function X = iff(Cond,IfTrue,IfFalse)" 
},
"nameselection": {
"prefix": "nameselection",
"body": "${1:index = }nameselection(${2:n}, ${3:list}, ${4:usrselect})$0",
"description": "function index = nameselection(n,list,usrselect)" 
},
"ndprop": {
"prefix": "ndprop",
"body": "${1:list = }ndprop(${2:obj})$0",
"description": "function list = ndprop(obj)" 
},
"printpdf": {
"prefix": "printpdf",
"body": "printpdf(${2:FILENAME})$0",
"description": "function printpdf(FILENAME)" 
},
"savecsvdata": {
"prefix": "savecsvdata",
"body": "savecsvdata(${2:O}, ${3:FName})$0",
"description": "function savecsvdata(O,FName)" 
},
"warning": {
"prefix": "warning",
"body": "warning(${2:Memo}, ${3:Body}, ${4:varargin})$0",
"description": "function warning(Memo,Body,varargin)" 
},
"codecreator": {
"prefix": "codecreator",
"body": "${1:This = }codecreator(${2:varargin})$0",
"description": "function This = codecreator(varargin)" 
},
"esttime": {
"prefix": "esttime",
"body": "${1:this = }esttime(${2:varargin})$0",
"description": "function this = esttime(varargin)" 
},
"progressbar_V1": {
"prefix": "progressbar_V1",
"body": "${1:this = }progressbar(${2:varargin})$0",
"description": "function this = progressbar(varargin)" 
},
"FAVAR_V2": {
"prefix": "FAVAR_V2",
"body": "${1:This = }FAVAR(${2:varargin})$0",
"description": "function This = FAVAR(varargin)" 
},
"VAR_V2": {
"prefix": "VAR_V2",
"body": "${1:w = }VAR(${2:f})$0",
"description": "function w = VAR(f)" 
},
"cc": {
"prefix": "cc",
"body": "${1:[Q, PQ] = }cc(${2:C}, ${3:X}, ${4:PX})$0",
"description": "function [Q,PQ] = cc(C,X,PX)" 
},
"destandardise": {
"prefix": "destandardise",
"body": "${1:[y, Py] = }destandardise(${2:ymean}, ${3:ystd}, ${4:y}, ${5:Py})$0",
"description": "function [y,Py] = destandardise(ymean,ystd,y,Py)" 
},
"eig_V1": {
"prefix": "eig_V1",
"body": "${1:e = }eig(${2:a})$0",
"description": "function e = eig(a)" 
},
"estimate_V1": {
"prefix": "estimate_V1",
"body": "${1:[This, D, CC, FF, U, E, CTF, Rng] = }estimate(${2:This}, ${3:varargin})$0",
"description": "function [This,D,CC,FF,U,E,CTF,Rng] = estimate(This,varargin)" 
},
"estimatevar": {
"prefix": "estimatevar",
"body": "${1:[A, B, Omega, T, U, u, fitted] = }estimatevar(${2:x}, ${3:p}, ${4:q})$0",
"description": "function [A,B,Omega,T,U,u,fitted] = estimatevar(x,p,q)" 
},
"filter_V1": {
"prefix": "filter_V1",
"body": "${1:[This, D, CC, F, U, E] = }filter(${2:This}, ${3:Inp}, ${4:Range}, ${5:varargin})$0",
"description": "function [This,D,CC,F,U,E] = filter(This,Inp,Range,varargin)" 
},
"forecast_V1": {
"prefix": "forecast_V1",
"body": "${1:[D, CC, F, U, E] = }forecast(${2:This}, ${3:Inp}, ${4:Range}, ${5:J}, ${6:varargin})$0",
"description": "function [D,CC,F,U,E] = forecast(This,Inp,Range,J,varargin)" 
},
"mean_V1": {
"prefix": "mean_V1",
"body": "${1:x = }mean(${2:this})$0",
"description": "function x = mean(this)" 
},
"pc_V1": {
"prefix": "pc_V1",
"body": "${1:[X, C, E, Sgm, Sing, Sample, CTF] = }pc(${2:Y}, ${3:Crit}, ${4:Method})$0",
"description": "function [X,C,E,Sgm,Sing,Sample,CTF] = pc(Y,Crit,Method)" 
},
"standardise": {
"prefix": "standardise",
"body": "${1:[this, y] = }standardise(${2:this}, ${3:y})$0",
"description": "function [this,y] = standardise(this,y)" 
},
"SVAR_V2": {
"prefix": "SVAR_V2",
"body": "${1:This = }SVAR(${2:varargin})$0",
"description": "function This = SVAR(varargin)" 
},
"companion_V1": {
"prefix": "companion_V1",
"body": "${1:varargout = }companion(${2:This}, ${3:varargin})$0",
"description": "function varargout = companion(This,varargin)" 
},
"fevd_V2": {
"prefix": "fevd_V2",
"body": "${1:[X, Y, XX, YY] = }fevd(${2:This}, ${3:Time})$0",
"description": "function [X,Y,XX,YY] = fevd(This,Time)" 
},
"fprintf_V1": {
"prefix": "fprintf_V1",
"body": "${1:[C, D] = }fprintf(${2:This}, ${3:FName}, ${4:varargin})$0",
"description": "function [C,D] = fprintf(This,FName,varargin)" 
},
"get_V2": {
"prefix": "get_V2",
"body": "${1:varargout = }get(${2:varargin})$0",
"description": "function varargout = get(varargin)" 
},
"myidentify": {
"prefix": "myidentify",
"body": "${1:[This, Data, B, Count] = }myidentify(${2:This}, ${3:Data}, ${4:Opt})$0",
"description": "function [This,Data,B,Count] = myidentify(This,Data,Opt)" 
},
"mysystem_V1": {
"prefix": "mysystem_V1",
"body": "${1:[A, B, K, Omg, alt] = }mysystem(${2:this}, ${3:varargin})$0",
"description": "function [A,B,K,Omg,alt] = mysystem(this,varargin)" 
},
"mywoonvav": {
"prefix": "mywoonvav",
"body": "${1:[H, IsY] = }mywoonvav(${2:this}, ${3:c})$0",
"description": "function [H,IsY] = mywoonvav(this,c)" 
},
"sort_V1": {
"prefix": "sort_V1",
"body": "${1:[This, Data, Inx, Crit] = }sort(${2:This}, ${3:Data}, ${4:SortBy}, ${5:varargin})$0",
"description": "function [This,Data,Inx,Crit] = sort(This,Data,SortBy,varargin)" 
},
"specdisp_V1": {
"prefix": "specdisp_V1",
"body": "specdisp(${2:This})$0",
"description": "function specdisp(This)" 
},
"sprintf_V1": {
"prefix": "sprintf_V1",
"body": "${1:[Code, D] = }sprintf(${2:This}, ${3:varargin})$0",
"description": "function [Code,D] = sprintf(This,varargin)" 
},
"srf_V2": {
"prefix": "srf_V2",
"body": "${1:[S, C, S1, C1] = }srf(${2:This}, ${3:Time}, ${4:varargin})$0",
"description": "function [S,C,S1,C1] = srf(This,Time,varargin)" 
},
"sspace_V1": {
"prefix": "sspace_V1",
"body": "${1:[T, R, k, Z, H, d, U, Omg] = }sspace(${2:This}, ${3:varargin})$0",
"description": "function [T,R,k,Z,H,d,U,Omg] = sspace(This,varargin)" 
},
"SVAR_V3": {
"prefix": "SVAR_V3",
"body": "${1:[This, Data, B, Count] = }SVAR(${2:V}, ${3:Data}, ${4:varargin})$0",
"description": "function [This,Data,B,Count] = SVAR(V,Data,varargin)" 
},
"VAR_V3": {
"prefix": "VAR_V3",
"body": "${1:This = }VAR(${2:varargin})$0",
"description": "function This = VAR(varargin)" 
},
"acf_V1": {
"prefix": "acf_V1",
"body": "${1:[C, Q] = }acf(${2:This}, ${3:varargin})$0",
"description": "function [C,Q] = acf(This,varargin)" 
},
"alter_V1": {
"prefix": "alter_V1",
"body": "${1:This = }alter(${2:This}, ${3:N})$0",
"description": "function This = alter(This,N)" 
},
"backward": {
"prefix": "backward",
"body": "${1:This = }backward(${2:This})$0",
"description": "function This = backward(This)" 
},
"companion_V2": {
"prefix": "companion_V2",
"body": "${1:[A, B, K] = }companion(${2:This}, ${3:varargin})$0",
"description": "function [A,B,K] = companion(This,varargin)" 
},
"demean_V1": {
"prefix": "demean_V1",
"body": "${1:This = }demean(${2:This})$0",
"description": "function This = demean(This)" 
},
"eig_V2": {
"prefix": "eig_V2",
"body": "${1:EigVal = }eig(${2:This})$0",
"description": "function EigVal = eig(This)" 
},
"end_V2": {
"prefix": "end_V2",
"body": "${1:n = }end(${2:this}, ${3:k}, ${4:n})$0",
"description": "function n = end(this,k,n)" 
},
"estimate_V2": {
"prefix": "estimate_V2",
"body": "${1:[This, Outp, DatFitted, Rr, Count] = }estimate(${2:This}, ${3:Inp}, ${4:varargin})$0",
"description": "function [This,Outp,DatFitted,Rr,Count] = estimate(This,Inp,varargin)" 
},
"ferf": {
"prefix": "ferf",
"body": "${1:[Phi, Psi, S, C] = }ferf(${2:This}, ${3:Time})$0",
"description": "function [Phi,Psi,S,C] = ferf(This,Time)" 
},
"filter_V2": {
"prefix": "filter_V2",
"body": "${1:[This, Outp] = }filter(${2:This}, ${3:Inp}, ${4:Range}, ${5:varargin})$0",
"description": "function [This,Outp] = filter(This,Inp,Range,varargin)" 
},
"fmse_V2": {
"prefix": "fmse_V2",
"body": "${1:[X, YNames, D] = }fmse(${2:This}, ${3:Time}, ${4:varargin})$0",
"description": "function [X,YNames,D] = fmse(This,Time,varargin)" 
},
"forecast_V2": {
"prefix": "forecast_V2",
"body": "${1:Outp = }forecast(${2:This}, ${3:Inp}, ${4:Range}, ${5:varargin})$0",
"description": "function Outp = forecast(This,Inp,Range,varargin)" 
},
"infocrit_V1": {
"prefix": "infocrit_V1",
"body": "${1:This = }infocrit(${2:This})$0",
"description": "function This = infocrit(This)" 
},
"instrument": {
"prefix": "instrument",
"body": "${1:This = }instrument(${2:This}, ${3:varargin})$0",
"description": "function This = instrument(This,varargin)" 
},
"integrate": {
"prefix": "integrate",
"body": "${1:This = }integrate(${2:This}, ${3:varargin})$0",
"description": "function This = integrate(This,varargin)" 
},
"isexplosive": {
"prefix": "isexplosive",
"body": "${1:Flag = }isexplosive(${2:This}, ${3:varargin})$0",
"description": "function Flag = isexplosive(This,varargin)" 
},
"isstationary_V1": {
"prefix": "isstationary_V1",
"body": "${1:Flag = }isstationary(${2:This}, ${3:varargin})$0",
"description": "function Flag = isstationary(This,varargin)" 
},
"lrtest": {
"prefix": "lrtest",
"body": "${1:[Stat, Crit] = }lrtest(${2:V1}, ${3:V2}, ${4:Level})$0",
"description": "function [Stat,Crit] = lrtest(V1,V2,Level)" 
},
"mean_V2": {
"prefix": "mean_V2",
"body": "${1:[YMean, YInit] = }mean(${2:This}, ${3:Alt})$0",
"description": "function [YMean,YInit] = mean(This,Alt)" 
},
"myfitted": {
"prefix": "myfitted",
"body": "${1:[This, Fitted, DatFitted] = }myfitted(${2:This}, ${3:Resid})$0",
"description": "function [This,Fitted,DatFitted] = myfitted(This,Resid)" 
},
"myglsq": {
"prefix": "myglsq",
"body": "${1:S = }myglsq(${2:S}, ${3:Opt})$0",
"description": "function S = myglsq(S,Opt)" 
},
"myglsqweights": {
"prefix": "myglsqweights",
"body": "${1:W = }myglsqweights(${2:This}, ${3:Opt})$0",
"description": "function W = myglsqweights(This,Opt)" 
},
"mygroupmethod": {
"prefix": "mygroupmethod",
"body": "${1:Outp = }mygroupmethod(${2:Func}, ${3:This}, ${4:Inp}, ${5:varargin})$0",
"description": "function Outp = mygroupmethod(Func,This,Inp,varargin)" 
},
"myisvalidinpdata": {
"prefix": "myisvalidinpdata",
"body": "${1:Flag = }myisvalidinpdata(${2:This}, ${3:Inp})$0",
"description": "function Flag = myisvalidinpdata(This,Inp)" 
},
"myprealloc": {
"prefix": "myprealloc",
"body": "${1:This = }myprealloc(${2:This}, ${3:Ny}, ${4:P}, ${5:Ng}, ${6:NXPer}, ${7:NLoop})$0",
"description": "function This = myprealloc(This,Ny,P,Ng,NXPer,NLoop)" 
},
"mystackdata": {
"prefix": "mystackdata",
"body": "${1:[Y0, K0, Y1, G1, CI, NGrp] = }mystackdata(${2:This}, ${3:Y}, ${4:Opt})$0",
"description": "function [Y0,K0,Y1,G1,CI,NGrp] = mystackdata(This,Y,Opt) %#ok<INUSL>" 
},
"mysystem_V2": {
"prefix": "mysystem_V2",
"body": "${1:[A, B, K, Omg, iAlt] = }mysystem(${2:This}, ${3:iAlt})$0",
"description": "function [A,B,K,Omg,iAlt] = mysystem(This,iAlt)" 
},
"portest": {
"prefix": "portest",
"body": "${1:[Stat, Crit] = }portest(${2:This}, ${3:Inp}, ${4:H}, ${5:varargin})$0",
"description": "function [Stat,Crit] = portest(This,Inp,H,varargin)" 
},
"restrict": {
"prefix": "restrict",
"body": "${1:[Rr, Qq] = }restrict(${2:NY}, ${3:NK}, ${4:NG}, ${5:Opt})$0",
"description": "function [Rr,Qq] = restrict(NY,NK,NG,Opt)" 
},
"rngcmp_V1": {
"prefix": "rngcmp_V1",
"body": "${1:Flag = }rngcmp(${2:V1}, ${3:V2})$0",
"description": "function Flag = rngcmp(V1,V2)" 
},
"saveobj_V1": {
"prefix": "saveobj_V1",
"body": "${1:v = }saveobj(${2:v})$0",
"description": "function v = saveobj(v)" 
},
"schur": {
"prefix": "schur",
"body": "${1:This = }schur(${2:This})$0",
"description": "function This = schur(This)" 
},
"simulate_V1": {
"prefix": "simulate_V1",
"body": "${1:Outp = }simulate(${2:This}, ${3:Inp}, ${4:Range}, ${5:varargin})$0",
"description": "function Outp = simulate(This,Inp,Range,varargin)" 
},
"sspace_V2": {
"prefix": "sspace_V2",
"body": "${1:[T, R, k, Z, H, d, U, Omg, Alt] = }sspace(${2:This}, ${3:varargin})$0",
"description": "function [T,R,k,Z,H,d,U,Omg,Alt] = sspace(This,varargin)" 
},
"subsasgn_V2": {
"prefix": "subsasgn_V2",
"body": "${1:This = }subsasgn(${2:This}, ${3:S}, ${4:X})$0",
"description": "function This = subsasgn(This,S,X)" 
},
"vma_V1": {
"prefix": "vma_V1",
"body": "${1:Phi = }vma(${2:This}, ${3:N})$0",
"description": "function Phi = vma(This,N)" 
},
"xsf_V2": {
"prefix": "xsf_V2",
"body": "${1:[S, D] = }xsf(${2:This}, ${3:Freq}, ${4:varargin})$0",
"description": "function [S,D] = xsf(This,Freq,varargin)" 
},
"minus_V1": {
"prefix": "minus_V1",
"body": "${1:x = }minus(${2:x}, ${3:y})$0",
"description": "function x = minus(x,y)" 
},
"mtimes_V1": {
"prefix": "mtimes_V1",
"body": "${1:this = }mtimes(${2:this}, ${3:list})$0",
"description": "function this = mtimes(this,list)" 
},
"nonunique_V2": {
"prefix": "nonunique_V2",
"body": "${1:list = }nonunique(${2:key})$0",
"description": "function list = nonunique(key)" 
},
"plus_V1": {
"prefix": "plus_V1",
"body": "${1:x = }plus(${2:x}, ${3:y})$0",
"description": "function x = plus(x,y)" 
},
"container_V1": {
"prefix": "container_V1",
"body": "${1:This = }container(${2:varargin})$0",
"description": "function This = container(varargin)" 
},
"request": {
"prefix": "request",
"body": "${1:varargout = }request(${2:action}, ${3:varargin})$0",
"description": "function varargout = request(action,varargin)" 
},
"container_V2": {
"prefix": "container_V2",
"body": "${1:X = }container(${2:This}, ${3:Inx})$0",
"description": "function X = container(This,Inx)" 
},
"dbcollect": {
"prefix": "dbcollect",
"body": "${1:This = }dbcollect(${2:varargin})$0",
"description": "function This = dbcollect(varargin)" 
},
"error_V2": {
"prefix": "error_V2",
"body": "${1:This = }error(${2:This}, ${3:Flag}, ${4:Catch})$0",
"description": "function This = error(This,Flag,Catch)" 
},
"legend": {
"prefix": "legend",
"body": "${1:L = }legend(${2:This})$0",
"description": "function L = legend(This)" 
},
"subsref_V2": {
"prefix": "subsref_V2",
"body": "${1:X = }subsref(${2:This}, ${3:varargin})$0",
"description": "function X = subsref(This,varargin)" 
},
"estimateobj_V2": {
"prefix": "estimateobj_V2",
"body": "estimateobj$0",
"description": "estimateobj" 
},
"mydiffprior": {
"prefix": "mydiffprior",
"body": "${1:[PropCov, Hess] = }mydiffprior(${2:This}, ${3:Data}, ${4:PStar}, ${5:Hess}, ${6:BHit}, ${7:Pri}, ${8:LikOpt}, ${9:Opt})$0",
"description": "function [PropCov,Hess] = mydiffprior(This,Data,PStar,Hess,BHit,Pri,LikOpt,Opt)" 
},
"myestimate": {
"prefix": "myestimate",
"body": "${1:[This, PStar, ObjStar, PCov, Hess] = }myestimate(${2:This}, ${3:Data}, ${4:Pri}, ${5:LikOpt}, ${6:Opt})$0",
"description": "function [This,PStar,ObjStar,PCov,Hess] = myestimate(This,Data,Pri,LikOpt,Opt)" 
},
"myparamstruct": {
"prefix": "myparamstruct",
"body": "${1:[Pri, E] = }myparamstruct(${2:This}, ${3:E}, ${4:SP}, ${5:Penalty}, ${6:varargin})$0",
"description": "function [Pri,E] = myparamstruct(This,E,SP,Penalty,varargin)" 
},
"neighbourhood": {
"prefix": "neighbourhood",
"body": "${1:[d, FigH, AxH, ObjH, LikH, EstH, BH] = }neighbourhood(${2:This}, ${3:POS}, ${4:Pct}, ${5:varargin})$0",
"description": "function [d,FigH,AxH,ObjH,LikH,EstH,BH] = neighbourhood(This,POS,Pct,varargin)" 
},
"objfunc": {
"prefix": "objfunc",
"body": "${1:[Obj, Lik, PP, SP] = }objfunc(${2:X}, ${3:This}, ${4:Data}, ${5:Pri}, ${6:LikOpt}, ${7:Opt})$0",
"description": "function [Obj,Lik,PP,SP] = objfunc(X,This,Data,Pri,LikOpt,Opt)" 
},
"getsetobj": {
"prefix": "getsetobj",
"body": "${1:This = }getsetobj(${2:varargin})$0",
"description": "function This = getsetobj(varargin)" 
},
"myalias": {
"prefix": "myalias",
"body": "${1:Query = }myalias(${2:Query})$0",
"description": "function Query = myalias(Query)" 
},
"hdata2tseries": {
"prefix": "hdata2tseries",
"body": "${1:D = }hdata2tseries(${2:This}, ${3:Obj}, ${4:Range})$0",
"description": "function D = hdata2tseries(This,Obj,Range)" 
},
"hdataassign": {
"prefix": "hdataassign",
"body": "hdataassign(${2:This}, ${3:Obj}, ${4:varargin})$0",
"description": "function hdataassign(This,Obj,varargin)" 
},
"hdatafinal": {
"prefix": "hdatafinal",
"body": "${1:D = }hdatafinal(${2:Y}, ${3:This}, ${4:Range})$0",
"description": "function D = hdatafinal(Y,This,Range)" 
},
"hdatainit": {
"prefix": "hdatainit",
"body": "hdatainit(${2:This}, ${3:Obj}, ${4:Flags}, ${5:NPer}, ${6:varargin})$0",
"description": "function hdatainit(This,Obj,Flags,NPer,varargin)" 
},
"hdataobj": {
"prefix": "hdataobj",
"body": "${1:This = }hdataobj(${2:varargin})$0",
"description": "function This = hdataobj(varargin)" 
},
"VAR_V4": {
"prefix": "VAR_V4",
"body": "${1:V = }VAR(${2:This}, ${3:Select}, ${4:Range}, ${5:varargin})$0",
"description": "function V = VAR(This,Select,Range,varargin)" 
},
"acf_V2": {
"prefix": "acf_V2",
"body": "${1:[CC, RR, List] = }acf(${2:This}, ${3:varargin})$0",
"description": "function [CC,RR,List] = acf(This,varargin)" 
},
"alter_V2": {
"prefix": "alter_V2",
"body": "${1:This = }alter(${2:This}, ${3:n})$0",
"description": "function This = alter(This,n)" 
},
"assign_V2": {
"prefix": "assign_V2",
"body": "${1:[This, varargout] = }assign(${2:varargin})$0",
"description": "function [This,varargout] = assign(varargin)" 
},
"autoexogenise_V2": {
"prefix": "autoexogenise_V2",
"body": "${1:varargout = }autoexogenise(${2:This}, ${3:varargin})$0",
"description": "function varargout = autoexogenise(This,varargin)" 
},
"bn": {
"prefix": "bn",
"body": "${1:Outp = }bn(${2:This}, ${3:Inp}, ${4:Range}, ${5:varargin})$0",
"description": "function Outp = bn(This,Inp,Range,varargin)" 
},
"chk": {
"prefix": "chk",
"body": "${1:[Flag, Inx] = }chk(${2:This}, ${3:IAlt}, ${4:varargin})$0",
"description": "function [Flag,Inx] = chk(This,IAlt,varargin)" 
},
"chksolution": {
"prefix": "chksolution",
"body": "${1:dev = }chksolution(${2:m}, ${3:ialt})$0",
"description": "function dev = chksolution(m,ialt)" 
},
"chksstate": {
"prefix": "chksstate",
"body": "${1:[Flag, varargout] = }chksstate(${2:This}, ${3:varargin})$0",
"description": "function [Flag,varargout] = chksstate(This,varargin)" 
},
"data4lhsmrhs": {
"prefix": "data4lhsmrhs",
"body": "${1:[YXE, List, XRange] = }data4lhsmrhs(${2:This}, ${3:D}, ${4:Range})$0",
"description": "function [YXE,List,XRange] = data4lhsmrhs(This,D,Range)" 
},
"dataformat": {
"prefix": "dataformat",
"body": "${1:inputformat = }dataformat(${2:x}, ${3:throwError})$0",
"description": "function inputformat = dataformat(x,throwError)" 
},
"datarequest": {
"prefix": "datarequest",
"body": "${1:varargout = }datarequest(${2:Req}, ${3:This}, ${4:Data}, ${5:Range}, ${6:IData}, ${7:LoglikOpt})$0",
"description": "function varargout = datarequest(Req,This,Data,Range,IData,LoglikOpt)" 
},
"diffloglik": {
"prefix": "diffloglik",
"body": "${1:[MinusLogLik, Grad, Hess, V] = }diffloglik(${2:This}, ${3:Data}, ${4:Range}, ${5:PList}, ${6:varargin})$0",
"description": "function [MinusLogLik,Grad,Hess,V] = diffloglik(This,Data,Range,PList,varargin)" 
},
"diffsrf": {
"prefix": "diffsrf",
"body": "${1:[s, m] = }diffsrf(${2:m}, ${3:time}, ${4:plist}, ${5:varargin})$0",
"description": "function [s,m] = diffsrf(m,time,plist,varargin)" 
},
"dp2db": {
"prefix": "dp2db",
"body": "${1:d = }dp2db(${2:this}, ${3:d}, ${4:varargin})$0",
"description": "function d = dp2db(this,d,varargin)" 
},
"eig_V3": {
"prefix": "eig_V3",
"body": "${1:eigval = }eig(${2:this}, ${3:alt})$0",
"description": "function eigval = eig(this,alt)" 
},
"end_V3": {
"prefix": "end_V3",
"body": "${1:n = }end(${2:m}, ${3:k}, ${4:n})$0",
"description": "function n = end(m,k,n)" 
},
"estimate_V3": {
"prefix": "estimate_V3",
"body": "${1:[PStar, Pos, PCov, Hess, This, V, Delta, PDelta, Delta1, PDelta1] = }estimate(${2:This}, ${3:Data}, ${4:Range}, ${5:E}, ${6:varargin})$0",
"description": "function [PStar,Pos,PCov,Hess,This,V,Delta,PDelta,Delta1,PDelta1] = estimate(This,Data,Range,E,varargin)" 
},
"evalsystempriors": {
"prefix": "evalsystempriors",
"body": "${1:[P, C, X] = }evalsystempriors(${2:This}, ${3:S})$0",
"description": "function [P,C,X] = evalsystempriors(This,S)" 
},
"expand": {
"prefix": "expand",
"body": "${1:m = }expand(${2:m}, ${3:k})$0",
"description": "function m = expand(m,k)" 
},
"failed": {
"prefix": "failed",
"body": "${1:varargout = }failed(${2:This}, ${3:SstateOk}, ${4:ChkSstateOk}, ${5:SstateErrorList}, ${6:NPath}, ${7:NanDeriv}, ${8:Sing2})$0",
"description": "function varargout = failed(This,SstateOk,ChkSstateOk,SstateErrorList, NPath,NanDeriv,Sing2)" 
},
"fevd_V3": {
"prefix": "fevd_V3",
"body": "${1:[X, Y, List, XX, YY] = }fevd(${2:This}, ${3:Time}, ${4:varargin})$0",
"description": "function [X,Y,List,XX,YY] = fevd(This,Time,varargin)" 
},
"ffrf_V2": {
"prefix": "ffrf_V2",
"body": "${1:[F, List] = }ffrf(${2:This}, ${3:Freq}, ${4:varargin})$0",
"description": "function [F,List] = ffrf(This,Freq,varargin)" 
},
"fieldnames": {
"prefix": "fieldnames",
"body": "${1:list = }fieldnames(${2:m})$0",
"description": "function list = fieldnames(m)" 
},
"filter_V3": {
"prefix": "filter_V3",
"body": "${1:[This, Outp, V, Delta, Pe, SCov] = }filter(${2:This}, ${3:Inp}, ${4:Range}, ${5:varargin})$0",
"description": "function [This,Outp,V,Delta,Pe,SCov] = filter(This,Inp,Range,varargin)" 
},
"findeqtn": {
"prefix": "findeqtn",
"body": "${1:varargout = }findeqtn(${2:This}, ${3:varargin})$0",
"description": "function varargout = findeqtn(This,varargin)" 
},
"findname": {
"prefix": "findname",
"body": "${1:varargout = }findname(${2:This}, ${3:varargin})$0",
"description": "function varargout = findname(This,varargin)" 
},
"fisher": {
"prefix": "fisher",
"body": "${1:[F, FF, Delta, Freq, G, Step] = }fisher(${2:This}, ${3:NPer}, ${4:PList}, ${5:varargin})$0",
"description": "function [F,FF,Delta,Freq,G,Step] = fisher(This,NPer,PList,varargin)" 
},
"fmse_V3": {
"prefix": "fmse_V3",
"body": "${1:[X, List, D] = }fmse(${2:This}, ${3:Time}, ${4:varargin})$0",
"description": "function [X,List,D] = fmse(This,Time,varargin)" 
},
"forecast_V3": {
"prefix": "forecast_V3",
"body": "${1:[func, fcon, Pi] = }forecast(${2:m}, ${3:init}, ${4:range}, ${5:varargin})$0",
"description": "function [func,fcon,Pi] = forecast(m,init,range,varargin)" 
},
"fprintf_V2": {
"prefix": "fprintf_V2",
"body": "${1:C = }fprintf(${2:This}, ${3:FName}, ${4:varargin})$0",
"description": "function C = fprintf(This,FName,varargin)" 
},
"i2model": {
"prefix": "i2model",
"body": "${1:[outputfile, c] = }i2model(${2:inputfile}, ${3:outputfile})$0",
"description": "function [outputfile,c] = i2model(inputfile,outputfile)" 
},
"icrf_V2": {
"prefix": "icrf_V2",
"body": "${1:[S, Range, Select] = }icrf(${2:This}, ${3:Time}, ${4:varargin})$0",
"description": "function [S,Range,Select] = icrf(This,Time,varargin)" 
},
"ifrf_V2": {
"prefix": "ifrf_V2",
"body": "${1:[W, List] = }ifrf(${2:This}, ${3:Freq}, ${4:varargin})$0",
"description": "function [W,List] = ifrf(This,Freq,varargin)" 
},
"isempty_V1": {
"prefix": "isempty_V1",
"body": "${1:flag = }isempty(${2:m})$0",
"description": "function flag = isempty(m)" 
},
"islinear": {
"prefix": "islinear",
"body": "${1:Flag = }islinear(${2:This})$0",
"description": "function Flag = islinear(This)" 
},
"islog": {
"prefix": "islog",
"body": "${1:Flag = }islog(${2:This}, ${3:Name})$0",
"description": "function Flag = islog(This,Name)" 
},
"isnan": {
"prefix": "isnan",
"body": "${1:[Flag, List] = }isnan(${2:This}, ${3:varargin})$0",
"description": "function [Flag,List] = isnan(This,varargin)" 
},
"issolved": {
"prefix": "issolved",
"body": "${1:flag = }issolved(${2:m})$0",
"description": "function flag = issolved(m)" 
},
"isstationary_V2": {
"prefix": "isstationary_V2",
"body": "${1:varargout = }isstationary(${2:This}, ${3:varargin})$0",
"description": "function varargout = isstationary(This,varargin)" 
},
"jforecast": {
"prefix": "jforecast",
"body": "${1:Outp = }jforecast(${2:This}, ${3:Inp}, ${4:Range}, ${5:varargin})$0",
"description": "function Outp = jforecast(This,Inp,Range,varargin)" 
},
"lhsmrhs": {
"prefix": "lhsmrhs",
"body": "${1:Q = }lhsmrhs(${2:This}, ${3:varargin})$0",
"description": "function Q = lhsmrhs(This,varargin)" 
},
"loglik": {
"prefix": "loglik",
"body": "${1:[Obj, V, F, Pe, Delta, PDelta] = }loglik(${2:This}, ${3:Data}, ${4:Range}, ${5:varargin})$0",
"description": "function [Obj,V,F,Pe,Delta,PDelta] = loglik(This,Data,Range,varargin)" 
},
"lognormal_V3": {
"prefix": "lognormal_V3",
"body": "${1:D = }lognormal(${2:This}, ${3:D}, ${4:varargin})$0",
"description": "function D = lognormal(This,D,varargin)" 
},
"loss": {
"prefix": "loss",
"body": "${1:[L1, L2] = }loss(${2:m}, ${3:Y})$0",
"description": "function [L1,L2] = loss(m,Y)" 
},
"model_V2": {
"prefix": "model_V2",
"body": "model$0",
"description": "model" 
},
"myaffectedeqtn": {
"prefix": "myaffectedeqtn",
"body": "${1:Affected = }myaffectedeqtn(${2:This}, ${3:iAlt}, ${4:Select}, ${5:Linear})$0",
"description": "function Affected = myaffectedeqtn(This,iAlt,Select,Linear)" 
},
"myalpha2xb": {
"prefix": "myalpha2xb",
"body": "${1:dpack = }myalpha2xb(${2:this}, ${3:dpack})$0",
"description": "function dpack = myalpha2xb(this,dpack)" 
},
"myanchors": {
"prefix": "myanchors",
"body": "${1:[YA, XA, EaReal, EaImag, YC, XC, QA, WReal, WImag] = }myanchors(${2:This}, ${3:P}, ${4:Range})$0",
"description": "function [YA,XA,EaReal,EaImag,YC,XC,QA,WReal,WImag] = myanchors(This,P,Range)" 
},
"myautoexogenise": {
"prefix": "myautoexogenise",
"body": "${1:[This, Invalid, NonUnique] = }myautoexogenise(${2:This}, ${3:Lhs}, ${4:Rhs})$0",
"description": "function [This,Invalid,NonUnique] = myautoexogenise(This,Lhs,Rhs)" 
},
"myblazer": {
"prefix": "myblazer",
"body": "${1:this = }myblazer(${2:this})$0",
"description": "function this = myblazer(this)" 
},
"mychksstate": {
"prefix": "mychksstate",
"body": "${1:[Discr, MaxAbsDiscr, Flag, List] = }mychksstate(${2:This}, ${3:Opt})$0",
"description": "function [Discr,MaxAbsDiscr,Flag,List] = mychksstate(This,Opt)" 
},
"mychksstateopt": {
"prefix": "mychksstateopt",
"body": "${1:Opt = }mychksstateopt(${2:This}, ${3:varargin})$0",
"description": "function Opt = mychksstateopt(This,varargin) %#ok<INUSL>" 
},
"myconsteqtn": {
"prefix": "myconsteqtn",
"body": "${1:Eqtn = }myconsteqtn(${2:This}, ${3:Eqtn})$0",
"description": "function Eqtn = myconsteqtn(This,Eqtn)" 
},
"mycopyobj": {
"prefix": "mycopyobj",
"body": "${1:Sub = }mycopyobj(${2:This}, ${3:Sub})$0",
"description": "function Sub = mycopyobj(This,Sub)" 
},
"myderiv": {
"prefix": "myderiv",
"body": "${1:[This, D, NanDeriv] = }myderiv(${2:This}, ${3:EqSelect}, ${4:IAlt}, ${5:Symbolic}, ${6:Linear})$0",
"description": "function [This,D,NanDeriv] = myderiv(This,EqSelect,IAlt,Symbolic,Linear)" 
},
"mydiffloglik": {
"prefix": "mydiffloglik",
"body": "${1:[MLL, Score, Info, Se2] = }mydiffloglik(${2:This}, ${3:Data}, ${4:Pri}, ${5:LikOpt}, ${6:Opt})$0",
"description": "function [MLL,Score,Info,Se2] = mydiffloglik(This,Data,Pri,LikOpt,Opt)" 
},
"mydtrends4lik": {
"prefix": "mydtrends4lik",
"body": "${1:[D, X] = }mydtrends4lik(${2:This}, ${3:TTrend}, ${4:PInx}, ${5:G}, ${6:IAlt})$0",
"description": "function [D,X] = mydtrends4lik(This,TTrend,PInx,G,IAlt)" 
},
"mydtrendsrequest": {
"prefix": "mydtrendsrequest",
"body": "${1:varargout = }mydtrendsrequest(${2:This}, ${3:Req}, ${4:Range}, ${5:G}, ${6:Alt})$0",
"description": "function varargout = mydtrendsrequest(This,Req,Range,G,Alt)" 
},
"myeqtn2afcn": {
"prefix": "myeqtn2afcn",
"body": "${1:This = }myeqtn2afcn(${2:This})$0",
"description": "function This = myeqtn2afcn(This)" 
},
"myestimstruct": {
"prefix": "myestimstruct",
"body": "${1:[S, FilterOpt] = }myestimstruct(${2:This}, ${3:E}, ${4:Pen}, ${5:FilterOpt}, ${6:varargin})$0",
"description": "function [S,FilterOpt] = myestimstruct(This,E,Pen,FilterOpt,varargin)" 
},
"myexpand": {
"prefix": "myexpand",
"body": "${1:[R, Y, Jk] = }myexpand(${2:R}, ${3:Y}, ${4:k}, ${5:Xa}, ${6:Xf}, ${7:Ru}, ${8:J}, ${9:Jk}, ${10:Yu})$0",
"description": "function [R,Y,Jk] = myexpand(R,Y,k,Xa,Xf,Ru,J,Jk,Yu)" 
},
"myfdlik": {
"prefix": "myfdlik",
"body": "${1:[Obj, RegOutp] = }myfdlik(${2:This}, ${3:Inp})$0",
"description": "function [Obj,RegOutp] = myfdlik(This,Inp,~,LikOpt)" 
},
"myfile2model": {
"prefix": "myfile2model",
"body": "${1:[This, A] = }myfile2model(${2:This}, ${3:FName}, ${4:Opt})$0",
"description": "function [This,A] = myfile2model(This,FName,Opt)" 
},
"myfind": {
"prefix": "myfind",
"body": "${1:varargout = }myfind(${2:This}, ${3:Caller}, ${4:varargin})$0",
"description": "function varargout = myfind(This,Caller,varargin)" 
},
"myfindoccur": {
"prefix": "myfindoccur",
"body": "${1:[Time, Name] = }myfindoccur(${2:This}, ${3:Eq}, ${4:Type})$0",
"description": "function [Time,Name] = myfindoccur(This,Eq,Type)" 
},
"myfindsspacepos": {
"prefix": "myfindsspacepos",
"body": "${1:[SspacePos, NamePos, SSpacePosLag, SspaceInx] = }myfindsspacepos(${2:This}, ${3:List}, ${4:varargin})$0",
"description": "function [SspacePos,NamePos,SSpacePosLag,SspaceInx] = myfindsspacepos(This,List,varargin)" 
},
"myforecastswap": {
"prefix": "myforecastswap",
"body": "${1:[M, Ma, N, Na] = }myforecastswap(${2:This}, ${3:IAlt}, ${4:Exi}, ${5:Endi}, ${6:Last})$0",
"description": "function [M,Ma,N,Na] = myforecastswap(This,IAlt,Exi,Endi,Last)" 
},
"myfourierdata": {
"prefix": "myfourierdata",
"body": "${1:I = }myfourierdata(${2:DATA}, ${3:OPT})$0",
"description": "function I = myfourierdata(DATA,OPT)" 
},
"myget": {
"prefix": "myget",
"body": "${1:Ans = }myget(${2:This}, ${3:Query})$0",
"description": "function Ans = myget(This,Query)" 
},
"mykalman": {
"prefix": "mykalman",
"body": "${1:[Obj, RegOutp, HData] = }mykalman(${2:This}, ${3:Inp}, ${4:HData}, ${5:Opt}, ${6:varargin})$0",
"description": "function [Obj,RegOutp,HData] = mykalman(This,Inp,HData,Opt,varargin)" 
},
"mykalmanregoutp": {
"prefix": "mykalmanregoutp",
"body": "${1:[F, Pe, V, Delta, PDelta, SampleCov, This] = }mykalmanregoutp(${2:This}, ${3:RegOutp}, ${4:XRange}, ${5:LikOpt})$0",
"description": "function [F,Pe,V,Delta,PDelta,SampleCov,This] = mykalmanregoutp(This,RegOutp,XRange,LikOpt)" 
},
"mymeta": {
"prefix": "mymeta",
"body": "${1:m = }mymeta(${2:m}, ${3:options})$0",
"description": "function m = mymeta(m,options)" 
},
"mymodel2model": {
"prefix": "mymodel2model",
"body": "${1:This = }mymodel2model(${2:This}, ${3:Assign}, ${4:Opt})$0",
"description": "function This = mymodel2model(This,Assign,Opt)" 
},
"mymse2var": {
"prefix": "mymse2var",
"body": "${1:dpk = }mymse2var(${2:dpk}, ${3:tol})$0",
"description": "function dpk = mymse2var(dpk,tol)" 
},
"mynonlineqtn": {
"prefix": "mynonlineqtn",
"body": "${1:This = }mynonlineqtn(${2:This})$0",
"description": "function This = mynonlineqtn(This)" 
},
"mynunit": {
"prefix": "mynunit",
"body": "${1:NUnit = }mynunit(${2:This}, ${3:IAlt})$0",
"description": "function NUnit = mynunit(This,IAlt)" 
},
"myoptpolicy": {
"prefix": "myoptpolicy",
"body": "${1:[NewEqtn, NewEqtnF, NewNonlin] = }myoptpolicy(${2:This}, ${3:LossPos}, ${4:LossDisc})$0",
"description": "function [NewEqtn,NewEqtnF,NewNonlin] = myoptpolicy(This,LossPos,LossDisc)" 
},
"myparse": {
"prefix": "myparse",
"body": "${1:[This, Assign] = }myparse(${2:This}, ${3:P}, ${4:Opt})$0",
"description": "function [This,Assign] = myparse(This,P,Opt)" 
},
"mypreploglik": {
"prefix": "mypreploglik",
"body": "${1:LikOpt = }mypreploglik(${2:This}, ${3:Range}, ${4:Dom}, ${5:Tune}, ${6:varargin})$0",
"description": "function LikOpt = mypreploglik(This,Range,Dom,Tune,varargin)" 
},
"myprepsimulate": {
"prefix": "myprepsimulate",
"body": "${1:S = }myprepsimulate(${2:This}, ${3:S}, ${4:IAlt})$0",
"description": "function S = myprepsimulate(This,S,IAlt)" 
},
"mypresimulate": {
"prefix": "mypresimulate",
"body": "${1:S = }mypresimulate(${2:This}, ${3:S}, ${4:IAlt})$0",
"description": "function S = mypresimulate(This,S,IAlt)" 
},
"myrange2ttrend": {
"prefix": "myrange2ttrend",
"body": "${1:TTrend = }myrange2ttrend(${2:This}, ${3:Range})$0",
"description": "function TTrend = myrange2ttrend(This,Range)" 
},
"myreshape": {
"prefix": "myreshape",
"body": "${1:X = }myreshape(${2:This}, ${3:XX})$0",
"description": "function X = myreshape(This,XX)" 
},
"myrf": {
"prefix": "myrf",
"body": "${1:[S, Range, Select] = }myrf(${2:This}, ${3:Time}, ${4:Func}, ${5:Select}, ${6:Opt})$0",
"description": "function [S,Range,Select] = myrf(This,Time,Func,Select,Opt)" 
},
"myselect": {
"prefix": "myselect",
"body": "${1:Inx = }myselect(${2:This}, ${3:TypeChar}, ${4:Select})$0",
"description": "function Inx = myselect(This,TypeChar,Select)" 
},
"myshocktypes": {
"prefix": "myshocktypes",
"body": "${1:[MShocks, TShocks] = }myshocktypes(${2:This})$0",
"description": "function [MShocks,TShocks] = myshocktypes(This)" 
},
"mysimulate_V1": {
"prefix": "mysimulate_V1",
"body": "${1:[S, ExitFlag, Discrep, AddFact] = }mysimulate(${2:S}, ${3:Opt})$0",
"description": "function [S,ExitFlag,Discrep,AddFact] = mysimulate(S,Opt)" 
},
"mysolve": {
"prefix": "mysolve",
"body": "${1:[This, NPath, NanDeriv, Sing1] = }mysolve(${2:This}, ${3:IAlt}, ${4:Opt}, ${5:ExpMatrices})$0",
"description": "function [This,NPath,NanDeriv,Sing1] = mysolve(This,IAlt,Opt,ExpMatrices)" 
},
"mysolvefail": {
"prefix": "mysolvefail",
"body": "${1:[Body, Args] = }mysolvefail(${2:This}, ${3:NPath}, ${4:NanDeriv}, ${5:Sing2})$0",
"description": "function [Body,Args] = mysolvefail(This,NPath,NanDeriv,Sing2)" 
},
"mysourcedb": {
"prefix": "mysourcedb",
"body": "${1:Outp = }mysourcedb(${2:This}, ${3:Range}, ${4:varargin})$0",
"description": "function Outp = mysourcedb(This,Range,varargin)" 
},
"mysspace": {
"prefix": "mysspace",
"body": "${1:[T, R, K, Z, H, D, U, Omg] = }mysspace(${2:This}, ${3:IAlt}, ${4:Expand})$0",
"description": "function [T,R,K,Z,H,D,U,Omg] = mysspace(This,IAlt,Expand)" 
},
"mysstatelinear": {
"prefix": "mysstatelinear",
"body": "${1:[This, Flag] = }mysstatelinear(${2:This}, ${3:Opt})$0",
"description": "function  [This,Flag] = mysstatelinear(This,Opt)" 
},
"mysstatenonlin": {
"prefix": "mysstatenonlin",
"body": "${1:[This, Success] = }mysstatenonlin(${2:This}, ${3:Opt})$0",
"description": "function  [This,Success] = mysstatenonlin(This,Opt)" 
},
"mysstateopt": {
"prefix": "mysstateopt",
"body": "${1:Opt = }mysstateopt(${2:This}, ${3:Mode}, ${4:varargin})$0",
"description": "function Opt = mysstateopt(This,Mode,varargin)" 
},
"mysstateswap": {
"prefix": "mysstateswap",
"body": "${1:This = }mysstateswap(${2:This}, ${3:Opt})$0",
"description": "function This = mysstateswap(This,Opt)" 
},
"mysymbdiff": {
"prefix": "mysymbdiff",
"body": "${1:This = }mysymbdiff(${2:This})$0",
"description": "function This = mysymbdiff(This)" 
},
"mysymbeqtn": {
"prefix": "mysymbeqtn",
"body": "${1:eqtn = }mysymbeqtn(${2:eqtn})$0",
"description": "function eqtn = mysymbeqtn(eqtn)" 
},
"mysystem_V3": {
"prefix": "mysystem_V3",
"body": "${1:[This, System] = }mysystem(${2:This}, ${3:Deriv}, ${4:EqSelect}, ${5:IAlt})$0",
"description": "function [This,System] = mysystem(This,Deriv,EqSelect,IAlt)" 
},
"mytrendarray": {
"prefix": "mytrendarray",
"body": "${1:X = }mytrendarray(${2:This}, ${3:Id}, ${4:TVec}, ${5:Delog}, ${6:iAlt})$0",
"description": "function X = mytrendarray(This,Id,TVec,Delog,iAlt)" 
},
"myupdatemodel": {
"prefix": "myupdatemodel",
"body": "${1:[This, UpdateOk] = }myupdatemodel(${2:This}, ${3:P}, ${4:Pri}, ${5:Opt}, ${6:ThrowErr}, ${7:ExpMat})$0",
"description": "function [This,UpdateOk] = myupdatemodel(This,P,Pri,Opt,ThrowErr,ExpMat)" 
},
"myvector": {
"prefix": "myvector",
"body": "${1:vec = }myvector(${2:this}, ${3:varargin})$0",
"description": "function vec = myvector(this,varargin)" 
},
"readnames": {
"prefix": "readnames",
"body": "${1:[name, nametype, shocktype, label, value] = }readnames(${2:block})$0",
"description": "function [name,nametype,shocktype,label,value] = readnames(block)" 
},
"refresh": {
"prefix": "refresh",
"body": "${1:This = }refresh(${2:This}, ${3:IAlt})$0",
"description": "function This = refresh(This,IAlt)" 
},
"regress_V1": {
"prefix": "regress_V1",
"body": "${1:[B, CovRes, R2] = }regress(${2:This}, ${3:Lhs}, ${4:Rhs}, ${5:varargin})$0",
"description": "function [B,CovRes,R2] = regress(This,Lhs,Rhs,varargin)" 
},
"reporting_V2": {
"prefix": "reporting_V2",
"body": "${1:D = }reporting(${2:This}, ${3:varargin})$0",
"description": "function D = reporting(This,varargin)" 
},
"set_V2": {
"prefix": "set_V2",
"body": "${1:This = }set(${2:This}, ${3:varargin})$0",
"description": "function This = set(This,varargin)" 
},
"shockplot": {
"prefix": "shockplot",
"body": "${1:[S, FF, AA] = }shockplot(${2:This}, ${3:ShockName}, ${4:SimRange}, ${5:PlotList}, ${6:varargin})$0",
"description": "function [S,FF,AA] = shockplot(This,ShockName,SimRange,PlotList,varargin)" 
},
"simulate_V2": {
"prefix": "simulate_V2",
"body": "${1:[Outp, ExitFlag, AddFact, Discrep] = }simulate(${2:This}, ${3:Inp}, ${4:Range}, ${5:varargin})$0",
"description": "function [Outp,ExitFlag,AddFact,Discrep] = simulate(This,Inp,Range,varargin)" 
},
"single_V1": {
"prefix": "single_V1",
"body": "${1:this = }single(${2:this})$0",
"description": "function this = single(this)" 
},
"solve": {
"prefix": "solve",
"body": "${1:[This, NPath, EigVal] = }solve(${2:This}, ${3:varargin})$0",
"description": "function [This,NPath,EigVal] = solve(This,varargin)" 
},
"sprintf_V2": {
"prefix": "sprintf_V2",
"body": "${1:C = }sprintf(${2:This}, ${3:varargin})$0",
"description": "function C = sprintf(This,varargin)" 
},
"srf_V3": {
"prefix": "srf_V3",
"body": "${1:[S, Range, Select] = }srf(${2:This}, ${3:Time}, ${4:varargin})$0",
"description": "function [S,Range,Select] = srf(This,Time,varargin)" 
},
"sspace_V3": {
"prefix": "sspace_V3",
"body": "${1:[T, R, K, Z, H, D, U, Omg, list] = }sspace(${2:m}, ${3:varargin})$0",
"description": "function [T,R,K,Z,H,D,U,Omg,list] = sspace(m,varargin)" 
},
"sstate_V2": {
"prefix": "sstate_V2",
"body": "${1:[This, Flag, NPath, EigVal] = }sstate(${2:This}, ${3:varargin})$0",
"description": "function [This,Flag,NPath,EigVal] = sstate(This,varargin)" 
},
"sstatedb": {
"prefix": "sstatedb",
"body": "${1:[D, Dev] = }sstatedb(${2:This}, ${3:Range}, ${4:varargin})$0",
"description": "function [D,Dev] = sstatedb(This,Range,varargin)" 
},
"sstatefile_V1": {
"prefix": "sstatefile_V1",
"body": "sstatefile(${2:this}, ${3:file}, ${4:varargin})$0",
"description": "function sstatefile(this,file,varargin)" 
},
"system": {
"prefix": "system",
"body": "${1:[A, B, C, D, F, G, H, J, List, NF, Deriv] = }system(${2:This}, ${3:Alt}, ${4:varargin})$0",
"description": "function [A,B,C,D,F,G,H,J,List,NF,Deriv] = system(This,Alt,varargin)" 
},
"tolerance": {
"prefix": "tolerance",
"body": "${1:varargout = }tolerance(${2:This}, ${3:varargin})$0",
"description": "function varargout = tolerance(This,varargin)" 
},
"vma_V2": {
"prefix": "vma_V2",
"body": "${1:[Phi, List] = }vma(${2:This}, ${3:NPer}, ${4:varargin})$0",
"description": "function [Phi,List] = vma(This,NPer,varargin)" 
},
"xsf_V3": {
"prefix": "xsf_V3",
"body": "${1:[S, D, List, Freq] = }xsf(${2:This}, ${3:Freq}, ${4:varargin})$0",
"description": "function [S,D,List,Freq] = xsf(This,Freq,varargin)" 
},
"zerodb": {
"prefix": "zerodb",
"body": "${1:[D, Dev] = }zerodb(${2:This}, ${3:Range}, ${4:varargin})$0",
"description": "function [D,Dev] = zerodb(This,Range,varargin)" 
},
"warning__V1": {
"prefix": "warning__V1",
"body": "warning_(${2:code}, ${3:varargin})$0",
"description": "function warning_(code,varargin)" 
},
"assign_V3": {
"prefix": "assign_V3",
"body": "${1:[This, Assigned] = }assign(${2:This}, ${3:varargin})$0",
"description": "function [This,Assigned] = assign(This,varargin)" 
},
"emptydb": {
"prefix": "emptydb",
"body": "${1:D = }emptydb(${2:This})$0",
"description": "function D = emptydb(This)" 
},
"export_V2": {
"prefix": "export_V2",
"body": "export(${2:This})$0",
"description": "function export(This)" 
},
"isname": {
"prefix": "isname",
"body": "${1:varargout = }isname(${2:M}, ${3:varargin})$0",
"description": "function varargout = isname(M,varargin)" 
},
"modelobj": {
"prefix": "modelobj",
"body": "${1:This = }modelobj(${2:varargin})$0",
"description": "function This = modelobj(varargin)" 
},
"mycombinestdcorr": {
"prefix": "mycombinestdcorr",
"body": "${1:Stdcorr = }mycombinestdcorr(${2:ThisStdcorr}, ${3:UsrStdcorr}, ${4:NPer})$0",
"description": "function Stdcorr = mycombinestdcorr(ThisStdcorr,UsrStdcorr,NPer)" 
},
"mycorrnames": {
"prefix": "mycorrnames",
"body": "${1:List = }mycorrnames(${2:This})$0",
"description": "function List = mycorrnames(This)" 
},
"mynameindex": {
"prefix": "mynameindex",
"body": "${1:[AssignInx, StdcorrInx] = }mynameindex(${2:Name}, ${3:EList}, ${4:String})$0",
"description": "function [AssignInx,StdcorrInx] = mynameindex(Name,EList,String)" 
},
"mynameposition": {
"prefix": "mynameposition",
"body": "${1:[AssignPos, StdcorrPos] = }mynameposition(${2:This}, ${3:Input}, ${4:varargin})$0",
"description": "function [AssignPos,StdcorrPos] = mynameposition(This,Input,varargin)" 
},
"mystdcorrindex": {
"prefix": "mystdcorrindex",
"body": "${1:Inx = }mystdcorrindex(${2:This}, ${3:Name})$0",
"description": "function Inx = mystdcorrindex(This,Name)" 
},
"mytune2stdcorr": {
"prefix": "mytune2stdcorr",
"body": "${1:[StdcorrReal, StdcorrImag] = }mytune2stdcorr(${2:This}, ${3:Range}, ${4:J}, ${5:Opt}, ${6:varargin})$0",
"description": "function [StdcorrReal,StdcorrImag] = mytune2stdcorr(This,Range,J,Opt,varargin)" 
},
"omega": {
"prefix": "omega",
"body": "${1:varargout = }omega(${2:This}, ${3:Omg}, ${4:IAlt})$0",
"description": "function varargout = omega(This,Omg,IAlt)" 
},
"size_V1": {
"prefix": "size_V1",
"body": "${1:N = }size(${2:M})$0",
"description": "function N = size(M)" 
},
"stdscale": {
"prefix": "stdscale",
"body": "${1:m = }stdscale(${2:m}, ${3:factor})$0",
"description": "function m = stdscale(m,factor)" 
},
"subsasgn_V3": {
"prefix": "subsasgn_V3",
"body": "${1:This = }subsasgn(${2:This}, ${3:S}, ${4:B})$0",
"description": "function This = subsasgn(This,S,B)" 
},
"subsref_V3": {
"prefix": "subsref_V3",
"body": "${1:X = }subsref(${2:This}, ${3:S})$0",
"description": "function X = subsref(This,S)" 
},
"colnames": {
"prefix": "colnames",
"body": "${1:x = }colnames(${2:this})$0",
"description": "function x = colnames(this)" 
},
"cutoff": {
"prefix": "cutoff",
"body": "${1:[COF, COP] = }cutoff(${2:F}, ${3:Freq}, ${4:COG})$0",
"description": "function [COF,COP] = cutoff(F,Freq,COG)" 
},
"horzcat_V1": {
"prefix": "horzcat_V1",
"body": "${1:varargout = }horzcat(${2:varargin})$0",
"description": "function varargout = horzcat(varargin)" 
},
"namedmat": {
"prefix": "namedmat",
"body": "${1:this = }namedmat(${2:x}, ${3:varargin})$0",
"description": "function this = namedmat(x,varargin)" 
},
"rownames": {
"prefix": "rownames",
"body": "${1:x = }rownames(${2:this})$0",
"description": "function x = rownames(this)" 
},
"select_V1": {
"prefix": "select_V1",
"body": "${1:[This, Pos] = }select(${2:This}, ${3:RowSelect}, ${4:ColSelect})$0",
"description": "function [This,Pos] = select(This,RowSelect,ColSelect)" 
},
"subsasgn_V4": {
"prefix": "subsasgn_V4",
"body": "${1:varargout = }subsasgn(${2:this}, ${3:varargin})$0",
"description": "function varargout = subsasgn(this,varargin)" 
},
"subsref_V4": {
"prefix": "subsref_V4",
"body": "${1:x = }subsref(${2:this}, ${3:varargin})$0",
"description": "function x = subsref(this,varargin)" 
},
"transpose": {
"prefix": "transpose",
"body": "${1:This = }transpose(${2:This})$0",
"description": "function This = transpose(This)" 
},
"vertcat_V1": {
"prefix": "vertcat_V1",
"body": "${1:varargout = }vertcat(${2:varargin})$0",
"description": "function varargout = vertcat(varargin)" 
},
"autoexogenise_V3": {
"prefix": "autoexogenise_V3",
"body": "${1:This = }autoexogenise(${2:This}, ${3:List}, ${4:Dates}, ${5:Weight})$0",
"description": "function This = autoexogenise(This,List,Dates,Weight)" 
},
"condition_V1": {
"prefix": "condition_V1",
"body": "${1:This = }condition(${2:This}, ${3:List}, ${4:Dates})$0",
"description": "function This = condition(This,List,Dates)" 
},
"detail_V1": {
"prefix": "detail_V1",
"body": "detail(${2:This}, ${3:Data})$0",
"description": "function detail(This,Data)" 
},
"endogenise": {
"prefix": "endogenise",
"body": "${1:This = }endogenise(${2:This}, ${3:List}, ${4:Dates}, ${5:Weight})$0",
"description": "function This = endogenise(This,List,Dates,Weight)" 
},
"exogenise": {
"prefix": "exogenise",
"body": "${1:This = }exogenise(${2:This}, ${3:List}, ${4:Dates}, ${5:Flag})$0",
"description": "function This = exogenise(This,List,Dates,Flag)" 
},
"isempty_V2": {
"prefix": "isempty_V2",
"body": "${1:flag = }isempty(${2:this}, ${3:query})$0",
"description": "function flag = isempty(this,query)" 
},
"mydateindex": {
"prefix": "mydateindex",
"body": "${1:[x, outofrange] = }mydateindex(${2:this}, ${3:dates})$0",
"description": "function [x,outofrange] = mydateindex(this,dates)" 
},
"nnzcond": {
"prefix": "nnzcond",
"body": "${1:n = }nnzcond(${2:this})$0",
"description": "function n = nnzcond(this)" 
},
"nnzendog": {
"prefix": "nnzendog",
"body": "${1:[n, nreal, nimag] = }nnzendog(${2:this})$0",
"description": "function [n,nreal,nimag] = nnzendog(this)" 
},
"nnzexog": {
"prefix": "nnzexog",
"body": "${1:n = }nnzexog(${2:this})$0",
"description": "function n = nnzexog(this)" 
},
"nnznonlin": {
"prefix": "nnznonlin",
"body": "${1:N = }nnznonlin(${2:This})$0",
"description": "function N = nnznonlin(This)" 
},
"nonlinearise": {
"prefix": "nonlinearise",
"body": "${1:This = }nonlinearise(${2:This}, ${3:varargin})$0",
"description": "function This = nonlinearise(This,varargin)" 
},
"plan": {
"prefix": "plan",
"body": "${1:This = }plan(${2:varargin})$0",
"description": "function This = plan(varargin)" 
},
"subsref_V5": {
"prefix": "subsref_V5",
"body": "${1:This = }subsref(${2:This}, ${3:S})$0",
"description": "function This = subsref(This,S)" 
},
"arwm": {
"prefix": "arwm",
"body": "${1:varargout = }arwm(${2:This}, ${3:NDraw}, ${4:varargin})$0",
"description": "function varargout = arwm(This,NDraw,varargin)" 
},
"eval": {
"prefix": "eval",
"body": "${1:varargout = }eval(${2:This}, ${3:varargin})$0",
"description": "function varargout = eval(This,varargin)" 
},
"myksdensity": {
"prefix": "myksdensity",
"body": "${1:[X, Y] = }myksdensity(${2:THETA}, ${3:LOW}, ${4:HIGH})$0",
"description": "function [X,Y] = myksdensity(THETA,LOW,HIGH)" 
},
"mysimulate_V2": {
"prefix": "mysimulate_V2",
"body": "${1:varargout = }mysimulate(${2:This}, ${3:Caller}, ${4:Draw}, ${5:Opt})$0",
"description": "function varargout = mysimulate(This,Caller,Draw,Opt)" 
},
"poster_V2": {
"prefix": "poster_V2",
"body": "${1:This = }poster(${2:varargin})$0",
"description": "function This = poster(varargin)" 
},
"stats": {
"prefix": "stats",
"body": "${1:Stat = }stats(${2:This}, ${3:Theta}, ${4:varargin})$0",
"description": "function Stat = stats(This,Theta,varargin)" 
},
"alt2str": {
"prefix": "alt2str",
"body": "${1:S = }alt2str(${2:Alt}, ${3:Format}, ${4:To})$0",
"description": "function S = alt2str(Alt,Format,To)" 
},
"controls": {
"prefix": "controls",
"body": "${1:[C, Export] = }controls(${2:C}, ${3:D}, ${4:ErrorParsing}, ${5:Labels}, ${6:Export})$0",
"description": "function [C,Export] = controls(C,D,ErrorParsing,Labels,Export)" 
},
"export_V3": {
"prefix": "export_V3",
"body": "export(${2:OBJ}, ${3:C})$0",
"description": "function export(OBJ,C)" 
},
"grabcommentblk": {
"prefix": "grabcommentblk",
"body": "${1:C = }grabcommentblk(${2:Trace})$0",
"description": "function C = grabcommentblk(Trace)" 
},
"labeledexpr": {
"prefix": "labeledexpr",
"body": "${1:[List, Lab] = }labeledexpr(${2:List})$0",
"description": "function [List,Lab] = labeledexpr(List)" 
},
"labelsback": {
"prefix": "labelsback",
"body": "${1:C = }labelsback(${2:C}, ${3:Labels}, ${4:Format})$0",
"description": "function C = labelsback(C,Labels,Format)" 
},
"lincomb2vec": {
"prefix": "lincomb2vec",
"body": "${1:[Z, C] = }lincomb2vec(${2:S}, ${3:List})$0",
"description": "function [Z,C] = lincomb2vec(S,List)" 
},
"preparser_V2": {
"prefix": "preparser_V2",
"body": "${1:This = }preparser(${2:varargin})$0",
"description": "function This = preparser(varargin)" 
},
"protectlabels": {
"prefix": "protectlabels",
"body": "${1:[Code, Labels] = }protectlabels(${2:Code}, ${3:Labels})$0",
"description": "function [Code,Labels] = protectlabels(Code,Labels)" 
},
"pseudofunc": {
"prefix": "pseudofunc",
"body": "${1:[C, Invalid] = }pseudofunc(${2:C})$0",
"description": "function [C,Invalid] = pseudofunc(C)" 
},
"readcode": {
"prefix": "readcode",
"body": "${1:[Code, Labels, Export, Subs, Comment] = }readcode(${2:FileList}, ${3:Params}, ${4:Labels}, ${5:Export}, ${6:ParentFile}, ${7:RemoveComments})$0",
"description": "function [Code,Labels,Export,Subs,Comment] = readcode(FileList,Params,Labels,Export,ParentFile,RemoveComments)" 
},
"reporting_V3": {
"prefix": "reporting_V3",
"body": "${1:This = }reporting(${2:P})$0",
"description": "function This = reporting(P)" 
},
"saveas": {
"prefix": "saveas",
"body": "${1:C = }saveas(${2:P}, ${3:FName})$0",
"description": "function C = saveas(P,FName)" 
},
"substitute": {
"prefix": "substitute",
"body": "${1:[C, S, Leftover, Multiple, Undef] = }substitute(${2:C})$0",
"description": "function [C,S,Leftover,Multiple,Undef] = substitute(C)" 
},
"compile_V2": {
"prefix": "compile_V2",
"body": "${1:forblocks = }compile(${2:s}, ${3:outputfile}, ${4:varargin})$0",
"description": "function forblocks = compile(s,outputfile,varargin)" 
},
"parse_V1": {
"prefix": "parse_V1",
"body": "${1:s = }parse(${2:s}, ${3:p})$0",
"description": "function s = parse(s,p)" 
},
"specget": {
"prefix": "specget",
"body": "${1:[x, flag] = }specget(${2:this}, ${3:query})$0",
"description": "function [x,flag] = specget(this,query)" 
},
"sstate_V3": {
"prefix": "sstate_V3",
"body": "${1:This = }sstate(${2:InpFile}, ${3:varargin})$0",
"description": "function This = sstate(InpFile,varargin)" 
},
"standalonemfile": {
"prefix": "standalonemfile",
"body": "standalonemfile$0",
"description": "standalonemfile" 
},
"and": {
"prefix": "and",
"body": "${1:S = }and(${2:S1}, ${3:S2})$0",
"description": "function S = and(S1,S2)" 
},
"maxabs0_V1": {
"prefix": "maxabs0_V1",
"body": "${1:x = }maxabs0(${2:x}, ${3:y})$0",
"description": "function x = maxabs0(x,y)" 
},
"minus_V2": {
"prefix": "minus_V2",
"body": "${1:this = }minus(${2:this}, ${3:list})$0",
"description": "function this = minus(this,list)" 
},
"mtimes_V2": {
"prefix": "mtimes_V2",
"body": "${1:This = }mtimes(${2:This}, ${3:ist})$0",
"description": "function This = mtimes(This,ist)" 
},
"plus_V2": {
"prefix": "plus_V2",
"body": "${1:d = }plus(${2:d1}, ${3:d2})$0",
"description": "function d = plus(d1,d2)" 
},
"rmfieldmatch": {
"prefix": "rmfieldmatch",
"body": "${1:s = }rmfieldmatch(${2:s}, ${3:pattern})$0",
"description": "function s = rmfieldmatch(s,pattern)" 
},
"char_V2": {
"prefix": "char_V2",
"body": "${1:c = }char(${2:this}, ${3:flag})$0",
"description": "function c = char(this,flag)" 
},
"d": {
"prefix": "d",
"body": "${1:DF = }d(${2:Func}, ${3:K}, ${4:varargin})$0",
"description": "function DF = d(Func,K,varargin)" 
},
"diff_V2": {
"prefix": "diff_V2",
"body": "${1:this = }diff(${2:this}, ${3:wrt}, ${4:mode})$0",
"description": "function this = diff(this,wrt,mode)" 
},
"mydiff_V1": {
"prefix": "mydiff_V1",
"body": "${1:this = }mydiff(${2:this}, ${3:wrt})$0",
"description": "function this = mydiff(this,wrt)" 
},
"mydiffeqtn": {
"prefix": "mydiffeqtn",
"body": "${1:DEqtn = }mydiffeqtn(${2:Eqtn}, ${3:Mode}, ${4:NmOcc}, ${5:TmOcc}, ${6:Log}, ${7:varargin})$0",
"description": "function DEqtn = mydiffeqtn(Eqtn,Mode,NmOcc,TmOcc,Log,varargin)" 
},
"myeqtn2symb": {
"prefix": "myeqtn2symb",
"body": "${1:eqtn = }myeqtn2symb(${2:eqtn})$0",
"description": "function eqtn = myeqtn2symb(eqtn)" 
},
"myfunc": {
"prefix": "myfunc",
"body": "${1:y = }myfunc(${2:x})$0",
"description": "function y = myfunc(x)" 
},
"mysymb2eqtn": {
"prefix": "mysymb2eqtn",
"body": "${1:Eqtn = }mysymb2eqtn(${2:Eqtn})$0",
"description": "function Eqtn = mysymb2eqtn(Eqtn)" 
},
"parse_V2": {
"prefix": "parse_V2",
"body": "${1:This = }parse(${2:Func}, ${3:varargin})$0",
"description": "function This = parse(Func,varargin)" 
},
"reduce_V1": {
"prefix": "reduce_V1",
"body": "${1:This = }reduce(${2:This}, ${3:varargin})$0",
"description": "function This = reduce(This,varargin)" 
},
"sydney": {
"prefix": "sydney",
"body": "${1:This = }sydney(${2:varargin})$0",
"description": "function This = sydney(varargin)" 
},
"testme": {
"prefix": "testme",
"body": "testme$0",
"description": "function testme()" 
},
"detail_V2": {
"prefix": "detail_V2",
"body": "detail(${2:This})$0",
"description": "function detail(This)" 
},
"isempty_V3": {
"prefix": "isempty_V3",
"body": "${1:Flag = }isempty(${2:This}, ${3:varargin})$0",
"description": "function Flag = isempty(This,varargin)" 
},
"mydefinesystemfunc": {
"prefix": "mydefinesystemfunc",
"body": "${1:This = }mydefinesystemfunc(${2:This})$0",
"description": "function This = mydefinesystemfunc(This)" 
},
"prior": {
"prefix": "prior",
"body": "${1:This = }prior(${2:This}, ${3:Def}, ${4:PriorFunc}, ${5:varargin})$0",
"description": "function This = prior(This,Def,PriorFunc,varargin)" 
},
"systempriors_V2": {
"prefix": "systempriors_V2",
"body": "${1:This = }systempriors(${2:varargin})$0",
"description": "function This = systempriors(varargin)" 
},
"altsyntax": {
"prefix": "altsyntax",
"body": "${1:This = }altsyntax(${2:This})$0",
"description": "function This = altsyntax(This)" 
},
"evaltimesubs": {
"prefix": "evaltimesubs",
"body": "${1:[MAXT, MINT, INVALID, varargout] = }evaltimesubs(${2:varargin})$0",
"description": "function [MAXT,MINT,INVALID,varargout] = evaltimesubs(varargin)" 
},
"getalias": {
"prefix": "getalias",
"body": "${1:[Label, Alias] = }getalias(${2:Label})$0",
"description": "function [Label,Alias] = getalias(Label)" 
},
"model_V3": {
"prefix": "model_V3",
"body": "${1:This = }model(${2:This})$0",
"description": "function This = model(This)" 
},
"parse_V3": {
"prefix": "parse_V3",
"body": "${1:[S, Invalid] = }parse(${2:This}, ${3:Opt})$0",
"description": "function [S,Invalid] = parse(This,Opt)" 
},
"parseeqtns": {
"prefix": "parseeqtns",
"body": "${1:[Eqtn, EqtnLabel, EqtnLhs, EqtnRhs, EqtnSign, SstateLhs, SstateRhs, SstateSign] = }parseeqtns(${2:Blk})$0",
"description": "function [Eqtn,EqtnLabel,EqtnLhs,EqtnRhs,EqtnSign, SstateLhs,SstateRhs,SstateSign] = parseeqtns(Blk)" 
},
"parseflags": {
"prefix": "parseflags",
"body": "${1:[S, INVALIDFLAG] = }parseflags(${2:BLK}, ${3:S})$0",
"description": "function [S,INVALIDFLAG] = parseflags(BLK,S)" 
},
"parsenames": {
"prefix": "parsenames",
"body": "${1:[Name, Label, Value, NameFlag] = }parsenames(${2:Blk})$0",
"description": "function [Name,Label,Value,NameFlag] = parsenames(Blk)" 
},
"readblk": {
"prefix": "readblk",
"body": "${1:[Blk, InvalidKey, InvalidAllBut] = }readblk(${2:This})$0",
"description": "function [Blk,InvalidKey,InvalidAllBut] = readblk(This)" 
},
"sstateonly": {
"prefix": "sstateonly",
"body": "${1:S = }sstateonly(${2:S})$0",
"description": "function S = sstateonly(S)" 
},
"theparser": {
"prefix": "theparser",
"body": "${1:This = }theparser(${2:varargin})$0",
"description": "function This = theparser(varargin)" 
},
"acf_V3": {
"prefix": "acf_V3",
"body": "${1:[C, R] = }acf(${2:X}, ${3:DATES}, ${4:varargin})$0",
"description": "function [C,R] = acf(X,DATES,varargin)" 
},
"apct": {
"prefix": "apct",
"body": "${1:X = }apct(${2:X}, ${3:Q})$0",
"description": "function X = apct(X,Q)" 
},
"area": {
"prefix": "area",
"body": "${1:varargout = }area(${2:varargin})$0",
"description": "function varargout = area(varargin)" 
},
"arf_V1": {
"prefix": "arf_V1",
"body": "${1:X = }arf(${2:X}, ${3:A}, ${4:Z}, ${5:Range}, ${6:varargin})$0",
"description": "function X = arf(X,A,Z,Range,varargin)" 
},
"bar": {
"prefix": "bar",
"body": "${1:varargout = }bar(${2:varargin})$0",
"description": "function varargout = bar(varargin)" 
},
"barcon": {
"prefix": "barcon",
"body": "${1:varargout = }barcon(${2:varargin})$0",
"description": "function varargout = barcon(varargin)" 
},
"binop": {
"prefix": "binop",
"body": "${1:[x, varargout] = }binop(${2:fn}, ${3:a}, ${4:b}, ${5:varargin})$0",
"description": "function [x,varargout] = binop(fn,a,b,varargin)" 
},
"bpass": {
"prefix": "bpass",
"body": "${1:[X, T] = }bpass(${2:X}, ${3:Band}, ${4:Range}, ${5:varargin})$0",
"description": "function [X,T] = bpass(X,Band,Range,varargin)" 
},
"bsxfun": {
"prefix": "bsxfun",
"body": "${1:X = }bsxfun(${2:FUnc}, ${3:X}, ${4:Y})$0",
"description": "function X = bsxfun(FUnc,X,Y)" 
},
"bsxfunc": {
"prefix": "bsxfunc",
"body": "${1:X = }bsxfunc(${2:FUNC}, ${3:X}, ${4:Y})$0",
"description": "function X = bsxfunc(FUNC,X,Y)" 
},
"bwf": {
"prefix": "bwf",
"body": "${1:varargout = }bwf(${2:X}, ${3:Order}, ${4:Range}, ${5:varargin})$0",
"description": "function varargout = bwf(X,Order,Range,varargin)" 
},
"bwf2": {
"prefix": "bwf2",
"body": "${1:varargout = }bwf2(${2:varargin})$0",
"description": "function varargout = bwf2(varargin)" 
},
"cat": {
"prefix": "cat",
"body": "${1:X = }cat(${2:N}, ${3:varargin})$0",
"description": "function X = cat(N,varargin)" 
},
"catcheck": {
"prefix": "catcheck",
"body": "${1:[outputs, ixtseries] = }catcheck(${2:varargin})$0",
"description": "function [outputs,ixtseries] = catcheck(varargin)" 
},
"chowlin_V1": {
"prefix": "chowlin_V1",
"body": "${1:[y2, b, rho, u1, u2] = }chowlin(${2:y1}, ${3:x2}, ${4:range}, ${5:varargin})$0",
"description": "function [y2,b,rho,u1,u2] = chowlin(y1,x2,range,varargin)" 
},
"comment_V1": {
"prefix": "comment_V1",
"body": "${1:This = }comment(${2:This}, ${3:varargin})$0",
"description": "function This = comment(This,varargin)" 
},
"conbar": {
"prefix": "conbar",
"body": "${1:varargout = }conbar(${2:varargin})$0",
"description": "function varargout = conbar(varargin)" 
},
"convert_V2": {
"prefix": "convert_V2",
"body": "${1:This = }convert(${2:This}, ${3:Freq2}, ${4:Range}, ${5:varargin})$0",
"description": "function This = convert(This,Freq2,Range,varargin)" 
},
"cumsumk": {
"prefix": "cumsumk",
"body": "${1:X = }cumsumk(${2:X}, ${3:K}, ${4:RHO}, ${5:RANGE}, ${6:varargin})$0",
"description": "function X = cumsumk(X,K,RHO,RANGE,varargin)" 
},
"cut": {
"prefix": "cut",
"body": "${1:x = }cut(${2:varargin})$0",
"description": "function x = cut(varargin)" 
},
"daily": {
"prefix": "daily",
"body": "daily(${2:This})$0",
"description": "function daily(This)" 
},
"destdise": {
"prefix": "destdise",
"body": "${1:This = }destdise(${2:This}, ${3:XMean}, ${4:XStd})$0",
"description": "function This = destdise(This,XMean,XStd)" 
},
"destdize": {
"prefix": "destdize",
"body": "${1:varargout = }destdize(${2:varargin})$0",
"description": "function [varargout] = destdize(varargin)" 
},
"detrend_V1": {
"prefix": "detrend_V1",
"body": "${1:This = }detrend(${2:This}, ${3:varargin})$0",
"description": "function This = detrend(This,varargin)" 
},
"df": {
"prefix": "df",
"body": "${1:varargout = }df(${2:varargin})$0",
"description": "function varargout = df(varargin)" 
},
"diff_V3": {
"prefix": "diff_V3",
"body": "${1:X = }diff(${2:X}, ${3:K})$0",
"description": "function X = diff(X,K)" 
},
"disp_V3": {
"prefix": "disp_V3",
"body": "disp(${2:This}, ${3:Name}, ${4:Disp2D})$0",
"description": "function disp(This,Name,Disp2D)" 
},
"divisia": {
"prefix": "divisia",
"body": "${1:x = }divisia(${2:x}, ${3:w}, ${4:range})$0",
"description": "function x = divisia(x,w,range)" 
},
"double_V1": {
"prefix": "double_V1",
"body": "${1:y = }double(${2:x})$0",
"description": "function y = double(x)" 
},
"doubledata": {
"prefix": "doubledata",
"body": "${1:x = }doubledata(${2:x})$0",
"description": "function x = doubledata(x)" 
},
"empty_V2": {
"prefix": "empty_V2",
"body": "${1:x = }empty(${2:x})$0",
"description": "function x = empty(x)" 
},
"enddate": {
"prefix": "enddate",
"body": "${1:y = }enddate(${2:x})$0",
"description": "function y = enddate(x)" 
},
"errorbar": {
"prefix": "errorbar",
"body": "${1:[H1, H2, Range, Data] = }errorbar(${2:varargin})$0",
"description": "function [H1,H2,Range,Data] = errorbar(varargin)" 
},
"expsmooth": {
"prefix": "expsmooth",
"body": "${1:X = }expsmooth(${2:X}, ${3:BETA}, ${4:Range}, ${5:varargin})$0",
"description": "function X = expsmooth(X,BETA,Range,varargin)" 
},
"fft": {
"prefix": "fft",
"body": "${1:[y, range, freq, per] = }fft(${2:x}, ${3:range}, ${4:varargin})$0",
"description": "function [y,range,freq,per] = fft(x,range,varargin)" 
},
"find_V2": {
"prefix": "find_V2",
"body": "${1:DATES = }find(${2:X}, ${3:FLAG})$0",
"description": "function DATES = find(X,FLAG)" 
},
"freq": {
"prefix": "freq",
"body": "${1:y = }freq(${2:x})$0",
"description": "function y = freq(x)" 
},
"horzcat_V2": {
"prefix": "horzcat_V2",
"body": "${1:X = }horzcat(${2:varargin})$0",
"description": "function X = horzcat(varargin)" 
},
"hpdi_V1": {
"prefix": "hpdi_V1",
"body": "${1:x = }hpdi(${2:x}, ${3:prob}, ${4:dim})$0",
"description": "function x = hpdi(x,prob,dim)" 
},
"hpf": {
"prefix": "hpf",
"body": "${1:varargout = }hpf(${2:X}, ${3:Range}, ${4:varargin})$0",
"description": "function varargout = hpf(X,Range,varargin)" 
},
"hpf2": {
"prefix": "hpf2",
"body": "${1:varargout = }hpf2(${2:varargin})$0",
"description": "function varargout = hpf2(varargin)" 
},
"interp": {
"prefix": "interp",
"body": "${1:X = }interp(${2:X}, ${3:RANGE}, ${4:varargin})$0",
"description": "function X = interp(X,RANGE,varargin)" 
},
"isscalar": {
"prefix": "isscalar",
"body": "${1:flag = }isscalar(${2:x})$0",
"description": "function flag = isscalar(x)" 
},
"length_V2": {
"prefix": "length_V2",
"body": "${1:n = }length(${2:x})$0",
"description": "function n = length(x)" 
},
"llf": {
"prefix": "llf",
"body": "${1:varargout = }llf(${2:X}, ${3:Range}, ${4:varargin})$0",
"description": "function varargout = llf(X,Range,varargin)" 
},
"llf2": {
"prefix": "llf2",
"body": "${1:varargout = }llf2(${2:varargin})$0",
"description": "function varargout = llf2(varargin)" 
},
"loadobj": {
"prefix": "loadobj",
"body": "${1:this = }loadobj(${2:this})$0",
"description": "function this = loadobj(this)" 
},
"logncdf": {
"prefix": "logncdf",
"body": "${1:x = }logncdf(${2:x}, ${3:varargin})$0",
"description": "function x = logncdf(x,varargin)" 
},
"moving": {
"prefix": "moving",
"body": "${1:this = }moving(${2:this}, ${3:varargin})$0",
"description": "function this = moving(this,varargin)" 
},
"mybarcon": {
"prefix": "mybarcon",
"body": "${1:[H, Colors] = }mybarcon(${2:Ax}, ${3:X}, ${4:Y}, ${5:varargin})$0",
"description": "function [H,Colors] = mybarcon(Ax,X,Y,varargin)" 
},
"mybpass": {
"prefix": "mybpass",
"body": "${1:[x, t] = }mybpass(${2:x}, ${3:start}, ${4:band}, ${5:opt}, ${6:trendopt})$0",
"description": "function [x,t] = mybpass(x,start,band,opt,trendopt)" 
},
"mychristianofitzgerald": {
"prefix": "mychristianofitzgerald",
"body": "${1:AA = }mychristianofitzgerald(${2:T}, ${3:pl}, ${4:pu}, ${5:root}, ${6:drift}, ${7:ifilt}, ${8:nfix}, ${9:thet})$0",
"description": "function AA = mychristianofitzgerald_(T,pl,pu,root,drift,ifilt,nfix,thet)" 
},
"mycumsumk": {
"prefix": "mycumsumk",
"body": "${1:X = }mycumsumk(${2:X}, ${3:K}, ${4:RHO})$0",
"description": "function X = mycumsumk(X,K,RHO)" 
},
"mydestdize": {
"prefix": "mydestdize",
"body": "${1:x = }mydestdize(${2:x}, ${3:xmean}, ${4:xstd})$0",
"description": "function x = mydestdize(x,xmean,xstd)" 
},
"mydiff_V2": {
"prefix": "mydiff_V2",
"body": "${1:x = }mydiff(${2:x}, ${3:s})$0",
"description": "function x = mydiff(x,s)" 
},
"mydispheader": {
"prefix": "mydispheader",
"body": "mydispheader(${2:This})$0",
"description": "function mydispheader(This)" 
},
"myexpsmooth": {
"prefix": "myexpsmooth",
"body": "${1:X = }myexpsmooth(${2:X}, ${3:Beta}, ${4:Init})$0",
"description": "function X = myexpsmooth(X,Beta,Init)" 
},
"myfilter": {
"prefix": "myfilter",
"body": "${1:varargout = }myfilter(${2:Inp}, ${3:Range}, ${4:Order}, ${5:varargin})$0",
"description": "function varargout = myfilter(Inp,Range,Order,varargin)" 
},
"mygetdata": {
"prefix": "mygetdata",
"body": "${1:[Data, Dates, This] = }mygetdata(${2:This}, ${3:Dates}, ${4:varargin})$0",
"description": "function [Data,Dates,This] = mygetdata(This,Dates,varargin)" 
},
"myhpdi": {
"prefix": "myhpdi",
"body": "${1:[Low, High] = }myhpdi(${2:X}, ${3:Cover}, ${4:Dim})$0",
"description": "function [Low,High] = myhpdi(X,Cover,Dim)" 
},
"myinit": {
"prefix": "myinit",
"body": "${1:This = }myinit(${2:This}, ${3:Dates}, ${4:Data})$0",
"description": "function This = myinit(This,Dates,Data)" 
},
"myjusterrorbars": {
"prefix": "myjusterrorbars",
"body": "${1:H = }myjusterrorbars(${2:X}, ${3:Y}, ${4:Lo}, ${5:Hi}, ${6:Relative}, ${7:varargin})$0",
"description": "function H = myjusterrorbars(X,Y,Lo,Hi,Relative,varargin)" 
},
"mylagorlead": {
"prefix": "mylagorlead",
"body": "${1:[This, S, Shift] = }mylagorlead(${2:This}, ${3:S})$0",
"description": "function [This,S,Shift] = mylagorlead(This,S)" 
},
"mymoving": {
"prefix": "mymoving",
"body": "${1:x = }mymoving(${2:x}, ${3:window}, ${4:fn})$0",
"description": "function x = mymoving(x,window,fn)" 
},
"mynanmean": {
"prefix": "mynanmean",
"body": "${1:X = }mynanmean(${2:X}, ${3:Dim})$0",
"description": "function X = mynanmean(X,Dim)" 
},
"mynanstd": {
"prefix": "mynanstd",
"body": "${1:X = }mynanstd(${2:X}, ${3:Flag}, ${4:Dim})$0",
"description": "function X = mynanstd(X,Flag,Dim)" 
},
"mynansum": {
"prefix": "mynansum",
"body": "${1:x = }mynansum(${2:x}, ${3:dim})$0",
"description": "function x = mynansum(x,dim)" 
},
"mynanvar": {
"prefix": "mynanvar",
"body": "${1:X = }mynanvar(${2:X}, ${3:Flag}, ${4:Dim})$0",
"description": "function X = mynanvar(X,Flag,Dim)" 
},
"mypct": {
"prefix": "mypct",
"body": "${1:X = }mypct(${2:X}, ${3:S}, ${4:Q})$0",
"description": "function X = mypct(X,S,Q)" 
},
"myplot": {
"prefix": "myplot",
"body": "${1:[H, Range, Data, Time, UserRange, Freq, varargout] = }myplot(${2:Func}, ${3:varargin})$0",
"description": "function [H,Range,Data,Time,UserRange,Freq,varargout] = myplot(Func,varargin)" 
},
"myshift": {
"prefix": "myshift",
"body": "${1:y = }myshift(${2:x}, ${3:s})$0",
"description": "function y = myshift(x,s)" 
},
"mystdize": {
"prefix": "mystdize",
"body": "${1:[x, xmean, xstd] = }mystdize(${2:x}, ${3:flag})$0",
"description": "function [x,xmean,xstd] = mystdize(x,flag)" 
},
"mytrend": {
"prefix": "mytrend",
"body": "${1:[T, TT, TS, S] = }mytrend(${2:X}, ${3:Start}, ${4:Opt})$0",
"description": "function [T,TT,TS,S] = mytrend(X,Start,Opt)" 
},
"mytrim": {
"prefix": "mytrim",
"body": "${1:X = }mytrim(${2:X})$0",
"description": "function X = mytrim(X)" 
},
"ndims": {
"prefix": "ndims",
"body": "${1:N = }ndims(${2:This}, ${3:varargin})$0",
"description": "function N = ndims(This,varargin)" 
},
"normalise": {
"prefix": "normalise",
"body": "${1:X = }normalise(${2:X}, ${3:NORMDATE}, ${4:varargin})$0",
"description": "function X = normalise(X,NORMDATE,varargin)" 
},
"normalize": {
"prefix": "normalize",
"body": "${1:x = }normalize(${2:varargin})$0",
"description": "function x = normalize(varargin)" 
},
"pct": {
"prefix": "pct",
"body": "${1:X = }pct(${2:X}, ${3:S}, ${4:varargin})$0",
"description": "function X = pct(X,S,varargin)" 
},
"permute": {
"prefix": "permute",
"body": "${1:This = }permute(${2:This}, ${3:Order})$0",
"description": "function This = permute(This,Order)" 
},
"plotcmp": {
"prefix": "plotcmp",
"body": "${1:[Ax, Lhs, Rhs, varargout] = }plotcmp(${2:varargin})$0",
"description": "function [Ax,Lhs,Rhs,varargout] = plotcmp(varargin)" 
},
"plotpred": {
"prefix": "plotpred",
"body": "${1:[H1, H2, H3, Range, Data, Grid] = }plotpred(${2:varargin})$0",
"description": "function [H1,H2,H3,Range,Data,Grid] = plotpred(varargin)" 
},
"plotyy": {
"prefix": "plotyy",
"body": "${1:[Ax, hLhs, hRhs, RangeLhs, dataLhs, timeLhs, RangeRhs, dataRhs, timeRhs] = }plotyy(${2:varargin})$0",
"description": "function [Ax,hLhs,hRhs,RangeLhs,dataLhs,timeLhs,RangeRhs,dataRhs,timeRhs] = plotyy(varargin)" 
},
"range_V1": {
"prefix": "range_V1",
"body": "${1:y = }range(${2:x})$0",
"description": "function y = range(x)" 
},
"rangedata": {
"prefix": "rangedata",
"body": "${1:[Y, RANGE] = }rangedata(${2:X}, ${3:RANGE})$0",
"description": "function [Y,RANGE] = rangedata(X,RANGE)" 
},
"redate": {
"prefix": "redate",
"body": "${1:This = }redate(${2:This}, ${3:OldDate}, ${4:NewDate})$0",
"description": "function This = redate(This,OldDate,NewDate)" 
},
"regress_V2": {
"prefix": "regress_V2",
"body": "${1:[B, BStd, E, EStd, YFit, Range, BCov] = }regress(${2:Y}, ${3:X}, ${4:Range}, ${5:varargin})$0",
"description": "function [B,BStd,E,EStd,YFit,Range,BCov] = regress(Y,X,Range,varargin)" 
},
"replace": {
"prefix": "replace",
"body": "${1:This = }replace(${2:This}, ${3:Data}, ${4:Start}, ${5:Comment})$0",
"description": "function This = replace(This,Data,Start,Comment)" 
},
"reshape": {
"prefix": "reshape",
"body": "${1:[x, ss] = }reshape(${2:x}, ${3:s})$0",
"description": "function [x,ss] = reshape(x,s)" 
},
"resize_V1": {
"prefix": "resize_V1",
"body": "${1:[X, NewRange] = }resize(${2:X}, ${3:Range})$0",
"description": "function [X,NewRange] = resize(X,Range)" 
},
"rmse": {
"prefix": "rmse",
"body": "${1:[Rmse, Pe] = }rmse(${2:Obs}, ${3:Pred}, ${4:Range}, ${5:varargin})$0",
"description": "function [Rmse,Pe] = rmse(Obs,Pred,Range,varargin)" 
},
"round": {
"prefix": "round",
"body": "${1:x = }round(${2:x}, ${3:decimals})$0",
"description": "function x = round(x,decimals)" 
},
"saveobj_V2": {
"prefix": "saveobj_V2",
"body": "${1:this = }saveobj(${2:this})$0",
"description": "function this = saveobj(this)" 
},
"scatter": {
"prefix": "scatter",
"body": "${1:varargout = }scatter(${2:varargin})$0",
"description": "function varargout = scatter(varargin)" 
},
"single_V2": {
"prefix": "single_V2",
"body": "${1:y = }single(${2:x})$0",
"description": "function y = single(x)" 
},
"singledata": {
"prefix": "singledata",
"body": "${1:x = }singledata(${2:x})$0",
"description": "function x = singledata(x)" 
},
"size_V2": {
"prefix": "size_V2",
"body": "${1:varargout = }size(${2:This}, ${3:varargin})$0",
"description": "function varargout = size(This,varargin)" 
},
"sort_V2": {
"prefix": "sort_V2",
"body": "${1:[x, index] = }sort(${2:x}, ${3:crit})$0",
"description": "function [x,index] = sort(x,crit)" 
},
"specrange": {
"prefix": "specrange",
"body": "${1:range = }specrange(${2:this}, ${3:range})$0",
"description": "function range = specrange(this,range)" 
},
"spy": {
"prefix": "spy",
"body": "${1:[Ax, Li] = }spy(${2:varargin})$0",
"description": "function [Ax,Li] = spy(varargin)" 
},
"startdate": {
"prefix": "startdate",
"body": "${1:y = }startdate(${2:x})$0",
"description": "function y = startdate(x)" 
},
"stdise": {
"prefix": "stdise",
"body": "${1:[This, XMean, XStd] = }stdise(${2:This}, ${3:Flag})$0",
"description": "function [This,XMean,XStd] = stdise(This,Flag)" 
},
"stdize": {
"prefix": "stdize",
"body": "${1:varargout = }stdize(${2:varargin})$0",
"description": "function varargout = stdize(varargin)" 
},
"stem": {
"prefix": "stem",
"body": "${1:varargout = }stem(${2:varargin})$0",
"description": "function varargout = stem(varargin)" 
},
"subsasgn_V5": {
"prefix": "subsasgn_V5",
"body": "${1:This = }subsasgn(${2:This}, ${3:S}, ${4:Y})$0",
"description": "function This = subsasgn(This,S,Y)" 
},
"timeline": {
"prefix": "timeline",
"body": "timeline(${2:H}, ${3:TIME}, ${4:USERRANGE}, ${5:FREQ}, ${6:OPT})$0",
"description": "function timeline(H,TIME,USERRANGE,FREQ,OPT)" 
},
"trend": {
"prefix": "trend",
"body": "${1:[This, TT, TS] = }trend(${2:This}, ${3:Range}, ${4:varargin})$0",
"description": "function [This,TT,TS] = trend(This,Range,varargin)" 
},
"tseries_V2": {
"prefix": "tseries_V2",
"body": "${1:This = }tseries(${2:varargin})$0",
"description": "function This = tseries(varargin)" 
},
"unop": {
"prefix": "unop",
"body": "${1:[X, varargout] = }unop(${2:Func}, ${3:X}, ${4:Dim}, ${5:varargin})$0",
"description": "function [X,varargout] = unop(Func,X,Dim,varargin)" 
},
"vertcat_V2": {
"prefix": "vertcat_V2",
"body": "${1:x = }vertcat(${2:varargin})$0",
"description": "function x = vertcat(varargin)" 
},
"windex": {
"prefix": "windex",
"body": "${1:X = }windex(${2:X}, ${3:W}, ${4:Range}, ${5:varargin})$0",
"description": "function X = windex(X,W,Range,varargin)" 
},
"wmean": {
"prefix": "wmean",
"body": "${1:x = }wmean(${2:this}, ${3:dates}, ${4:beta})$0",
"description": "function x = wmean(this,dates,beta)" 
},
"x12_V2": {
"prefix": "x12_V2",
"body": "${1:varargout = }x12(${2:x}, ${3:range}, ${4:varargin})$0",
"description": "function varargout = x12(x,range,varargin)" 
},
"yearly": {
"prefix": "yearly",
"body": "yearly(${2:this})$0",
"description": "function yearly(this)" 
},
"comment_V2": {
"prefix": "comment_V2",
"body": "${1:varargout = }comment(${2:this}, ${3:varargin})$0",
"description": "function varargout = comment(this,varargin)" 
},
"dispcomment": {
"prefix": "dispcomment",
"body": "dispcomment(${2:This})$0",
"description": "function dispcomment(This)" 
},
"display_V4": {
"prefix": "display_V4",
"body": "display(${2:this})$0",
"description": "function display(this)" 
},
"dispuserdata": {
"prefix": "dispuserdata",
"body": "dispuserdata(${2:This})$0",
"description": "function dispuserdata(This)" 
},
"userdata": {
"prefix": "userdata",
"body": "${1:varargout = }userdata(${2:this}, ${3:varargin})$0",
"description": "function varargout = userdata(this,varargin)" 
},
"userdatafield": {
"prefix": "userdatafield",
"body": "${1:varargout = }userdatafield(${2:This}, ${3:Field}, ${4:varargin})$0",
"description": "function varargout = userdatafield(This,Field,varargin)" 
},
"userdataobj": {
"prefix": "userdataobj",
"body": "${1:this = }userdataobj(${2:varargin})$0",
"description": "function this = userdataobj(varargin)" 
},
"ispanel": {
"prefix": "ispanel",
"body": "${1:Flag = }ispanel(${2:This})$0",
"description": "function Flag = ispanel(This)" 
},
"mydatarequest": {
"prefix": "mydatarequest",
"body": "${1:[OutpFmt, Range, Y, E, I] = }mydatarequest(${2:This}, ${3:Data}, ${4:Range}, ${5:Opt})$0",
"description": "function [OutpFmt,Range,Y,E,I] = mydatarequest(This,Data,Range,Opt)" 
},
"myenames": {
"prefix": "myenames",
"body": "${1:varargout = }myenames(${2:This}, ${3:varargin})$0",
"description": "function varargout = myenames(This,varargin)" 
},
"mygroupnames": {
"prefix": "mygroupnames",
"body": "${1:This = }mygroupnames(${2:This}, ${3:GroupNames})$0",
"description": "function This = mygroupnames(This,GroupNames)" 
},
"myinpdata": {
"prefix": "myinpdata",
"body": "${1:[Y, Rng, YNames, InpFmt, varargin] = }myinpdata(${2:This}, ${3:varargin})$0",
"description": "function [Y,Rng,YNames,InpFmt,varargin] = myinpdata(This,varargin)" 
},
"mynalt": {
"prefix": "mynalt",
"body": "${1:NALT = }mynalt$0",
"description": "function NALT = mynalt(~)" 
},
"myoutpdata": {
"prefix": "myoutpdata",
"body": "${1:Data = }myoutpdata(${2:This}, ${3:Fmt}, ${4:Rng}, ${5:X}, ${6:P}, ${7:Names})$0",
"description": "function Data = myoutpdata(This,Fmt,Rng,X,P,Names) %#ok<INUSL>" 
},
"myynames": {
"prefix": "myynames",
"body": "${1:varargout = }myynames(${2:This}, ${3:YNames})$0",
"description": "function varargout = myynames(This,YNames)" 
},
"nfitted": {
"prefix": "nfitted",
"body": "${1:NFitted = }nfitted(${2:This})$0",
"description": "function NFitted = nfitted(This)" 
},
"specdisp_V2": {
"prefix": "specdisp_V2",
"body": "specdisp(${2:This})$0",
"description": "function specdisp(This) %#ok<INUSD>" 
},
"varobj_V2": {
"prefix": "varobj_V2",
"body": "${1:This = }varobj(${2:varargin})$0",
"description": "function This = varobj(varargin)" 
},
"bb": {
"prefix": "bb",
"body": "${1:dat = }bb(${2:varargin})$0",
"description": "function dat = bb(varargin)" 
},
"bbtoday": {
"prefix": "bbtoday",
"body": "${1:dat = }bbtoday$0",
"description": "function dat = bbtoday()" 
},
"clp2dat": {
"prefix": "clp2dat",
"body": "${1:[d, c] = }clp2dat(${2:varargin})$0",
"description": "function [d,c] = clp2dat(varargin)" 
},
"convert_V3": {
"prefix": "convert_V3",
"body": "${1:NewDat = }convert(${2:Dat}, ${3:NewFreq}, ${4:varargin})$0",
"description": "function NewDat = convert(Dat,NewFreq,varargin)" 
},
"dat2char": {
"prefix": "dat2char",
"body": "${1:x = }dat2char(${2:dat}, ${3:varargin})$0",
"description": "function x = dat2char(dat,varargin)" 
},
"dat2charlist": {
"prefix": "dat2charlist",
"body": "${1:c = }dat2charlist(${2:d}, ${3:varargin})$0",
"description": "function c = dat2charlist(d,varargin)" 
},
"dat2clp": {
"prefix": "dat2clp",
"body": "${1:C = }dat2clp(${2:Dat}, ${3:varargin})$0",
"description": "function C = dat2clp(Dat,varargin)" 
},
"dat2cmd": {
"prefix": "dat2cmd",
"body": "${1:c = }dat2cmd(${2:dat})$0",
"description": "function c = dat2cmd(dat)" 
},
"dat2dec": {
"prefix": "dat2dec",
"body": "${1:dec = }dat2dec(${2:dat})$0",
"description": "function dec = dat2dec(dat)" 
},
"dat2grid": {
"prefix": "dat2grid",
"body": "${1:x = }dat2grid(${2:x}, ${3:pos})$0",
"description": "function x = dat2grid(x,pos)" 
},
"dat2str": {
"prefix": "dat2str",
"body": "${1:S = }dat2str(${2:Dat}, ${3:varargin})$0",
"description": "function S = dat2str(Dat,varargin)" 
},
"dat2ypf": {
"prefix": "dat2ypf",
"body": "${1:[year, per, freq] = }dat2ypf(${2:dat})$0",
"description": "function [year,per,freq] = dat2ypf(dat)" 
},
"datbom": {
"prefix": "datbom",
"body": "${1:D = }datbom(${2:D})$0",
"description": "function D = datbom(D)" 
},
"datboq": {
"prefix": "datboq",
"body": "${1:D = }datboq(${2:D})$0",
"description": "function D = datboq(D)" 
},
"datboy": {
"prefix": "datboy",
"body": "${1:D = }datboy(${2:D})$0",
"description": "function D = datboy(D)" 
},
"datcmp": {
"prefix": "datcmp",
"body": "${1:Flag = }datcmp(${2:Dat1}, ${3:Dat2})$0",
"description": "function Flag = datcmp(Dat1,Dat2)" 
},
"datcode": {
"prefix": "datcode",
"body": "${1:dat = }datcode(${2:freq}, ${3:year}, ${4:varargin})$0",
"description": "function dat = datcode(freq,year,varargin)" 
},
"datconsecutive": {
"prefix": "datconsecutive",
"body": "${1:[C, S] = }datconsecutive(${2:D})$0",
"description": "function [C,S] = datconsecutive(D)" 
},
"datdefaults": {
"prefix": "datdefaults",
"body": "${1:[opt, config] = }datdefaults(${2:opt}, ${3:isplot})$0",
"description": "function [opt,config] = datdefaults(opt,isplot)" 
},
"datdiff": {
"prefix": "datdiff",
"body": "${1:D = }datdiff(${2:D1}, ${3:D2})$0",
"description": "function D = datdiff(D1,D2)" 
},
"dateom": {
"prefix": "dateom",
"body": "${1:D = }dateom(${2:D})$0",
"description": "function D = dateom(D)" 
},
"dateoq": {
"prefix": "dateoq",
"body": "${1:D = }dateoq(${2:D})$0",
"description": "function D = dateoq(D)" 
},
"dateoy": {
"prefix": "dateoy",
"body": "${1:D = }dateoy(${2:D})$0",
"description": "function D = dateoy(D)" 
},
"dateq": {
"prefix": "dateq",
"body": "${1:flag = }dateq(${2:d1}, ${3:d2})$0",
"description": "function flag = dateq(d1,d2)" 
},
"daterange": {
"prefix": "daterange",
"body": "${1:x = }daterange(${2:varargin})$0",
"description": "function x = daterange(varargin)" 
},
"datfreq": {
"prefix": "datfreq",
"body": "${1:freq = }datfreq(${2:dat})$0",
"description": "function freq = datfreq(dat)" 
},
"datxtick": {
"prefix": "datxtick",
"body": "datxtick(${2:varargin})$0",
"description": "function datxtick(varargin)" 
},
"dd": {
"prefix": "dd",
"body": "${1:x = }dd(${2:year}, ${3:month}, ${4:day})$0",
"description": "function x = dd(year,month,day)" 
},
"dec2dat": {
"prefix": "dec2dat",
"body": "${1:dat = }dec2dat(${2:dec}, ${3:freq})$0",
"description": "function dat = dec2dat(dec,freq)" 
},
"freqcmp": {
"prefix": "freqcmp",
"body": "${1:flag = }freqcmp(${2:x}, ${3:y})$0",
"description": "function flag = freqcmp(x,y)" 
},
"grid2dat": {
"prefix": "grid2dat",
"body": "${1:x = }grid2dat(${2:x}, ${3:freq}, ${4:pos})$0",
"description": "function x = grid2dat(x,freq,pos)" 
},
"hh": {
"prefix": "hh",
"body": "${1:dat = }hh(${2:varargin})$0",
"description": "function dat = hh(varargin)" 
},
"hhtoday": {
"prefix": "hhtoday",
"body": "${1:dat = }hhtoday$0",
"description": "function dat = hhtoday()" 
},
"mm": {
"prefix": "mm",
"body": "${1:dat = }mm(${2:varargin})$0",
"description": "function dat = mm(varargin)" 
},
"mmtoday": {
"prefix": "mmtoday",
"body": "${1:dat = }mmtoday$0",
"description": "function dat = mmtoday()" 
},
"month2per": {
"prefix": "month2per",
"body": "${1:p = }month2per(${2:m}, ${3:f})$0",
"description": "function p = month2per(m,f)" 
},
"mydatxtick": {
"prefix": "mydatxtick",
"body": "mydatxtick(${2:H}, ${3:Time}, ${4:Freq}, ${5:UserRange}, ${6:Opt})$0",
"description": "function mydatxtick(H,Time,Freq,UserRange,Opt)" 
},
"per2month": {
"prefix": "per2month",
"body": "${1:m = }per2month(${2:p}, ${3:f}, ${4:standinmonth})$0",
"description": "function m = per2month(p,f,standinmonth)" 
},
"qq": {
"prefix": "qq",
"body": "${1:dat = }qq(${2:varargin})$0",
"description": "function dat = qq(varargin)" 
},
"qqtoday": {
"prefix": "qqtoday",
"body": "${1:dat = }qqtoday$0",
"description": "function dat = qqtoday()" 
},
"rngcmp_V2": {
"prefix": "rngcmp_V2",
"body": "${1:Flag = }rngcmp(${2:R1}, ${3:R2})$0",
"description": "function Flag = rngcmp(R1,R2)" 
},
"rngfreq": {
"prefix": "rngfreq",
"body": "${1:Freq = }rngfreq(${2:Range})$0",
"description": "function Freq = rngfreq(Range)" 
},
"str2dat": {
"prefix": "str2dat",
"body": "${1:Dat = }str2dat(${2:String}, ${3:varargin})$0",
"description": "function Dat = str2dat(String,varargin)" 
},
"yy": {
"prefix": "yy",
"body": "${1:dat = }yy(${2:varargin})$0",
"description": "function dat = yy(varargin)" 
},
"yytoday": {
"prefix": "yytoday",
"body": "${1:dat = }yytoday$0",
"description": "function dat = yytoday()" 
},
"zz": {
"prefix": "zz",
"body": "${1:dat = }zz(${2:varargin})$0",
"description": "function dat = zz(varargin)" 
},
"zztoday": {
"prefix": "zztoday",
"body": "${1:dat = }zztoday$0",
"description": "function dat = zztoday()" 
},
"array2db": {
"prefix": "array2db",
"body": "${1:D = }array2db(${2:X}, ${3:RANGE}, ${4:LIST}, ${5:ISLOG}, ${6:D})$0",
"description": "function D = array2db(X,RANGE,LIST,ISLOG,D)" 
},
"db2array": {
"prefix": "db2array",
"body": "${1:[X, Incl, Range, NotFound, NonTseries] = }db2array(${2:D}, ${3:List}, ${4:Range}, ${5:LagOrLead}, ${6:Log}, ${7:ThrowNotFound}, ${8:ThrowInvalid}, ${9:ThrowFreq}, ${10:ThrowNonTseries})$0",
"description": "function [X,Incl,Range,NotFound,NonTseries] = db2array(D,List,Range,LagOrLead,Log, ThrowNotFound,ThrowInvalid,ThrowFreq,ThrowNonTseries)" 
},
"db2tseries": {
"prefix": "db2tseries",
"body": "${1:[X, list, range] = }db2tseries(${2:d}, ${3:varargin})$0",
"description": "function [X,list,range] = db2tseries(d,varargin)" 
},
"dbbatch": {
"prefix": "dbbatch",
"body": "${1:[D, List0, List, Flag] = }dbbatch(${2:D}, ${3:NewName}, ${4:Expr}, ${5:varargin})$0",
"description": "function [D,List0,List,Flag] = dbbatch(D,NewName,Expr,varargin)" 
},
"dbclip": {
"prefix": "dbclip",
"body": "${1:D = }dbclip(${2:D}, ${3:Range})$0",
"description": "function D = dbclip(D,Range)" 
},
"dbcol": {
"prefix": "dbcol",
"body": "${1:varargout = }dbcol(${2:this}, ${3:varargin})$0",
"description": "function varargout = dbcol(this,varargin)" 
},
"dbeval": {
"prefix": "dbeval",
"body": "${1:varargout = }dbeval(${2:D}, ${3:varargin})$0",
"description": "function varargout = dbeval(D,varargin)" 
},
"dbexclude": {
"prefix": "dbexclude",
"body": "${1:d = }dbexclude(${2:d}, ${3:cond}, ${4:varargin})$0",
"description": "function d = dbexclude(d,cond,varargin)" 
},
"dbextend": {
"prefix": "dbextend",
"body": "${1:d = }dbextend(${2:d}, ${3:varargin})$0",
"description": "function d = dbextend(d,varargin)" 
},
"dbfun": {
"prefix": "dbfun",
"body": "${1:[X, Flag, ErrList, WarnList] = }dbfun(${2:Func}, ${3:D}, ${4:varargin})$0",
"description": "function [X,Flag,ErrList,WarnList] = dbfun(Func,D,varargin)" 
},
"dbload": {
"prefix": "dbload",
"body": "${1:D = }dbload(${2:varargin})$0",
"description": "function D = dbload(varargin)" 
},
"dbmerge": {
"prefix": "dbmerge",
"body": "${1:d = }dbmerge(${2:varargin})$0",
"description": "function d = dbmerge(varargin)" 
},
"dbminuscontrol": {
"prefix": "dbminuscontrol",
"body": "${1:[DMC, C] = }dbminuscontrol(${2:This}, ${3:D}, ${4:C})$0",
"description": "function [DMC,C] = dbminuscontrol(This,D,C)" 
},
"dbnames": {
"prefix": "dbnames",
"body": "${1:Name = }dbnames(${2:D}, ${3:varargin})$0",
"description": "function Name = dbnames(D,varargin)" 
},
"dbplot": {
"prefix": "dbplot",
"body": "${1:[FF, AA, PDb] = }dbplot(${2:D}, ${3:List}, ${4:Range}, ${5:varargin})$0",
"description": "function [FF,AA,PDb] = dbplot(D,List,Range,varargin)" 
},
"dbprintuserdata": {
"prefix": "dbprintuserdata",
"body": "dbprintuserdata(${2:D}, ${3:Field}, ${4:varargin})$0",
"description": "function dbprintuserdata(D,Field,varargin)" 
},
"dbrange": {
"prefix": "dbrange",
"body": "${1:[Rng, FreqList] = }dbrange(${2:D}, ${3:List}, ${4:varargin})$0",
"description": "function [Rng,FreqList] = dbrange(D,List,varargin)" 
},
"dbredate": {
"prefix": "dbredate",
"body": "${1:D = }dbredate(${2:D}, ${3:OldDate}, ${4:NewDate})$0",
"description": "function D = dbredate(D,OldDate,NewDate)" 
},
"dbsave": {
"prefix": "dbsave",
"body": "${1:Saved = }dbsave(${2:D}, ${3:FName}, ${4:Dates}, ${5:varargin})$0",
"description": "function Saved = dbsave(D,FName,Dates,varargin)" 
},
"dbsearchuserdata": {
"prefix": "dbsearchuserdata",
"body": "${1:varargout = }dbsearchuserdata(${2:d}, ${3:varargin})$0",
"description": "function varargout = dbsearchuserdata(d,varargin)" 
},
"dbuserdatalov": {
"prefix": "dbuserdatalov",
"body": "${1:LOV = }dbuserdatalov(${2:D}, ${3:FIELD}, ${4:varargin})$0",
"description": "function LOV = dbuserdatalov(D,FIELD,varargin)" 
},
"xls2csv": {
"prefix": "xls2csv",
"body": "xls2csv(${2:InpFile}, ${3:OutpFile}, ${4:varargin})$0",
"description": "function xls2csv(InpFile,OutpFile,varargin)" 
},
"acgf": {
"prefix": "acgf",
"body": "${1:varargout = }acgf(${2:varargin})$0",
"description": "function varargout = acgf(varargin)" 
},
"amean": {
"prefix": "amean",
"body": "${1:varargout = }amean(${2:varargin})$0",
"description": "function varargout = amean(varargin)" 
},
"anchor": {
"prefix": "anchor",
"body": "${1:varargout = }anchor(${2:varargin})$0",
"description": "function varargout = anchor(varargin)" 
},
"anticipate": {
"prefix": "anticipate",
"body": "${1:varargout = }anticipate(${2:varargin})$0",
"description": "function varargout = anticipate(varargin)" 
},
"approx": {
"prefix": "approx",
"body": "${1:varargout = }approx(${2:varargin})$0",
"description": "function varargout = approx(varargin)" 
},
"arfilter": {
"prefix": "arfilter",
"body": "${1:x = }arfilter(${2:varargin})$0",
"description": "function x = arfilter(varargin)" 
},
"bb2qq": {
"prefix": "bb2qq",
"body": "${1:x = }bb2qq(${2:x}, ${3:range}, ${4:varargin})$0",
"description": "function x = bb2qq(x,range,varargin)" 
},
"bb2yy": {
"prefix": "bb2yy",
"body": "${1:x = }bb2yy(${2:x}, ${3:range}, ${4:varargin})$0",
"description": "function x = bb2yy(x,range,varargin)" 
},
"bb2zz": {
"prefix": "bb2zz",
"body": "${1:x = }bb2zz(${2:x}, ${3:range}, ${4:varargin})$0",
"description": "function x = bb2zz(x,range,varargin)" 
},
"beginprintout": {
"prefix": "beginprintout",
"body": "${1:rep = }beginprintout(${2:rep}, ${3:varargin})$0",
"description": "function rep = beginprintout(rep,varargin)" 
},
"conlegend": {
"prefix": "conlegend",
"body": "${1:varargout = }conlegend(${2:varargin})$0",
"description": "function varargout = conlegend(varargin)" 
},
"db2dpack": {
"prefix": "db2dpack",
"body": "${1:varargout = }db2dpack(${2:varargin})$0",
"description": "function varargout = db2dpack(varargin)" 
},
"db2mat": {
"prefix": "db2mat",
"body": "${1:[mat, notfound, invalid] = }db2mat(${2:d}, ${3:range}, ${4:name}, ${5:shift}, ${6:loglin})$0",
"description": "function [mat,notfound,invalid] = db2mat(d,range,name,shift,loglin)" 
},
"dbase_V2": {
"prefix": "dbase_V2",
"body": "${1:d = }dbase(${2:name}, ${3:value})$0",
"description": "function d = dbase(name,value)" 
},
"dbbinop": {
"prefix": "dbbinop",
"body": "${1:dBase = }dbbinop(${2:primary}, ${3:secondary}, ${4:nameFilter}, ${5:classFilter}, ${6:fn}, ${7:varargin})$0",
"description": "function dBase = dbbinop(primary,secondary,nameFilter,classFilter,fn,varargin)" 
},
"dbempty": {
"prefix": "dbempty",
"body": "${1:d = }dbempty(${2:varargin})$0",
"description": "function d = dbempty(varargin), d = dbase(varargin{:}); end" 
},
"dbfetch": {
"prefix": "dbfetch",
"body": "${1:varargout = }dbfetch(${2:varargin})$0",
"description": "function varargout = dbfetch(varargin)" 
},
"dbgen": {
"prefix": "dbgen",
"body": "${1:inout_s = }dbgen(${2:in_list}, ${3:in_names}, ${4:in_expr}, ${5:inout_s})$0",
"description": "function [inout_s] = dbgen(in_list,in_names,in_expr,inout_s)" 
},
"dbmake": {
"prefix": "dbmake",
"body": "${1:[dBase, list0, list1] = }dbmake(${2:primary}, ${3:nameFilt}, ${4:classFilt}, ${5:mask}, ${6:expr}, ${7:append})$0",
"description": "function [dBase,list0,list1] = dbmake(primary,nameFilt,classFilt,mask,expr,append)" 
},
"dbobjects": {
"prefix": "dbobjects",
"body": "${1:list = }dbobjects(${2:d}, ${3:classfilter})$0",
"description": "function list = dbobjects(d,classfilter)" 
},
"dboverwrite": {
"prefix": "dboverwrite",
"body": "${1:varargout = }dboverwrite(${2:varargin})$0",
"description": "function varargout = dboverwrite(varargin)" 
},
"dbsub": {
"prefix": "dbsub",
"body": "${1:This = }dbsub(${2:This}, ${3:List})$0",
"description": "function This = dbsub(This,List)" 
},
"dbts2num": {
"prefix": "dbts2num",
"body": "${1:[out_array, out_range, out_comments] = }dbts2num(${2:in_db}, ${3:in_list}, ${4:in_option})$0",
"description": "function [out_array,out_range,out_comments] = dbts2num(in_db,in_list,in_option)" 
},
"dbunop": {
"prefix": "dbunop",
"body": "${1:dbase = }dbunop(${2:dbase0}, ${3:nameFilter}, ${4:classFilter}, ${5:fn}, ${6:varargin})$0",
"description": "function dbase = dbunop(dbase0,nameFilter,classFilter,fn,varargin)" 
},
"disclose": {
"prefix": "disclose",
"body": "${1:p = }disclose(${2:p}, ${3:varargin})$0",
"description": "function p = disclose(p,varargin)" 
},
"dkfilter": {
"prefix": "dkfilter",
"body": "${1:varargout = }dkfilter(${2:varargin})$0",
"description": "function varargout = dkfilter(varargin)" 
},
"dp2dbase": {
"prefix": "dp2dbase",
"body": "${1:varargout = }dp2dbase(${2:varargin})$0",
"description": "function varargout = dp2dbase(varargin)" 
},
"dpdistrib": {
"prefix": "dpdistrib",
"body": "${1:out = }dpdistrib(${2:dpack}, ${3:fcn})$0",
"description": "function out = dpdistrib(dpack,fcn)" 
},
"dpget": {
"prefix": "dpget",
"body": "${1:[x, found] = }dpget(${2:dpack}, ${3:name}, ${4:dates})$0",
"description": "function [x,found] = dpget(dpack,name,dates)" 
},
"endogenize": {
"prefix": "endogenize",
"body": "${1:varargout = }endogenize(${2:varargin})$0",
"description": "function varargout = endogenize(varargin)" 
},
"endprintout": {
"prefix": "endprintout",
"body": "${1:rep = }endprintout(${2:rep}, ${3:varargin})$0",
"description": "function rep = endprintout(rep,varargin)" 
},
"exogenize": {
"prefix": "exogenize",
"body": "${1:varargout = }exogenize(${2:varargin})$0",
"description": "function varargout = exogenize(varargin)" 
},
"fanchart_V2": {
"prefix": "fanchart_V2",
"body": "${1:h = }fanchart(${2:h0}, ${3:bands}, ${4:varargin})$0",
"description": "function h = fanchart(h0,bands,varargin)" 
},
"fetch - 副本": {
"prefix": "fetch - 副本",
"body": "${1:this = }fetch - 副本(${2:this}, ${3:n})$0",
"description": "function this = fetch(this,n)" 
},
"fetch_lrw": {
"prefix": "fetch_lrw",
"body": "${1:this = }fetch_lrw(${2:this}, ${3:n})$0",
"description": "function this = fetch(this,n)" 
},
"findmatches": {
"prefix": "findmatches",
"body": "${1:[listlogic, patternlogic] = }findmatches(${2:list}, ${3:pattern})$0",
"description": "function [listlogic,patternlogic] = findmatches(list,pattern)" 
},
"fixold": {
"prefix": "fixold",
"body": "${1:varargout = }fixold(${2:varargin})$0",
"description": "function varargout = fixold(varargin)" 
},
"free": {
"prefix": "free",
"body": "${1:varargout = }free(${2:varargin})$0",
"description": "function varargout = free(varargin)" 
},
"gettimescale": {
"prefix": "gettimescale",
"body": "${1:x = }gettimescale(${2:h})$0",
"description": "function x = gettimescale(h)" 
},
"grayarea": {
"prefix": "grayarea",
"body": "${1:h = }grayarea(${2:varargin})$0",
"description": "function h = grayarea(varargin)" 
},
"grep": {
"prefix": "grep",
"body": "grep(${2:h}, ${3:fname}, ${4:ltitle}, ${5:ctitle}, ${6:rtitle}, ${7:append})$0",
"description": "function grep(h,fname,ltitle,ctitle,rtitle,append)" 
},
"greyarea": {
"prefix": "greyarea",
"body": "${1:h = }greyarea(${2:varargin})$0",
"description": "function h = greyarea(varargin)" 
},
"hp": {
"prefix": "hp",
"body": "${1:varargout = }hp(${2:varargin})$0",
"description": "function varargout = hp(varargin)" 
},
"hpgap": {
"prefix": "hpgap",
"body": "${1:[gap, tnd] = }hpgap(${2:varargin})$0",
"description": "function [gap,tnd] = hpgap(varargin)" 
},
"hpprior": {
"prefix": "hpprior",
"body": "${1:varargout = }hpprior(${2:varargin})$0",
"description": "function varargout = hpprior(varargin)" 
},
"hwbpf": {
"prefix": "hwbpf",
"body": "${1:varargout = }hwbpf(${2:varargin})$0",
"description": "function varargout = hwbpf(varargin)" 
},
"loghpf": {
"prefix": "loghpf",
"body": "${1:varargout = }loghpf(${2:varargin})$0",
"description": "function varargout = loghpf(varargin)" 
},
"loghpgap": {
"prefix": "loghpgap",
"body": "${1:[gap, tnd] = }loghpgap(${2:varargin})$0",
"description": "function [gap,tnd] = loghpgap(varargin)" 
},
"maxloglik": {
"prefix": "maxloglik",
"body": "${1:varargout = }maxloglik(${2:varargin})$0",
"description": "function varargout = estimate(varargin)" 
},
"mm2bb": {
"prefix": "mm2bb",
"body": "${1:x = }mm2bb(${2:x}, ${3:range}, ${4:varargin})$0",
"description": "function x = mm2bb(x,range,varargin)" 
},
"mm2qq": {
"prefix": "mm2qq",
"body": "${1:x = }mm2qq(${2:x}, ${3:range}, ${4:varargin})$0",
"description": "function x = mm2qq(x,range,varargin)" 
},
"mm2yy": {
"prefix": "mm2yy",
"body": "${1:x = }mm2yy(${2:x}, ${3:range}, ${4:varargin})$0",
"description": "function x = mm2yy(x,range,varargin)" 
},
"mm2zz": {
"prefix": "mm2zz",
"body": "${1:x = }mm2zz(${2:x}, ${3:range}, ${4:varargin})$0",
"description": "function x = mm2zz(x,range,varargin)" 
},
"outside": {
"prefix": "outside",
"body": "${1:varargout = }outside(${2:varargin})$0",
"description": "function varargout = outside(varargin)" 
},
"par": {
"prefix": "par",
"body": "${1:varargout = }par(${2:varargin})$0",
"description": "function varargout = par(varargin)" 
},
"passopt": {
"prefix": "passopt",
"body": "${1:[options, invalid, useroptions] = }passopt(${2:default}, ${3:varargin})$0",
"description": "function [options,invalid,useroptions] = passopt(default,varargin)" 
},
"pc_V2": {
"prefix": "pc_V2",
"body": "${1:varargout = }pc(${2:varargin})$0",
"description": "function varargout = pc(varargin)" 
},
"pcprior": {
"prefix": "pcprior",
"body": "${1:varargout = }pcprior(${2:varargin})$0",
"description": "function varargout = pcprior(varargin)" 
},
"plotrecon": {
"prefix": "plotrecon",
"body": "${1:[ax, chksum] = }plotrecon(${2:d}, ${3:plotrng}, ${4:varargin})$0",
"description": "function [ax,chksum] = plotrecon(d,plotrng,varargin)" 
},
"printout": {
"prefix": "printout",
"body": "${1:rep = }printout(${2:varargin})$0",
"description": "function rep = printout(varargin)" 
},
"qq2yy": {
"prefix": "qq2yy",
"body": "${1:x = }qq2yy(${2:x}, ${3:range}, ${4:varargin})$0",
"description": "function x = qq2yy(x,range,varargin)" 
},
"qq2zz": {
"prefix": "qq2zz",
"body": "${1:x = }qq2zz(${2:x}, ${3:range}, ${4:varargin})$0",
"description": "function x = qq2zz(x,range,varargin)" 
},
"reconfig": {
"prefix": "reconfig",
"body": "reconfig(${2:varargin})$0",
"description": "function reconfig(varargin)" 
},
"rexpn": {
"prefix": "rexpn",
"body": "${1:[outstrings, outtokens] = }rexpn(${2:inexpr}, ${3:inpattern}, ${4:n}, ${5:varargin})$0",
"description": "function [outstrings,outtokens] = rexpn(inexpr,inpattern,n,varargin)" 
},
"rwwn": {
"prefix": "rwwn",
"body": "${1:[tnd, gap] = }rwwn(${2:varargin})$0",
"description": "function [tnd,gap] = rwwn(varargin)" 
},
"rwwnprior": {
"prefix": "rwwnprior",
"body": "${1:[tnd, gap] = }rwwnprior(${2:varargin})$0",
"description": "function [tnd,gap] = rwwnprior(varargin)" 
},
"varx": {
"prefix": "varx",
"body": "${1:v = }varx(${2:varargin})$0",
"description": "function v = varx(varargin)" 
},
"xs2phase": {
"prefix": "xs2phase",
"body": "${1:[phase, lag] = }xs2phase(${2:xs})$0",
"description": "function [phase,lag] = xs2phase(xs)" 
},
"zz2yy": {
"prefix": "zz2yy",
"body": "${1:x = }zz2yy(${2:x}, ${3:range}, ${4:varargin})$0",
"description": "function x = zz2yy(x,range,varargin)" 
},
"bottomlegend_V2": {
"prefix": "bottomlegend_V2",
"body": "${1:varargout = }bottomlegend(${2:varargin})$0",
"description": "function varargout = bottomlegend(varargin)" 
},
"dboverlay": {
"prefix": "dboverlay",
"body": "${1:varargout = }dboverlay(${2:varargin})$0",
"description": "function varargout = dboverlay(varargin)" 
},
"findnames_V2": {
"prefix": "findnames_V2",
"body": "${1:varargout = }findnames(${2:varargin})$0",
"description": "function varargout = findnames(varargin)" 
},
"ftitle_V2": {
"prefix": "ftitle_V2",
"body": "${1:varargout = }ftitle(${2:varargin})$0",
"description": "function varargout = ftitle(varargin)" 
},
"highlight_V3": {
"prefix": "highlight_V3",
"body": "${1:varargout = }highlight(${2:varargin})$0",
"description": "function varargout = highlight(varargin)" 
},
"hline_V2": {
"prefix": "hline_V2",
"body": "${1:varargout = }hline(${2:varargin})$0",
"description": "function varargout = hline(varargin)" 
},
"maxfigure_V2": {
"prefix": "maxfigure_V2",
"body": "${1:varargout = }maxfigure(${2:varargin})$0",
"description": "function varargout = maxfigure(varargin)" 
},
"movetosubplot_V2": {
"prefix": "movetosubplot_V2",
"body": "${1:varargout = }movetosubplot(${2:varargin})$0",
"description": "function varargout = movetosubplot(varargin)" 
},
"nextplot_V2": {
"prefix": "nextplot_V2",
"body": "${1:varargout = }nextplot(${2:varargin})$0",
"description": "function varargout = nextplot(varargin)" 
},
"ploteig_V2": {
"prefix": "ploteig_V2",
"body": "${1:varargout = }ploteig(${2:varargin})$0",
"description": "function varargout = ploteig(varargin)" 
},
"plotmat_V2": {
"prefix": "plotmat_V2",
"body": "${1:varargout = }plotmat(${2:varargin})$0",
"description": "function varargout = plotmat(varargin)" 
},
"plotneigh_V2": {
"prefix": "plotneigh_V2",
"body": "${1:varargout = }plotneigh(${2:varargin})$0",
"description": "function varargout = plotneigh(varargin)" 
},
"plotpp_V2": {
"prefix": "plotpp_V2",
"body": "${1:varargout = }plotpp(${2:varargin})$0",
"description": "function varargout = plotpp(varargin)" 
},
"predplot": {
"prefix": "predplot",
"body": "${1:varargout = }predplot(${2:varargin})$0",
"description": "function varargout = predplot(varargin)" 
},
"qplot_V2": {
"prefix": "qplot_V2",
"body": "${1:varargout = }qplot(${2:varargin})$0",
"description": "function varargout = qplot(varargin)" 
},
"qstyle_V2": {
"prefix": "qstyle_V2",
"body": "${1:varargout = }qstyle(${2:varargin})$0",
"description": "function varargout = qstyle(varargin)" 
},
"qtitle": {
"prefix": "qtitle",
"body": "${1:varargout = }qtitle(${2:varargin})$0",
"description": "function varargout = qtitle(varargin)" 
},
"rvar_V1": {
"prefix": "rvar_V1",
"body": "${1:varargout = }rvar(${2:varargin})$0",
"description": "function varargout = rvar(varargin)" 
},
"ucircle_V2": {
"prefix": "ucircle_V2",
"body": "${1:varargout = }ucircle(${2:varargin})$0",
"description": "function varargout = ucircle(varargin)" 
},
"vline_V3": {
"prefix": "vline_V3",
"body": "${1:varargout = }vline(${2:varargin})$0",
"description": "function varargout = vline(varargin)" 
},
"zeroline_V2": {
"prefix": "zeroline_V2",
"body": "${1:varargout = }zeroline(${2:varargin})$0",
"description": "function varargout = zeroline(varargin)" 
},
"baracf": {
"prefix": "baracf",
"body": "${1:handle = }baracf(${2:c}, ${3:x}, ${4:y}, ${5:varargin})$0",
"description": "function handle = baracf(c,x,y,varargin)" 
},
"barboxes": {
"prefix": "barboxes",
"body": "barboxes(${2:varargin})$0",
"description": "function barboxes(varargin)" 
},
"dbbloomberg": {
"prefix": "dbbloomberg",
"body": "${1:d = }dbbloomberg(${2:fname}, ${3:varargin})$0",
"description": "function d = dbbloomberg(fname,varargin)" 
},
"dbfred": {
"prefix": "dbfred",
"body": "${1:D = }dbfred(${2:FileName}, ${3:SheetName})$0",
"description": "function D = dbfred(FileName,SheetName)" 
},
"extractopt": {
"prefix": "extractopt",
"body": "${1:[extract, varargin] = }extractopt(${2:list}, ${3:varargin})$0",
"description": "function [extract,varargin] = extractopt(list,varargin)" 
},
"file2char_V2": {
"prefix": "file2char_V2",
"body": "${1:[C, Flag] = }file2char(${2:FName}, ${3:Type}, ${4:Lines})$0",
"description": "function [C,Flag] = file2char(FName,Type,Lines)" 
},
"findnaninf": {
"prefix": "findnaninf",
"body": "${1:index = }findnaninf(${2:list}, ${3:x}, ${4:varargin})$0",
"description": "function index = findnaninf(list,x,varargin)" 
},
"frf2gain": {
"prefix": "frf2gain",
"body": "${1:F = }frf2gain(${2:F}, ${3:varargin})$0",
"description": "function F = frf2gain(F,varargin)" 
},
"frf2phase": {
"prefix": "frf2phase",
"body": "${1:[Rad, Per] = }frf2phase(${2:F}, ${3:varargin})$0",
"description": "function [Rad,Per] = frf2phase(F,varargin)" 
},
"getrealsmall": {
"prefix": "getrealsmall",
"body": "${1:realsmall = }getrealsmall(${2:varargin})$0",
"description": "function realsmall = getrealsmall(varargin)" 
},
"getsample": {
"prefix": "getsample",
"body": "${1:[sample, flag] = }getsample(${2:y})$0",
"description": "function [sample,flag] = getsample(y)" 
},
"getsubposition": {
"prefix": "getsubposition",
"body": "${1:x = }getsubposition(${2:varargin})$0",
"description": "function x = getsubposition(varargin)" 
},
"ginverse": {
"prefix": "ginverse",
"body": "${1:[a, r] = }ginverse(${2:a})$0",
"description": "function [a,r] = ginverse(a)" 
},
"interpmatch": {
"prefix": "interpmatch",
"body": "${1:y2 = }interpmatch(${2:y1}, ${3:n})$0",
"description": "function y2 = interpmatch(y1,n)" 
},
"maxabs_V1": {
"prefix": "maxabs_V1",
"body": "${1:d = }maxabs(${2:x}, ${3:y})$0",
"description": "function d = maxabs(x,y)" 
},
"maxabs0_V2": {
"prefix": "maxabs0_V2",
"body": "${1:d = }maxabs0(${2:x}, ${3:y})$0",
"description": "function d = maxabs0(x,y)" 
},
"maxabsinf": {
"prefix": "maxabsinf",
"body": "${1:d = }maxabsinf(${2:x}, ${3:y})$0",
"description": "function d = maxabsinf(x,y)" 
},
"nanmaxabs": {
"prefix": "nanmaxabs",
"body": "${1:d = }nanmaxabs(${2:x})$0",
"description": "function d = nanmaxabs(x)" 
},
"nextsubplot": {
"prefix": "nextsubplot",
"body": "${1:h = }nextsubplot(${2:x}, ${3:y})$0",
"description": "function h = nextsubplot(x,y)" 
},
"nowrunning": {
"prefix": "nowrunning",
"body": "nowrunning$0",
"description": "function nowrunning()" 
},
"printmsg": {
"prefix": "printmsg",
"body": "printmsg(${2:class}, ${3:type}, ${4:msg}, ${5:list}, ${6:code})$0",
"description": "function printmsg(class,type,msg,list,code)" 
},
"randnlatin": {
"prefix": "randnlatin",
"body": "${1:[X, Z] = }randnlatin(${2:P}, ${3:N})$0",
"description": "function [X,Z] = randnlatin(P,N)" 
},
"randsn": {
"prefix": "randsn",
"body": "${1:r = }randsn(${2:dim}, ${3:Ex}, ${4:Sx}, ${5:tau})$0",
"description": "function r = randsn(dim,Ex,Sx,tau)" 
},
"rank3d": {
"prefix": "rank3d",
"body": "${1:x = }rank3d(${2:X})$0",
"description": "function x = rank3d(X)" 
},
"ref": {
"prefix": "ref",
"body": "${1:x = }ref(${2:x}, ${3:varargin})$0",
"description": "function x = ref(x,varargin)" 
},
"reporting_V4": {
"prefix": "reporting_V4",
"body": "${1:D = }reporting(${2:Inp}, ${3:D}, ${4:Range}, ${5:varargin})$0",
"description": "function D = reporting(Inp,D,Range,varargin)" 
},
"reportoptions": {
"prefix": "reportoptions",
"body": "reportoptions$0",
"description": "reportoptions" 
},
"select_V2": {
"prefix": "select_V2",
"body": "${1:[X, Inx, Select, NotFound] = }select(${2:X}, ${3:Descript}, ${4:Select})$0",
"description": "function [X,Inx,Select,NotFound] = select(X,Descript,Select)" 
},
"setrange": {
"prefix": "setrange",
"body": "${1:range = }setrange(${2:range}, ${3:infrange})$0",
"description": "function range = setrange(range,infrange)" 
},
"shift": {
"prefix": "shift",
"body": "${1:y = }shift(${2:x}, ${3:s})$0",
"description": "function y = shift(x,s)" 
},
"snormpdf": {
"prefix": "snormpdf",
"body": "${1:[f, mu, sigma] = }snormpdf(${2:x}, ${3:Ex}, ${4:Sx}, ${5:tau})$0",
"description": "function [f,mu,sigma] = snormpdf(x,Ex,Sx,tau)" 
},
"sstatefile_V2": {
"prefix": "sstatefile_V2",
"body": "sstatefile(${2:inputfile}, ${3:outputfile}, ${4:varargin})$0",
"description": "function sstatefile(inputfile,outputfile,varargin)" 
},
"svar_V1": {
"prefix": "svar_V1",
"body": "${1:varargout = }svar(${2:varargin})$0",
"description": "function varargout = svar(varargin)" 
},
"tickyears": {
"prefix": "tickyears",
"body": "tickyears(${2:varargin})$0",
"description": "function tickyears(varargin)" 
},
"xsf2coher": {
"prefix": "xsf2coher",
"body": "${1:C = }xsf2coher(${2:S}, ${3:varargin})$0",
"description": "function C = xsf2coher(S,varargin)" 
},
"xsf2gain": {
"prefix": "xsf2gain",
"body": "${1:G = }xsf2gain(${2:S}, ${3:varargin})$0",
"description": "function G = xsf2gain(S,varargin)" 
},
"xsf2phase": {
"prefix": "xsf2phase",
"body": "${1:[Rad, Per] = }xsf2phase(${2:S}, ${3:varargin})$0",
"description": "function [Rad,Per] = xsf2phase(S,varargin)" 
},
"xtickfrq2per": {
"prefix": "xtickfrq2per",
"body": "xtickfrq2per(${2:h}, ${3:format})$0",
"description": "function xtickfrq2per(h,format)" 
},
"dbase2tsd": {
"prefix": "dbase2tsd",
"body": "${1:[saved, range] = }dbase2tsd(${2:d}, ${3:fname}, ${4:varargin})$0",
"description": "function [saved,range] = dbase2tsd(d,fname,varargin)" 
},
"dynare2iris": {
"prefix": "dynare2iris",
"body": "${1:logbook = }dynare2iris(${2:inputfile}, ${3:outputfile})$0",
"description": "function logbook = dynare2iris(inputfile,outputfile)" 
},
"eviewsdb2irisdb": {
"prefix": "eviewsdb2irisdb",
"body": "eviewsdb2irisdb(${2:inputname}, ${3:outputname}, ${4:freq})$0",
"description": "function eviewsdb2irisdb(inputname,outputname,freq)" 
},
"fromaremos": {
"prefix": "fromaremos",
"body": "${1:d = }fromaremos(${2:banks}, ${3:names}, ${4:varargin})$0",
"description": "function d = fromaremos(banks,names,varargin)" 
},
"loadstruct": {
"prefix": "loadstruct",
"body": "${1:x = }loadstruct(${2:fname})$0",
"description": "function x = loadstruct(fname)" 
},
"savestruct": {
"prefix": "savestruct",
"body": "savestruct(${2:fname}, ${3:x})$0",
"description": "function savestruct(fname,x)" 
},
"toaremos": {
"prefix": "toaremos",
"body": "${1:list = }toaremos(${2:d}, ${3:bank}, ${4:varargin})$0",
"description": "function list = toaremos(d,bank,varargin)" 
},
"troll2iris": {
"prefix": "troll2iris",
"body": "${1:iris = }troll2iris(${2:trollfname}, ${3:irisfname}, ${4:varargin})$0",
"description": "function iris = troll2iris(trollfname,irisfname,varargin)" 
},
"tsd2dbase": {
"prefix": "tsd2dbase",
"body": "${1:d = }tsd2dbase(${2:fname}, ${3:varargin})$0",
"description": "function d = tsd2dbase(fname,varargin)" 
},
"warning__V2": {
"prefix": "warning__V2",
"body": "warning_(${2:code}, ${3:list}, ${4:varargin})$0",
"description": "function warning_(code,list,varargin)" 
},
"isanychar": {
"prefix": "isanychar",
"body": "${1:flag = }isanychar(${2:x}, ${3:list})$0",
"description": "function flag = isanychar(x,list)" 
},
"isanychari": {
"prefix": "isanychari",
"body": "${1:flag = }isanychari(${2:x}, ${3:list})$0",
"description": "function flag = isanychari(x,list)" 
},
"iscellstrwithnans": {
"prefix": "iscellstrwithnans",
"body": "${1:flag = }iscellstrwithnans(${2:x})$0",
"description": "function flag = iscellstrwithnans(x)" 
},
"iseye": {
"prefix": "iseye",
"body": "${1:flag = }iseye(${2:x}, ${3:tol})$0",
"description": "function flag = iseye(x,tol)" 
},
"isfavar": {
"prefix": "isfavar",
"body": "${1:flag = }isfavar(${2:x})$0",
"description": "function flag = isfavar(x)" 
},
"isfunc": {
"prefix": "isfunc",
"body": "${1:FLAG = }isfunc(${2:X})$0",
"description": "function FLAG = isfunc(X)" 
},
"islogicalscalar": {
"prefix": "islogicalscalar",
"body": "${1:flag = }islogicalscalar(${2:x})$0",
"description": "function flag = islogicalscalar(x)" 
},
"ismodel": {
"prefix": "ismodel",
"body": "${1:flag = }ismodel(${2:x})$0",
"description": "function flag = ismodel(x)" 
},
"isnumericscalar": {
"prefix": "isnumericscalar",
"body": "${1:flag = }isnumericscalar(${2:x})$0",
"description": "function flag = isnumericscalar(x)" 
},
"isplan": {
"prefix": "isplan",
"body": "${1:flag = }isplan(${2:x})$0",
"description": "function flag = isplan(x)" 
},
"isround": {
"prefix": "isround",
"body": "${1:FLAG = }isround(${2:X})$0",
"description": "function FLAG = isround(X)" 
},
"isrvar": {
"prefix": "isrvar",
"body": "${1:flag = }isrvar(${2:x})$0",
"description": "function flag = isrvar(x)" 
},
"isscript": {
"prefix": "isscript",
"body": "${1:flag = }isscript(${2:file})$0",
"description": "function flag = isscript(file)" 
},
"issingle": {
"prefix": "issingle",
"body": "${1:flag = }issingle(${2:x})$0",
"description": "function flag = issingle(x), flag = isa(x,'single'); end" 
},
"issvar": {
"prefix": "issvar",
"body": "${1:flag = }issvar(${2:x})$0",
"description": "function flag = issvar(x)" 
},
"issymbolic": {
"prefix": "issymbolic",
"body": "${1:flag = }issymbolic$0",
"description": "function flag = issymbolic()" 
},
"istseries": {
"prefix": "istseries",
"body": "${1:flag = }istseries(${2:x})$0",
"description": "function flag = istseries(x)" 
},
"isvar": {
"prefix": "isvar",
"body": "${1:flag = }isvar(${2:x})$0",
"description": "function flag = isvar(x)" 
},
"iswarning": {
"prefix": "iswarning",
"body": "${1:flag = }iswarning(${2:component})$0",
"description": "function flag = iswarning(component)" 
},
"dates_V2": {
"prefix": "dates_V2",
"body": "dates$0",
"description": "dates" 
},
"basic_dbase": {
"prefix": "basic_dbase",
"body": "basic_dbase$0",
"description": "basic_dbase" 
},
"basic_tseries": {
"prefix": "basic_tseries",
"body": "basic_tseries$0",
"description": "basic_tseries" 
},
"more_dbase": {
"prefix": "more_dbase",
"body": "more_dbase$0",
"description": "more_dbase" 
},
"var_basics": {
"prefix": "var_basics",
"body": "var_basics$0",
"description": "var_basics" 
},
"var_vec_bvar_basics": {
"prefix": "var_vec_bvar_basics",
"body": "var_vec_bvar_basics$0",
"description": "var_vec_bvar_basics" 
},
"read_me_first": {
"prefix": "read_me_first",
"body": "read_me_first$0",
"description": "read_me_first" 
},
"x12_basics": {
"prefix": "x12_basics",
"body": "x12_basics$0",
"description": "x12_basics" 
},
"x12_dummy": {
"prefix": "x12_dummy",
"body": "x12_dummy$0",
"description": "x12_dummy" 
},
"x12_missing_observations": {
"prefix": "x12_missing_observations",
"body": "x12_missing_observations$0",
"description": "x12_missing_observations" 
},
"x12_models_and_forecasts": {
"prefix": "x12_models_and_forecasts",
"body": "x12_models_and_forecasts$0",
"description": "x12_models_and_forecasts" 
},
"x12_modes": {
"prefix": "x12_modes",
"body": "x12_modes$0",
"description": "x12_modes" 
},
"MixedEffects_Introduction": {
"prefix": "MixedEffects_Introduction",
"body": "MixedEffects_Introduction$0",
"description": "MixedEffects_Introduction" 
},
"MixedEffects_Panel_Data": {
"prefix": "MixedEffects_Panel_Data",
"body": "MixedEffects_Panel_Data$0",
"description": "MixedEffects_Panel_Data" 
},
"compareForecasts": {
"prefix": "compareForecasts",
"body": "compareForecasts(${2:publicdata}, ${3:allStates}, ${4:missingDataStates}, ${5:missingYears})$0",
"description": "function compareForecasts(publicdata, allStates, missingDataStates, missingYears)" 
},
"loadPanelData": {
"prefix": "loadPanelData",
"body": "loadPanelData$0",
"description": "loadPanelData" 
},
"loadPublicData": {
"prefix": "loadPublicData",
"body": "loadPublicData$0",
"description": "loadPublicData" 
},
"plotForecast": {
"prefix": "plotForecast",
"body": "${1:varargout = }plotForecast(${2:lme}, ${3:newdata}, ${4:xdata}, ${5:group}, ${6:removeddata})$0",
"description": "function varargout = plotForecast(lme,newdata,xdata,group,removeddata)" 
},
"plotIntervals": {
"prefix": "plotIntervals",
"body": "${1:varargout = }plotIntervals(${2:Table}, ${3:Formula}, ${4:group})$0",
"description": "function varargout = plotIntervals(Table,Formula,group)" 
},
"adjustBW": {
"prefix": "adjustBW",
"body": "adjustBW(${2:npd}, ${3:s})$0",
"description": "function adjustBWs(npd,s)" 
},
"adjustPoints": {
"prefix": "adjustPoints",
"body": "adjustPoints(${2:kde}, ${3:delta})$0",
"description": "function adjustPoints(kde, delta)" 
},
"adjustWeights": {
"prefix": "adjustWeights",
"body": "adjustWeights(${2:npd}, ${3:w})$0",
"description": "function adjustWeights(npd,w)" 
},
"condition_V2": {
"prefix": "condition_V2",
"body": "${1:p = }condition(${2:dens}, ${3:ind}, ${4:A})$0",
"description": "function p = condition(dens,ind,A)" 
},
"covar": {
"prefix": "covar",
"body": "${1:cov = }covar(${2:dens}, ${3:noBiasFlag})$0",
"description": "function cov = covar(dens,noBiasFlag)" 
},
"display_V5": {
"prefix": "display_V5",
"body": "display(${2:kde})$0",
"description": "function display(kde)" 
},
"double_V2": {
"prefix": "double_V2",
"body": "${1:d = }double(${2:npd})$0",
"description": "function d = double(npd)" 
},
"entropy": {
"prefix": "entropy",
"body": "${1:H = }entropy(${2:x}, ${3:type}, ${4:varargin})$0",
"description": "function H = entropy(x,type,varargin)" 
},
"entropyGrad": {
"prefix": "entropyGrad",
"body": "${1:err = }entropyGrad(${2:npd}, ${3:entType})$0",
"description": "function err=entropyGrad(npd,entType)" 
},
"evalAvgLogL": {
"prefix": "evalAvgLogL",
"body": "${1:ll = }evalAvgLogL(${2:dens}, ${3:at}, ${4:varargin})$0",
"description": "function ll = evalAvgLogL(dens,at,varargin)" 
},
"evalFGT": {
"prefix": "evalFGT",
"body": "${1:[estimate, errbound] = }evalFGT(${2:pt}, ${3:q}, ${4:Ncoeff}, ${5:Nclusters}, ${6:rCutoff})$0",
"description": "function [estimate,errbound] = evalFGT(pt,q,Ncoeff,Nclusters,rCutoff)" 
},
"evalIFGT": {
"prefix": "evalIFGT",
"body": "${1:[estimate, errbound] = }evalIFGT(${2:pp}, ${3:q}, ${4:Ncoeff}, ${5:Nclusters}, ${6:rCutoff})$0",
"description": "function [estimate,errbound] = evalIFGT(pp,q,Ncoeff,Nclusters,rCutoff)" 
},
"evaluate": {
"prefix": "evaluate",
"body": "${1:p = }evaluate(${2:dens}, ${3:pos}, ${4:varargin})$0",
"description": "function p = evaluate(dens,pos,varargin)" 
},
"findBWCrit": {
"prefix": "findBWCrit",
"body": "${1:BW = }findBWCrit(${2:p}, ${3:Nmodes})$0",
"description": "function BW=findBWCrit(p,Nmodes)" 
},
"getBW": {
"prefix": "getBW",
"body": "${1:s = }getBW(${2:dens}, ${3:ind})$0",
"description": "function s = getBW(dens,ind)" 
},
"getDim": {
"prefix": "getDim",
"body": "${1:D = }getDim(${2:npd})$0",
"description": "function D = getDim(npd)" 
},
"getNeff": {
"prefix": "getNeff",
"body": "${1:Neff = }getNeff(${2:dens})$0",
"description": "function Neff = getNeff(dens)" 
},
"getNpts": {
"prefix": "getNpts",
"body": "${1:N = }getNpts(${2:npd})$0",
"description": "function N = getNpts(npd)" 
},
"getPoints": {
"prefix": "getPoints",
"body": "${1:pts = }getPoints(${2:dens}, ${3:ind})$0",
"description": "function pts = getPoints(dens,ind)" 
},
"getType": {
"prefix": "getType",
"body": "${1:typeS = }getType(${2:dens})$0",
"description": "function typeS = getType(dens)" 
},
"getWeights": {
"prefix": "getWeights",
"body": "${1:wts = }getWeights(${2:dens}, ${3:ind})$0",
"description": "function wts = getWeights(dens,ind)" 
},
"hist": {
"prefix": "hist",
"body": "${1:[h, varargout] = }hist(${2:dens}, ${3:N}, ${4:dims}, ${5:range})$0",
"description": "function [h,varargout] = hist(dens,N,dims,range)" 
},
"ise": {
"prefix": "ise",
"body": "${1:v = }ise(${2:p}, ${3:q}, ${4:type})$0",
"description": "function v = ise(p,q,type)" 
},
"joinTrees": {
"prefix": "joinTrees",
"body": "${1:t1 = }joinTrees(${2:t1}, ${3:t2}, ${4:alpha})$0",
"description": "function t1 = joinTrees(t1, t2, alpha)" 
},
"kde_V2": {
"prefix": "kde_V2",
"body": "${1:p = }kde(${2:points}, ${3:ks}, ${4:weights}, ${5:typeS})$0",
"description": "function p = kde(points,ks,weights,typeS)" 
},
"klGrad": {
"prefix": "klGrad",
"body": "${1:[err1, err2] = }klGrad(${2:p1}, ${3:p2}, ${4:estType})$0",
"description": "function [err1,err2]=klGrad(p1,p2,estType)" 
},
"kld": {
"prefix": "kld",
"body": "${1:KLD = }kld(${2:p1}, ${3:p2}, ${4:type}, ${5:varargin})$0",
"description": "function KLD = kld(p1,p2,type,varargin)" 
},
"knn": {
"prefix": "knn",
"body": "${1:[neighbors, distance] = }knn(${2:kde}, ${3:points}, ${4:k})$0",
"description": "function [neighbors, distance] = knn(kde,points,k)" 
},
"ksize": {
"prefix": "ksize",
"body": "${1:npd = }ksize(${2:npd}, ${3:type}, ${4:varargin})$0",
"description": "function npd = ksize(npd,type,varargin)" 
},
"llGrad": {
"prefix": "llGrad",
"body": "${1:[err1, err2] = }llGrad(${2:p1}, ${3:p2}, ${4:type}, ${5:tolGrad}, ${6:tolEval})$0",
"description": "function [err1, err2] = llGrad(p1,p2,type,tolGrad,tolEval)" 
},
"llHess": {
"prefix": "llHess",
"body": "${1:Hessians = }llHess(${2:p1}, ${3:p2}, ${4:tolGrad}, ${5:tolEval})$0",
"description": "function Hessians = llHess(p1,p2,tolGrad,tolEval)" 
},
"marginal": {
"prefix": "marginal",
"body": "${1:p = }marginal(${2:dens}, ${3:ind})$0",
"description": "function p = marginal(dens,ind)" 
},
"max": {
"prefix": "max",
"body": "${1:X = }max(${2:kde})$0",
"description": "function X = max(kde)" 
},
"mean_V3": {
"prefix": "mean_V3",
"body": "${1:m = }mean(${2:dens})$0",
"description": "function m = mean(dens)" 
},
"miGrad": {
"prefix": "miGrad",
"body": "${1:errI = }miGrad(${2:x}, ${3:a_index}, ${4:type}, ${5:y}, ${6:gamma})$0",
"description": "function errI = miGrad(x,a_index,type,y,gamma)" 
},
"modes": {
"prefix": "modes",
"body": "${1:modeList = }modes(${2:dens}, ${3:start})$0",
"description": "function modeList = modes(dens,start)" 
},
"plot_V4": {
"prefix": "plot_V4",
"body": "${1:H = }plot(${2:x}, ${3:varargin})$0",
"description": "function H=plot(x,varargin)" 
},
"productApprox": {
"prefix": "productApprox",
"body": "${1:[dens, ind] = }productApprox(${2:npd0}, ${3:npds}, ${4:anFns}, ${5:anParams}, ${6:type}, ${7:varargin})$0",
"description": "function [dens,ind] = productApprox(npd0, npds , anFns,anParams , type, varargin)" 
},
"productExact": {
"prefix": "productExact",
"body": "${1:dens = }productExact(${2:npd_placeholder}, ${3:npdensities}, ${4:analyticFns}, ${5:analyticParams})$0",
"description": "function dens = productExact(npd_placeholder, npdensities , analyticFns, analyticParams)" 
},
"quantize": {
"prefix": "quantize",
"body": "${1:p = }quantize(${2:p}, ${3:R}, ${4:minV}, ${5:maxV}, ${6:minS}, ${7:maxS})$0",
"description": "function p = quantize(p,R,minV,maxV,minS,maxS)" 
},
"reduce_V2": {
"prefix": "reduce_V2",
"body": "${1:[q, o2, o3] = }reduce(${2:p}, ${3:type}, ${4:varargin})$0",
"description": "function [q,o2,o3] = reduce(p,type,varargin)" 
},
"resample": {
"prefix": "resample",
"body": "${1:p2 = }resample(${2:p}, ${3:Np}, ${4:ksType})$0",
"description": "function p2 = resample(p,Np,ksType)" 
},
"rescale": {
"prefix": "rescale",
"body": "${1:npd = }rescale(${2:npd}, ${3:factor})$0",
"description": "function npd = rescale(npd,factor)" 
},
"sample": {
"prefix": "sample",
"body": "${1:[points, ind] = }sample(${2:npd}, ${3:Npts}, ${4:ind})$0",
"description": "function [points,ind] = sample(npd,Npts,ind)" 
},
"demo_kde_1": {
"prefix": "demo_kde_1",
"body": "demo_kde_1$0",
"description": "demo_kde_1" 
},
"demo_kde_2": {
"prefix": "demo_kde_2",
"body": "demo_kde_2$0",
"description": "demo_kde_2" 
},
"demo_kde_3": {
"prefix": "demo_kde_3",
"body": "demo_kde_3$0",
"description": "demo_kde_3" 
},
"demo_regress": {
"prefix": "demo_regress",
"body": "demo_regress$0",
"description": "demo_regress" 
},
"makemex": {
"prefix": "makemex",
"body": "makemex$0",
"description": "makemex" 
},
"DualTree": {
"prefix": "DualTree",
"body": "${1:[e, varargout] = }DualTree(${2:dens}, ${3:pos}, ${4:lvFlag})$0",
"description": "function [e,varargout] = DualTree(dens,pos,lvFlag)" 
},
"entropyDist": {
"prefix": "entropyDist",
"body": "${1:h = }entropyDist(${2:npd})$0",
"description": "function h=entropyDist(npd)" 
},
"entropyGradDist": {
"prefix": "entropyGradDist",
"body": "${1:Dvect = }entropyGradDist(${2:npd})$0",
"description": "function Dvect=entropyGradDist(npd)" 
},
"golden": {
"prefix": "golden",
"body": "${1:[xmin, fmin] = }golden(${2:npd}, ${3:f}, ${4:ax}, ${5:bx}, ${6:cx}, ${7:tol}, ${8:varargin})$0",
"description": "function [xmin, fmin] = golden(npd, f, ax, bx, cx, tol, varargin)" 
},
"iqr": {
"prefix": "iqr",
"body": "${1:i = }iqr(${2:x})$0",
"description": "function i = iqr(x)" 
},
"ksizeCalcUseful": {
"prefix": "ksizeCalcUseful",
"body": "ksizeCalcUseful$0",
"description": "function ksizeCalcUseful" 
},
"ksizeHall": {
"prefix": "ksizeHall",
"body": "${1:h = }ksizeHall(${2:npd})$0",
"description": "function h = ksizeHall(npd)" 
},
"ksizeMSP": {
"prefix": "ksizeMSP",
"body": "${1:h = }ksizeMSP(${2:npd}, ${3:noIQR})$0",
"description": "function h = ksizeMSP(npd,noIQR)" 
},
"ksizeROT": {
"prefix": "ksizeROT",
"body": "${1:h = }ksizeROT(${2:npd}, ${3:noIQR})$0",
"description": "function h = ksizeROT(npd,noIQR)" 
},
"prodSampleImportGauss": {
"prefix": "prodSampleImportGauss",
"body": "${1:[ptsS, wtsS] = }prodSampleImportGauss(${2:npds}, ${3:Npts}, ${4:anFns}, ${5:anParams}, ${6:overSamp}, ${7:type})$0",
"description": "function [ptsS, wtsS] = prodSampleImportGaussian(npds,Npts,anFns,anParams,overSamp,type)" 
},
"prodSampleImportMix": {
"prefix": "prodSampleImportMix",
"body": "${1:[ptsS, wtsS] = }prodSampleImportMix(${2:npds}, ${3:Npts}, ${4:anFns}, ${5:anParams}, ${6:overSamp}, ${7:type})$0",
"description": "function [ptsS, wtsS] = prodSampleImportMix(npds,Npts,anFns,anParams,overSamp,type)" 
},
"prodSampleImportPair": {
"prefix": "prodSampleImportPair",
"body": "${1:[ptsS, wtsS] = }prodSampleImportPair(${2:npds}, ${3:Npts}, ${4:anFns}, ${5:anParams}, ${6:overSamp}, ${7:type})$0",
"description": "function [ptsS, wtsS] = prodSampleImportPair(npds,Npts,anFns,anParams,overSamp,type)" 
},
"randKernel": {
"prefix": "randKernel",
"body": "${1:samples = }randKernel(${2:N}, ${3:M}, ${4:type})$0",
"description": "function samples = randKernel(N,M,type)" 
},
"reduceKD": {
"prefix": "reduceKD",
"body": "${1:[q, e, c] = }reduceKD(${2:p}, ${3:varargin})$0",
"description": "function [q,e,c]=reduceKD(p,varargin)" 
},
"PSFA2010": {
"prefix": "PSFA2010",
"body": "${1:[parameters, ste, robste, LL, BCindex] = }PSFA2010(${2:dta}, ${3:nx}, ${4:para0}, ${5:dis}, ${6:flag}, ${7:options})$0",
"description": "function [parameters,ste,robste,LL,BCindex]=PSFA2010(dta,nx,para0,dis,flag,options)" 
},
"demo": {
"prefix": "demo",
"body": "demo$0",
"description": "demo" 
},
"corrcell": {
"prefix": "corrcell",
"body": "${1:varargout = }corrcell(${2:cellA}, ${3:cellB})$0",
"description": "function varargout = corrcell(cellA,cellB)" 
},
"corrcellhpfilter": {
"prefix": "corrcellhpfilter",
"body": "${1:varargout = }corrcellhpfilter(${2:cellA}, ${3:cellB}, ${4:lamb})$0",
"description": "function varargout = corrcellhpfilter(cellA, cellB, lamb)" 
},
"allstats": {
"prefix": "allstats",
"body": "${1:STATM = }allstats(${2:varargin})$0",
"description": "function STATM = allstats(varargin)" 
},
"cor": {
"prefix": "cor",
"body": "${1:[C, pvalue] = }cor(${2:X}, ${3:Y}, ${4:h}, ${5:small})$0",
"description": "function [C,pvalue]=cor(X,Y,h,small)" 
},
"getDescriptiveStatistics": {
"prefix": "getDescriptiveStatistics",
"body": "${1:ds = }getDescriptiveStatistics(${2:x}, ${3:param})$0",
"description": "function ds = getDescriptiveStatistics(x, param)" 
},
"summarize": {
"prefix": "summarize",
"body": "${1:result = }summarize(${2:x}, ${3:options})$0",
"description": "function result = summarize(x,options)" 
},
"summarizeDatetime": {
"prefix": "summarizeDatetime",
"body": "${1:Tsum = }summarizeDatetime(${2:x})$0",
"description": "function Tsum = summarizeDatetime(x)" 
},
"summarizeString": {
"prefix": "summarizeString",
"body": "${1:Tsum = }summarizeString(${2:x})$0",
"description": "function Tsum = summarizeString(x)" 
},
"X_corrplots_1": {
"prefix": "X_corrplots_1",
"body": "X_corrplots_1$0",
"description": "X_corrplots_1" 
},
"X_corrplots_2": {
"prefix": "X_corrplots_2",
"body": "X_corrplots_2$0",
"description": "X_corrplots_2" 
},
"mycolor_V1": {
"prefix": "mycolor_V1",
"body": "${1:code = }mycolor(${2:colorcode}, ${3:selectplate})$0",
"description": "function code = mycolor(colorcode, selectplate)" 
},
"mycorrplot_1": {
"prefix": "mycorrplot_1",
"body": "mycorrplot_1(${2:X}, ${3:xnames}, ${4:type}, ${5:colorbaron}, ${6:textin})$0",
"description": "function mycorrplot_1(X,xnames,type, colorbaron,textin)" 
},
"mycorrplot_2": {
"prefix": "mycorrplot_2",
"body": "mycorrplot_2(${2:X}, ${3:Y}, ${4:xnames}, ${5:ynames}, ${6:type}, ${7:plotson})$0",
"description": "function mycorrplot_2(X,Y,xnames,ynames,type, plotson)" 
},
"nancorr": {
"prefix": "nancorr",
"body": "${1:[Rout, Pout, Nout] = }nancorr(${2:X}, ${3:Y})$0",
"description": "function [Rout  , Pout, Nout] = nancorr(X, Y)" 
},
"plot_circle": {
"prefix": "plot_circle",
"body": "plot_circle(${2:center}, ${3:radius}, ${4:facecolor}, ${5:edgcolor})$0",
"description": "function plot_circle(center,radius,facecolor,edgcolor)" 
},
"tnames": {
"prefix": "tnames",
"body": "${1:out = }tnames(${2:tablein})$0",
"description": "function out  = tnames(tablein)" 
},
"taylordiag": {
"prefix": "taylordiag",
"body": "${1:varargout = }taylordiag(${2:varargin})$0",
"description": "function varargout = taylordiag(varargin)" 
},
"taylordiag_test": {
"prefix": "taylordiag_test",
"body": "taylordiag_test$0",
"description": "taylordiag_test" 
},
"._taylordiag": {
"prefix": "._taylordiag",
"body": "._taylordiag$0",
"description": "._taylordiag" 
},
"._taylordiag_test": {
"prefix": "._taylordiag_test",
"body": "._taylordiag_test$0",
"description": "._taylordiag_test" 
},
"aicsbcAuto": {
"prefix": "aicsbcAuto",
"body": "${1:aic sbc aicmin sbcmin = }aicsbcAuto(${2:ycell}, ${3:nlagmax}, ${4:varargin})$0",
"description": "function [aic sbc aicmin sbcmin] = aicsbcAuto(ycell,nlagmax,varargin)" 
},
"BQ": {
"prefix": "BQ",
"body": "${1:[resVAR, resVMA, resVMABQ] = }BQ(${2:ycellt}, ${3:nlagVAR}, ${4:nlagVMA})$0",
"description": "function [resVAR, resVMA, resVMABQ] = BQ(ycellt,nlagVAR, nlagVMA)" 
},
"VARconst": {
"prefix": "VARconst",
"body": "${1:[betaHat, e, seps, yhat] = }VARconst(${2:data}, ${3:nlagVAR}, ${4:varargin})$0",
"description": "function [betaHat,e,seps, yhat] = VARconst(data, nlagVAR,varargin)" 
},
"VMAfromVAR": {
"prefix": "VMAfromVAR",
"body": "${1:varepsilon = }VMAfromVAR(${2:phi}, ${3:threshholdS})$0",
"description": "function varepsilon = VMAfromVAR(phi, threshholdS)" 
},
"cca_granger_regress_lags": {
"prefix": "cca_granger_regress_lags",
"body": "${1:tbprb = }cca_granger_regress_lags(${2:Xcell}, ${3:lags}, ${4:varargin})$0",
"description": "function tbprb = cca_granger_regress_lags(Xcell, lags, varargin)" 
},
"cca_plotcausality_lrw": {
"prefix": "cca_plotcausality_lrw",
"body": "cca_plotcausality_lrw(${2:M}, ${3:nodenames}, ${4:sfac}, ${5:ret})$0",
"description": "function cca_plotcausality_lrw(M,nodenames,sfac,ret);" 
},
"isCointegrationJohansen": {
"prefix": "isCointegrationJohansen",
"body": "${1:varargout = }isCointegrationJohansen(${2:varargin})$0",
"description": "function varargout =  isCointegrationJohansen(varargin)" 
},
"isconvergenceMLDcell": {
"prefix": "isconvergenceMLDcell",
"body": "${1:MLD = }isconvergenceMLDcell(${2:cellA})$0",
"description": "function MLD = isconvergenceMLDcell(cellA)" 
},
"johansencell": {
"prefix": "johansencell",
"body": "${1:varargout = }johansencell(${2:y}, ${3:cterm}, ${4:nlag})$0",
"description": "function varargout = johansencell(y,cterm,nlag)" 
},
"pvlaue2pvaluestarCoint": {
"prefix": "pvlaue2pvaluestarCoint",
"body": "${1:col3a = }pvlaue2pvaluestarCoint(${2:col3a}, ${3:col456a})$0",
"description": "function col3a = pvlaue2pvaluestarCoint(col3a,col456a)" 
},
"CGC": {
"prefix": "CGC",
"body": "${1:F = }CGC(${2:Y}, ${3:X}, ${4:pmin}, ${5:pmax})$0",
"description": "function F=CGC(Y,X,pmin,pmax)" 
},
"Cau": {
"prefix": "Cau",
"body": "${1:timeCau = }Cau(${2:timeSeriesX}, ${3:timeSeriesY}, ${4:order})$0",
"description": "function timeCau = Cau(timeSeriesX,timeSeriesY,order)" 
},
"bootstrap_Cau": {
"prefix": "bootstrap_Cau",
"body": "${1:F F0 = }bootstrap_Cau(${2:X}, ${3:Y}, ${4:p}, ${5:varargin})$0",
"description": "function [F F0]=bootstrap_Cau(X,Y,p,varargin)" 
},
"bootstrap_PCau": {
"prefix": "bootstrap_PCau",
"body": "${1:F F0 = }bootstrap_PCau(${2:X}, ${3:Y}, ${4:Z}, ${5:p}, ${6:varargin})$0",
"description": "function [F F0]=bootstrap_PCau(X,Y,Z,p,varargin)" 
},
"find_ancestors": {
"prefix": "find_ancestors",
"body": "${1:rec = }find_ancestors(${2:Data}, ${3:T}, ${4:order}, ${5:nXP}, ${6:tau}, ${7:maxGroup})$0",
"description": "function rec=find_ancestors(Data,T, order, nXP,tau, maxGroup)" 
},
"get_all_words": {
"prefix": "get_all_words",
"body": "${1:L = }get_all_words(${2:k}, ${3:A})$0",
"description": "function L=get_all_words(k,A)" 
},
"parse_pv_pairs": {
"prefix": "parse_pv_pairs",
"body": "${1:params = }parse_pv_pairs(${2:params}, ${3:pv_pairs})$0",
"description": "function params=parse_pv_pairs(params,pv_pairs)" 
},
"progressbar_V2": {
"prefix": "progressbar_V2",
"body": "progressbar(${2:fractiondone}, ${3:position})$0",
"description": "function progressbar(fractiondone, position)" 
},
"random_armodel": {
"prefix": "random_armodel",
"body": "${1:A = }random_armodel(${2:p}, ${3:N}, ${4:M})$0",
"description": "function A=random_armodel(p,N,M)" 
},
"test_random_armodel": {
"prefix": "test_random_armodel",
"body": "${1:rec = }test_random_armodel(${2:p}, ${3:N}, ${4:M}, ${5:varargin})$0",
"description": "function rec=test_random_armodel(p,N,M,varargin)" 
},
"isstationaryadf": {
"prefix": "isstationaryadf",
"body": "${1:IS_STATIONARY_adf = }isstationaryadf(${2:ycell}, ${3:modeltype}, ${4:nlagmax})$0",
"description": "function IS_STATIONARY_adf = isstationaryadf(ycell,modeltype, nlagmax)" 
},
"isstationaryadf_d": {
"prefix": "isstationaryadf_d",
"body": "isstationaryadf_d$0",
"description": "isstationaryadf_d" 
},
"isstationaryadfnan": {
"prefix": "isstationaryadfnan",
"body": "${1:res = }isstationaryadfnan(${2:ycell})$0",
"description": "function res = isstationaryadfnan(ycell)" 
},
"isstationarykpss": {
"prefix": "isstationarykpss",
"body": "${1:[IS_STATIONARY_kpss, tY_kpsscell, tYd_kpsscell] = }isstationarykpss(${2:ycell})$0",
"description": "function [IS_STATIONARY_kpss, tY_kpsscell, tYd_kpsscell ] = isstationarykpss(ycell)" 
},
"isstationarypp": {
"prefix": "isstationarypp",
"body": "${1:IS_STATIONARY_pp = }isstationarypp(${2:ycell}, ${3:modeltype}, ${4:nlagmax})$0",
"description": "function IS_STATIONARY_pp = isstationarypp(ycell,modeltype, nlagmax)" 
},
"autcov": {
"prefix": "autcov",
"body": "${1:[c0, cv, r] = }autcov(${2:y}, ${3:lag}, ${4:ic})$0",
"description": "function [c0,cv,r]=autcov(y,lag,ic)" 
},
"blacktu": {
"prefix": "blacktu",
"body": "${1:[w, m] = }blacktu(${2:n})$0",
"description": "function [w,m]=blacktu(n)" 
},
"cleangnuplot": {
"prefix": "cleangnuplot",
"body": "cleangnuplot(${2:path})$0",
"description": "function cleangnuplot(path)" 
},
"cleangraph": {
"prefix": "cleangraph",
"body": "cleangraph(${2:path})$0",
"description": "function cleangraph(path)" 
},
"cleanoutpat": {
"prefix": "cleanoutpat",
"body": "cleanoutpat(${2:path})$0",
"description": "function cleanoutpat(path)" 
},
"cleanoutput": {
"prefix": "cleanoutput",
"body": "cleanoutput(${2:path})$0",
"description": "function cleanoutput(path)" 
},
"closefig": {
"prefix": "closefig",
"body": "closefig$0",
"description": "function closefig" 
},
"cohepha": {
"prefix": "cohepha",
"body": "${1:[co, ph, ga] = }cohepha(${2:cxy}, ${3:qxy}, ${4:fxx}, ${5:fyy})$0",
"description": "function [co,ph,ga]=cohepha(cxy,qxy,fxx,fyy)" 
},
"cospqu": {
"prefix": "cospqu",
"body": "${1:[c, q] = }cospqu(${2:x}, ${3:y}, ${4:win})$0",
"description": "function [c,q]=cospqu(x,y,win)" 
},
"croscor": {
"prefix": "croscor",
"body": "${1:[cr, stdx, stdy] = }croscor(${2:x}, ${3:y}, ${4:lag})$0",
"description": "function [cr,stdx,stdy]=croscor(x,y,lag)" 
},
"croscov": {
"prefix": "croscov",
"body": "${1:cv = }croscov(${2:x}, ${3:y}, ${4:lag})$0",
"description": "function cv=croscov(x,y,lag)" 
},
"crosspan": {
"prefix": "crosspan",
"body": "${1:[co, ph, ga, fx, fy, frq] = }crosspan(${2:x}, ${3:y}, ${4:win})$0",
"description": "function [co,ph,ga,fx,fy,frq]=crosspan(x,y,win)" 
},
"cumnor": {
"prefix": "cumnor",
"body": "${1:[Result, Ccum] = }cumnor(${2:Arg})$0",
"description": "function [Result,Ccum] = cumnor(Arg)" 
},
"dtrcfildes": {
"prefix": "dtrcfildes",
"body": "dtrcfildes$0",
"description": "dtrcfildes" 
},
"dtsmatlab": {
"prefix": "dtsmatlab",
"body": "dtsmatlab$0",
"description": "dtsmatlab" 
},
"dtstmatlab": {
"prefix": "dtstmatlab",
"body": "dtstmatlab$0",
"description": "dtstmatlab" 
},
"durlev": {
"prefix": "durlev",
"body": "${1:[fi, pc] = }durlev(${2:c0}, ${3:cv})$0",
"description": "function [fi,pc]=durlev(c0,cv)" 
},
"durwat": {
"prefix": "durwat",
"body": "${1:Dw = }durwat(${2:Res}, ${3:J}, ${4:K}, ${5:Ss})$0",
"description": "function Dw = durwat(Res,J,K,Ss)" 
},
"gacf": {
"prefix": "gacf",
"body": "${1:[gammcf, gln] = }gacf(${2:A}, ${3:X})$0",
"description": "function [gammcf,gln] = gacf(A,X)" 
},
"gammln": {
"prefix": "gammln",
"body": "${1:g = }gammln(${2:x})$0",
"description": "function g=gammln(x)" 
},
"gammp": {
"prefix": "gammp",
"body": "${1:y = }gammp(${2:A}, ${3:X})$0",
"description": "function y=gammp(A,X)" 
},
"gser": {
"prefix": "gser",
"body": "${1:[gamser, gln] = }gser(${2:A}, ${3:X})$0",
"description": "function [gamser,gln]=gser(A,X)" 
},
"hist2": {
"prefix": "hist2",
"body": "${1:[bin, cutpnt, otlrt0, otlr] = }hist2(${2:Y}, ${3:med})$0",
"description": "function [bin,cutpnt,otlrt0,otlr] = hist2(Y,med)" 
},
"inputval": {
"prefix": "inputval",
"body": "${1:nn = }inputval(${2:c}, ${3:str})$0",
"description": "function nn = inputval(c,str)" 
},
"lbs": {
"prefix": "lbs",
"body": "${1:[qstat, pval, df, sea] = }lbs(${2:ne}, ${3:p}, ${4:r}, ${5:nr})$0",
"description": "function [qstat,pval,df,sea] = lbs(ne,p,r,nr)" 
},
"leeseries": {
"prefix": "leeseries",
"body": "leeseries$0",
"description": "leeseries" 
},
"makedatei": {
"prefix": "makedatei",
"body": "${1:datei = }makedatei(${2:out})$0",
"description": "function datei = makedatei(out)" 
},
"parzen": {
"prefix": "parzen",
"body": "${1:[w, m] = }parzen(${2:n})$0",
"description": "function [w,m]=parzen(n)" 
},
"periodg": {
"prefix": "periodg",
"body": "${1:f = }periodg(${2:x}, ${3:win})$0",
"description": "function f=periodg(x,win)" 
},
"pforcst": {
"prefix": "pforcst",
"body": "pforcst(${2:out}, ${3:cw})$0",
"description": "function pforcst(out,cw)" 
},
"readgraphfile": {
"prefix": "readgraphfile",
"body": "${1:str = }readgraphfile(${2:fname})$0",
"description": "function str = readgraphfile(fname)" 
},
"readgraphfilep": {
"prefix": "readgraphfilep",
"body": "${1:str = }readgraphfilep(${2:fname})$0",
"description": "function str = readgraphfilep(fname)" 
},
"rescomp": {
"prefix": "rescomp",
"body": "${1:infr = }rescomp(${2:e}, ${3:lag}, ${4:nr}, ${5:Ss}, ${6:conp}, ${7:sconp}, ${8:Ff}, ${9:ndrs}, ${10:nreg})$0",
"description": "function infr = rescomp(e,lag,nr,Ss,conp,sconp,Ff,ndrs,nreg)" 
},
"residcp": {
"prefix": "residcp",
"body": "${1:infr = }residcp(${2:out}, ${3:lag}, ${4:cw}, ${5:pflag})$0",
"description": "function infr = residcp(out,lag,cw,pflag)" 
},
"rpplot": {
"prefix": "rpplot",
"body": "rpplot(${2:r}, ${3:p}, ${4:sea}, ${5:sep}, ${6:c}, ${7:fname})$0",
"description": "function rpplot(r,p,sea,sep,c,fname)" 
},
"runcom": {
"prefix": "runcom",
"body": "${1:[n0, n1, nr, Tval] = }runcom(${2:X}, ${3:N}, ${4:Xmed})$0",
"description": "function [n0,n1,nr,Tval] = runcom(X,N,Xmed)" 
},
"runtracematlab": {
"prefix": "runtracematlab",
"body": "${1:out = }runtracematlab(${2:fname}, ${3:path})$0",
"description": "function out = runtracematlab(fname,path)" 
},
"runtrcfildes": {
"prefix": "runtrcfildes",
"body": "runtrcfildes(${2:fname}, ${3:path})$0",
"description": "function runtrcfildes(fname,path)" 
},
"runtsmatlab": {
"prefix": "runtsmatlab",
"body": "${1:out = }runtsmatlab(${2:fname}, ${3:path})$0",
"description": "function out = runtsmatlab(fname,path)" 
},
"runtstmatlab": {
"prefix": "runtstmatlab",
"body": "${1:out = }runtstmatlab(${2:fname1}, ${3:fname2}, ${4:path})$0",
"description": "function out = runtstmatlab(fname1,fname2,path)" 
},
"seeorigtr": {
"prefix": "seeorigtr",
"body": "seeorigtr$0",
"description": "seeorigtr" 
},
"skewkur": {
"prefix": "skewkur",
"body": "${1:[Skew, Kurt, Sk, Ss] = }skewkur(${2:e}, ${3:me}, ${4:ve}, ${5:nr}, ${6:ne})$0",
"description": "function [Skew,Kurt,Sk,Ss]=  skewkur(e,me,ve,nr,ne)" 
},
"spectran": {
"prefix": "spectran",
"body": "spectran(${2:win}, ${3:corlag}, ${4:graph}, ${5:per}, ${6:lpath}, ${7:ppath})$0",
"description": "function spectran(win,corlag,graph,per,lpath,ppath)" 
},
"tasa_V1": {
"prefix": "tasa_V1",
"body": "${1:yt = }tasa(${2:y}, ${3:s})$0",
"description": "function yt=tasa(y,s)" 
},
"tracematlab": {
"prefix": "tracematlab",
"body": "${1:outtst = }tracematlab(${2:d}, ${3:path})$0",
"description": "function outtst = tracematlab(d,path)" 
},
"trcfildes": {
"prefix": "trcfildes",
"body": "trcfildes(${2:d}, ${3:path})$0",
"description": "function trcfildes(d,path)" 
},
"tsmatlab": {
"prefix": "tsmatlab",
"body": "${1:outts = }tsmatlab(${2:c}, ${3:path})$0",
"description": "function outts = tsmatlab(c,path)" 
},
"tstmatlab": {
"prefix": "tstmatlab",
"body": "${1:outtst = }tstmatlab(${2:c}, ${3:d}, ${4:path})$0",
"description": "function outtst = tstmatlab(c,d,path)" 
},
"tukhan": {
"prefix": "tukhan",
"body": "${1:[w, m] = }tukhan(${2:n})$0",
"description": "function [w,m]=tukhan(n)" 
},
"wrsertrc": {
"prefix": "wrsertrc",
"body": "wrsertrc(${2:c})$0",
"description": "function wrsertrc(c)" 
},
"wrsertrm": {
"prefix": "wrsertrm",
"body": "wrsertrm(${2:c})$0",
"description": "function wrsertrm(c)" 
},
"GBFSINW": {
"prefix": "GBFSINW",
"body": "GBFSINW$0",
"description": "GBFSINW" 
},
"GBFTBPW": {
"prefix": "GBFTBPW",
"body": "GBFTBPW$0",
"description": "GBFTBPW" 
},
"ctla": {
"prefix": "ctla",
"body": "${1:[num, den] = }ctla(${2:th1}, ${3:ths}, ${4:s})$0",
"description": "function [num,den]=ctla(th1,ths,s)" 
},
"freqsd": {
"prefix": "freqsd",
"body": "${1:h = }freqsd(${2:num}, ${3:den}, ${4:w})$0",
"description": "function h=freqsd(num,den,w)" 
},
"galfw": {
"prefix": "galfw",
"body": "galfw$0",
"description": "galfw" 
},
"gbftanw": {
"prefix": "gbftanw",
"body": "gbftanw$0",
"description": "gbftanw" 
},
"gpalsinw": {
"prefix": "gpalsinw",
"body": "gpalsinw$0",
"description": "gpalsinw" 
},
"gpaltanw": {
"prefix": "gpaltanw",
"body": "gpaltanw$0",
"description": "gpaltanw" 
},
"gpaltbpw": {
"prefix": "gpaltbpw",
"body": "gpaltbpw$0",
"description": "gpaltbpw" 
},
"CWAGE_trc": {
"prefix": "CWAGE_trc",
"body": "${1:e = }CWAGE_trc$0",
"description": "function e = CWAGE_trc" 
},
"GWAGE_trc": {
"prefix": "GWAGE_trc",
"body": "${1:e = }GWAGE_trc$0",
"description": "function e = GWAGE_trc" 
},
"LYR_trc": {
"prefix": "LYR_trc",
"body": "${1:e = }LYR_trc$0",
"description": "function e = LYR_trc" 
},
"bpmfildes_trc": {
"prefix": "bpmfildes_trc",
"body": "${1:e = }bpmfildes_trc$0",
"description": "function e = bpmfildes_trc" 
},
"bpq1fildes_trc": {
"prefix": "bpq1fildes_trc",
"body": "${1:e = }bpq1fildes_trc$0",
"description": "function e = bpq1fildes_trc" 
},
"bpq2fildes_trc": {
"prefix": "bpq2fildes_trc",
"body": "${1:e = }bpq2fildes_trc$0",
"description": "function e = bpq2fildes_trc" 
},
"examp1_trc": {
"prefix": "examp1_trc",
"body": "${1:e = }examp1_trc$0",
"description": "function e = examp1_trc" 
},
"examp6_trc": {
"prefix": "examp6_trc",
"body": "${1:e = }examp6_trc$0",
"description": "function e = examp6_trc" 
},
"examp7_trc": {
"prefix": "examp7_trc",
"body": "${1:e = }examp7_trc$0",
"description": "function e = examp7_trc" 
},
"examp8_trc": {
"prefix": "examp8_trc",
"body": "${1:e = }examp8_trc$0",
"description": "function e = examp8_trc" 
},
"gercw_trc": {
"prefix": "gercw_trc",
"body": "${1:e = }gercw_trc$0",
"description": "function e = gercw_trc" 
},
"gergw_trc": {
"prefix": "gergw_trc",
"body": "${1:e = }gergw_trc$0",
"description": "function e = gergw_trc" 
},
"gerpr_trc": {
"prefix": "gerpr_trc",
"body": "${1:e = }gerpr_trc$0",
"description": "function e = gerpr_trc" 
},
"gu11na_trc": {
"prefix": "gu11na_trc",
"body": "${1:e = }gu11na_trc$0",
"description": "function e = gu11na_trc" 
},
"hpqfildes_trc": {
"prefix": "hpqfildes_trc",
"body": "${1:e = }hpqfildes_trc$0",
"description": "function e = hpqfildes_trc" 
},
"ipiale_trc": {
"prefix": "ipiale_trc",
"body": "${1:e = }ipiale_trc$0",
"description": "function e = ipiale_trc" 
},
"ipialehp_trc": {
"prefix": "ipialehp_trc",
"body": "${1:e = }ipialehp_trc$0",
"description": "function e = ipialehp_trc" 
},
"lyrcgwage_trc": {
"prefix": "lyrcgwage_trc",
"body": "${1:e = }lyrcgwage_trc$0",
"description": "function e = lyrcgwage_trc" 
},
"oipitot_trc": {
"prefix": "oipitot_trc",
"body": "${1:e = }oipitot_trc$0",
"description": "function e = oipitot_trc" 
},
"ptfhp_trc": {
"prefix": "ptfhp_trc",
"body": "${1:e = }ptfhp_trc$0",
"description": "function e = ptfhp_trc" 
},
"uscw_trc": {
"prefix": "uscw_trc",
"body": "${1:e = }uscw_trc$0",
"description": "function e = uscw_trc" 
},
"usgnp_trc": {
"prefix": "usgnp_trc",
"body": "${1:e = }usgnp_trc$0",
"description": "function e = usgnp_trc" 
},
"usgw_trc": {
"prefix": "usgw_trc",
"body": "${1:e = }usgw_trc$0",
"description": "function e = usgw_trc" 
},
"uspr_trc": {
"prefix": "uspr_trc",
"body": "${1:e = }uspr_trc$0",
"description": "function e = uspr_trc" 
},
"CWAGE_trm": {
"prefix": "CWAGE_trm",
"body": "${1:c = }CWAGE_trm$0",
"description": "function c = CWAGE_trm" 
},
"GWAGE_trm": {
"prefix": "GWAGE_trm",
"body": "${1:c = }GWAGE_trm$0",
"description": "function c = GWAGE_trm" 
},
"GWage_STSM_trm": {
"prefix": "GWage_STSM_trm",
"body": "${1:c = }GWage_STSM_trm$0",
"description": "function c = GWage_STSM_trm" 
},
"IPIUS_trm": {
"prefix": "IPIUS_trm",
"body": "${1:c = }IPIUS_trm$0",
"description": "function c = IPIUS_trm" 
},
"LYR_trm": {
"prefix": "LYR_trm",
"body": "${1:c = }LYR_trm$0",
"description": "function c = LYR_trm" 
},
"PV_trm": {
"prefix": "PV_trm",
"body": "${1:c = }PV_trm$0",
"description": "function c = PV_trm" 
},
"ParaCTi_trm": {
"prefix": "ParaCTi_trm",
"body": "${1:c = }ParaCTi_trm$0",
"description": "function c = ParaCTi_trm" 
},
"ParaCTp_trm": {
"prefix": "ParaCTp_trm",
"body": "${1:c = }ParaCTp_trm$0",
"description": "function c = ParaCTp_trm" 
},
"ParaCTt_trm": {
"prefix": "ParaCTt_trm",
"body": "${1:c = }ParaCTt_trm$0",
"description": "function c = ParaCTt_trm" 
},
"ParaCTu_trm": {
"prefix": "ParaCTu_trm",
"body": "${1:c = }ParaCTu_trm$0",
"description": "function c = ParaCTu_trm" 
},
"ParaCTy_trm": {
"prefix": "ParaCTy_trm",
"body": "${1:c = }ParaCTy_trm$0",
"description": "function c = ParaCTy_trm" 
},
"afconsnc_trm": {
"prefix": "afconsnc_trm",
"body": "${1:c = }afconsnc_trm$0",
"description": "function c = afconsnc_trm" 
},
"airline_trm": {
"prefix": "airline_trm",
"body": "${1:c = }airline_trm$0",
"description": "function c = airline_trm" 
},
"ccaacons_trm": {
"prefix": "ccaacons_trm",
"body": "${1:c = }ccaacons_trm$0",
"description": "function c = ccaacons_trm" 
},
"createcellfortstmatlab": {
"prefix": "createcellfortstmatlab",
"body": "${1:c = }createcellfortstmatlab(${2:xcell}, ${3:subnames})$0",
"description": "function c = createcellfortstmatlab(xcell,subnames)" 
},
"csi_us_v_trm": {
"prefix": "csi_us_v_trm",
"body": "${1:c = }csi_us_v_trm$0",
"description": "function c = csi_us_trm" 
},
"epaccaaagr_trm": {
"prefix": "epaccaaagr_trm",
"body": "${1:c = }epaccaaagr_trm$0",
"description": "function c = epaccaaagr_trm" 
},
"examp20_trm": {
"prefix": "examp20_trm",
"body": "${1:c = }examp20_trm$0",
"description": "function c = examp20_trm" 
},
"examp6_trm": {
"prefix": "examp6_trm",
"body": "${1:c = }examp6_trm$0",
"description": "function c = examp6_trm" 
},
"examp7_trm": {
"prefix": "examp7_trm",
"body": "${1:c = }examp7_trm$0",
"description": "function c = examp7_trm" 
},
"examp8_trm": {
"prefix": "examp8_trm",
"body": "${1:c = }examp8_trm$0",
"description": "function c = examp8_trm" 
},
"gercw_trm": {
"prefix": "gercw_trm",
"body": "${1:c = }gercw_trm$0",
"description": "function c = gercw_trm" 
},
"gergw_trm": {
"prefix": "gergw_trm",
"body": "${1:c = }gergw_trm$0",
"description": "function c = gergw_trm" 
},
"gerpr_trm": {
"prefix": "gerpr_trm",
"body": "${1:c = }gerpr_trm$0",
"description": "function c = gerpr_trm" 
},
"gerprcwgw_trm": {
"prefix": "gerprcwgw_trm",
"body": "${1:c = }gerprcwgw_trm$0",
"description": "function c = gerprcwgw_trm" 
},
"gu11na_trm": {
"prefix": "gu11na_trm",
"body": "${1:c = }gu11na_trm$0",
"description": "function c = gu11na_trm" 
},
"ipiale_trm": {
"prefix": "ipiale_trm",
"body": "${1:c = }ipiale_trm$0",
"description": "function c = ipiale_trm" 
},
"lyrcgwage_trm": {
"prefix": "lyrcgwage_trm",
"body": "${1:c = }lyrcgwage_trm$0",
"description": "function c = lyrcgwage_trm" 
},
"oipitot_trm": {
"prefix": "oipitot_trm",
"body": "${1:c = }oipitot_trm(${2:ppath})$0",
"description": "function c = oipitot_trm(ppath)" 
},
"simul_trm": {
"prefix": "simul_trm",
"body": "${1:c = }simul_trm$0",
"description": "function c = simul_trm" 
},
"uscw_trm": {
"prefix": "uscw_trm",
"body": "${1:c = }uscw_trm$0",
"description": "function c = uscw_trm" 
},
"usgnp_trm": {
"prefix": "usgnp_trm",
"body": "${1:c = }usgnp_trm$0",
"description": "function c = usgnp_trm" 
},
"usgw_trm": {
"prefix": "usgw_trm",
"body": "${1:c = }usgw_trm$0",
"description": "function c = usgw_trm" 
},
"uspr_trm": {
"prefix": "uspr_trm",
"body": "${1:c = }uspr_trm$0",
"description": "function c = uspr_trm" 
},
"usprcwgw_trm": {
"prefix": "usprcwgw_trm",
"body": "${1:c = }usprcwgw_trm$0",
"description": "function c = usprcwgw_trm" 
},
"viviusa_trm": {
"prefix": "viviusa_trm",
"body": "${1:c = }viviusa_trm$0",
"description": "function c = viviusa_trm" 
},
"xss_trm": {
"prefix": "xss_trm",
"body": "${1:c = }xss_trm$0",
"description": "function c = xss_trm" 
},
"createcellfortstmatlabEviews": {
"prefix": "createcellfortstmatlabEviews",
"body": "${1:c = }createcellfortstmatlabEviews(${2:xcell}, ${3:subnames})$0",
"description": "function c = createcellfortstmatlabEviews(xcell,subnames)" 
},
"BK": {
"prefix": "BK",
"body": "${1:Y = }BK(${2:X}, ${3:freq_min}, ${4:freq_max}, ${5:K})$0",
"description": "function  Y  = BK(X,freq_min,freq_max,K)" 
},
"B_Butt": {
"prefix": "B_Butt",
"body": "${1:B = }B_Butt(${2:freq_min}, ${3:freq_max}, ${4:T}, ${5:options})$0",
"description": "function    B  = B_Butt(freq_min,freq_max,T,options)" 
},
"B_HP": {
"prefix": "B_HP",
"body": "${1:B = }B_HP(${2:freq_min}, ${3:freq_max}, ${4:T}, ${5:options})$0",
"description": "function    B  = B_HP(freq_min,freq_max,T,options)" 
},
"B_IF": {
"prefix": "B_IF",
"body": "${1:B = }B_IF(${2:freq_min}, ${3:freq_max}, ${4:N})$0",
"description": "function  B  = B_IF(freq_min,freq_max,N)" 
},
"CF": {
"prefix": "CF",
"body": "${1:Y = }CF(${2:X}, ${3:freq_min}, ${4:freq_max})$0",
"description": "function  Y  = CF(X,freq_min,freq_max)" 
},
"HP": {
"prefix": "HP",
"body": "${1:Y = }HP(${2:X}, ${3:freq}, ${4:type})$0",
"description": "function Y = HP(X,freq,type)" 
},
"HPfilterQ": {
"prefix": "HPfilterQ",
"body": "${1:Q = }HPfilterQ(${2:y}, ${3:lamda})$0",
"description": "function Q = HPfilterQ(y, lamda);" 
},
"HPfilterQ_d": {
"prefix": "HPfilterQ_d",
"body": "HPfilterQ_d$0",
"description": "HPfilterQ_d" 
},
"butterworth": {
"prefix": "butterworth",
"body": "${1:Y = }butterworth(${2:X}, ${3:freq}, ${4:n})$0",
"description": "function Y = butterworth(X,freq,n)" 
},
"hpfilterCycle": {
"prefix": "hpfilterCycle",
"body": "${1:c = }hpfilterCycle(${2:x}, ${3:lamda})$0",
"description": "function c = hpfilterCycle(x, lamda)" 
},
"hpfilterMatlab": {
"prefix": "hpfilterMatlab",
"body": "${1:[Trend, Cyclical] = }hpfilterMatlab(${2:Y}, ${3:smoothing})$0",
"description": "function [Trend,Cyclical] = hpfilterMatlab(Y,smoothing)" 
},
"hpfilterNaN": {
"prefix": "hpfilterNaN",
"body": "${1:xTrendCycle = }hpfilterNaN(${2:x}, ${3:lambda})$0",
"description": "function xTrendCycle = hpfilterNaN(x,lambda)" 
},
"hpfilterQOptimal": {
"prefix": "hpfilterQOptimal",
"body": "${1:[hptrend, hpcycle, varargout] = }hpfilterQOptimal(${2:x}, ${3:lambdaInterval})$0",
"description": "function [hptrend, hpcycle, varargout] = hpfilterQOptimal(x,  lambdaInterval)" 
},
"hpfilterQOptimal_d (Yang Yi's conflicted copy 2012-11-25)": {
"prefix": "hpfilterQOptimal_d (Yang Yi's conflicted copy 2012-11-25)",
"body": "hpfilterQOptimal_d (Yang Yi's conflicted copy 2012-11-25)$0",
"description": "hpfilterQOptimal_d (Yang Yi's conflicted copy 2012-11-25)" 
},
"hpfilterQOptimal_d": {
"prefix": "hpfilterQOptimal_d",
"body": "hpfilterQOptimal_d$0",
"description": "hpfilterQOptimal_d" 
},
"nanhpfilter": {
"prefix": "nanhpfilter",
"body": "${1:[Trend, Cyclical] = }nanhpfilter(${2:Y}, ${3:smoothing})$0",
"description": "function  [Trend,Cyclical] = nanhpfilter(Y,smoothing)" 
},
"one_sided_hp_filter_kalman": {
"prefix": "one_sided_hp_filter_kalman",
"body": "${1:[ytrend, ycycle] = }one_sided_hp_filter_kalman(${2:y}, ${3:lambda}, ${4:x_user}, ${5:P_user}, ${6:discard})$0",
"description": "function [ytrend,ycycle]=one_sided_hp_filter_kalman(y,lambda,x_user,P_user,discard)" 
},
"one_sided_hp_filter_serial": {
"prefix": "one_sided_hp_filter_serial",
"body": "${1:[ytrend, ycycle] = }one_sided_hp_filter_serial(${2:y}, ${3:lambda}, ${4:discard})$0",
"description": "function [ytrend,ycycle]=one_sided_hp_filter_serial(y,lambda,discard)" 
},
"optimal_filter": {
"prefix": "optimal_filter",
"body": "${1:Y = }optimal_filter(${2:X}, ${3:type}, ${4:freq_min}, ${5:freq_max}, ${6:options})$0",
"description": "function Y = optimal_filter(X,type,freq_min,freq_max,options)" 
},
"sparse_hp_filter": {
"prefix": "sparse_hp_filter",
"body": "${1:[ytrend, ycycle] = }sparse_hp_filter(${2:y}, ${3:lambda})$0",
"description": "function [ytrend,ycycle]=sparse_hp_filter(y,lambda)" 
},
"Regstats2Demo": {
"prefix": "Regstats2Demo",
"body": "Regstats2Demo$0",
"description": "Regstats2Demo" 
},
"regstats2": {
"prefix": "regstats2",
"body": "${1:stats = }regstats2(${2:responses}, ${3:data}, ${4:model}, ${5:whichstats})$0",
"description": "function stats=regstats2(responses,data,model,whichstats)" 
},
"seasonaladj": {
"prefix": "seasonaladj",
"body": "${1:xcell = }seasonaladj(${2:xcell}, ${3:subnames}, ${4:varargin})$0",
"description": "function xcell = seasonaladj(xcell,subnames,varargin)" 
},
"seasonaladj_d (lin renwen's conflicted copy 2012-10-11)": {
"prefix": "seasonaladj_d (lin renwen's conflicted copy 2012-10-11)",
"body": "seasonaladj_d (lin renwen's conflicted copy 2012-10-11)$0",
"description": "seasonaladj_d (lin renwen's conflicted copy 2012-10-11)" 
},
"seasonaladj_d": {
"prefix": "seasonaladj_d",
"body": "seasonaladj_d$0",
"description": "seasonaladj_d" 
},
"x12cell": {
"prefix": "x12cell",
"body": "${1:cellsa = }x12cell(${2:cellraw}, ${3:varargin})$0",
"description": "function cellsa = x12cell(cellraw, varargin)" 
},
"ts (lin renwen's conflicted copy 2012-10-11)": {
"prefix": "ts (lin renwen's conflicted copy 2012-10-11)",
"body": "${1:res = }ts (lin renwen's conflicted copy 2012-10-11)(${2:x}, ${3:nom}, ${4:year}, ${5:per}, ${6:s}, ${7:opc}, ${8:varargin})$0",
"description": "function [res]=ts(x,nom,year,per,s,opc,varargin)" 
},
"ts": {
"prefix": "ts",
"body": "${1:res = }ts(${2:x}, ${3:nom}, ${4:year}, ${5:per}, ${6:s}, ${7:opc}, ${8:varargin})$0",
"description": "function [res]=ts(x,nom,year,per,s,opc,varargin)" 
},
"ccaStartup": {
"prefix": "ccaStartup",
"body": "ccaStartup$0",
"description": "function ccaStartup" 
},
"cca_autonomy_regress": {
"prefix": "cca_autonomy_regress",
"body": "${1:ret = }cca_autonomy_regress(${2:X}, ${3:nlags})$0",
"description": "function [ret] = cca_autonomy_regress(X,nlags)" 
},
"cca_causaldensity": {
"prefix": "cca_causaldensity",
"body": "${1:ret = }cca_causaldensity(${2:GC}, ${3:PR})$0",
"description": "function [ret] = cca_causaldensity(GC,PR)" 
},
"cca_causaldensity_spectral": {
"prefix": "cca_causaldensity_spectral",
"body": "${1:ret = }cca_causaldensity_spectral(${2:GW}, ${3:thresh})$0",
"description": "function [ret] = cca_causaldensity_spectral(GW,thresh)" 
},
"cca_causalflow": {
"prefix": "cca_causalflow",
"body": "${1:ret = }cca_causalflow(${2:GC}, ${3:PR})$0",
"description": "function [ret] = cca_causalflow(GC,PR)" 
},
"cca_causalflow_spectral": {
"prefix": "cca_causalflow_spectral",
"body": "${1:ret = }cca_causalflow_spectral(${2:GW}, ${3:thresh})$0",
"description": "function [ret] = cca_causalflow_spectral(GW,thresh)" 
},
"cca_check_cov_stat": {
"prefix": "cca_check_cov_stat",
"body": "${1:unit_root = }cca_check_cov_stat(${2:X}, ${3:NLAGS})$0",
"description": "function unit_root = cca_check_cov_stat(X,NLAGS)" 
},
"cca_check_cov_stat_mtrial": {
"prefix": "cca_check_cov_stat_mtrial",
"body": "${1:unit_root = }cca_check_cov_stat_mtrial(${2:X}, ${3:Nr}, ${4:Nl}, ${5:NLAGS})$0",
"description": "function unit_root = cca_check_cov_stat_mtrial(X,Nr,Nl,NLAGS)" 
},
"cca_demo": {
"prefix": "cca_demo",
"body": "cca_demo(${2:DEMO})$0",
"description": "function cca_demo(DEMO)" 
},
"cca_detrend": {
"prefix": "cca_detrend",
"body": "${1:Y = }cca_detrend(${2:X})$0",
"description": "function [Y]=cca_detrend(X)" 
},
"cca_detrend_mtrial": {
"prefix": "cca_detrend_mtrial",
"body": "${1:Y = }cca_detrend_mtrial(${2:X}, ${3:Nr}, ${4:Nl})$0",
"description": "function [Y]=cca_detrend_mtrial(X,Nr,Nl)" 
},
"cca_diff": {
"prefix": "cca_diff",
"body": "${1:M2 = }cca_diff(${2:M})$0",
"description": "function [M2] = cca_diff(M)" 
},
"cca_diff_mtrial": {
"prefix": "cca_diff_mtrial",
"body": "${1:M2 = }cca_diff_mtrial(${2:M}, ${3:Nr}, ${4:Nl})$0",
"description": "function [M2] = cca_diff_mtrial(M,Nr,Nl)" 
},
"cca_find_model_order": {
"prefix": "cca_find_model_order",
"body": "${1:[bic, aic] = }cca_find_model_order(${2:X}, ${3:MINP}, ${4:MAXP})$0",
"description": "function [bic,aic] = cca_find_model_order(X,MINP,MAXP)" 
},
"cca_find_model_order_mtrial": {
"prefix": "cca_find_model_order_mtrial",
"body": "${1:[bic, aic] = }cca_find_model_order_mtrial(${2:X}, ${3:Nr}, ${4:Nl}, ${5:MINP}, ${6:MAXP})$0",
"description": "function [bic,aic] = cca_find_model_order_mtrial(X,Nr,Nl,MINP,MAXP)" 
},
"cca_find_model_order_optimized": {
"prefix": "cca_find_model_order_optimized",
"body": "${1:[bic, aic] = }cca_find_model_order_optimized(${2:X}, ${3:MINP}, ${4:MAXP})$0",
"description": "function [bic,aic] = cca_find_model_order_gpu_optimized(X,MINP,MAXP)" 
},
"cca_findsignificance": {
"prefix": "cca_findsignificance",
"body": "${1:[PR, q] = }cca_findsignificance(${2:ret}, ${3:pval}, ${4:CFLAG})$0",
"description": "function [PR,q] = cca_findsignificance(ret,pval,CFLAG)" 
},
"cca_findsignificance_autonomy": {
"prefix": "cca_findsignificance_autonomy",
"body": "${1:[PR, q] = }cca_findsignificance_autonomy(${2:ret}, ${3:pval}, ${4:CFLAG})$0",
"description": "function [PR,q] = cca_findsignificance_autonomy(ret,pval,CFLAG)" 
},
"cca_granger_regress": {
"prefix": "cca_granger_regress",
"body": "${1:ret = }cca_granger_regress(${2:X}, ${3:nlags}, ${4:STATFLAG})$0",
"description": "function [ret] = cca_granger_regress(X,nlags,STATFLAG)" 
},
"cca_granger_regress_main_lrw_demo": {
"prefix": "cca_granger_regress_main_lrw_demo",
"body": "cca_granger_regress_main_lrw_demo$0",
"description": "cca_granger_regress_main_lrw_demo" 
},
"cca_granger_regress_mtrial": {
"prefix": "cca_granger_regress_mtrial",
"body": "${1:ret = }cca_granger_regress_mtrial(${2:X}, ${3:Nr}, ${4:Nl}, ${5:nlags}, ${6:STATFLAG})$0",
"description": "function ret = cca_granger_regress_mtrial(X,Nr,Nl,nlags,STATFLAG)" 
},
"cca_granger_regress_optimized": {
"prefix": "cca_granger_regress_optimized",
"body": "${1:ret = }cca_granger_regress_optimized(${2:X}, ${3:nlags}, ${4:STATFLAG})$0",
"description": "function [ret] = cca_granger_regress_optimized(X,nlags,STATFLAG)" 
},
"cca_granger_regress_zerolag": {
"prefix": "cca_granger_regress_zerolag",
"body": "${1:ret = }cca_granger_regress_zerolag(${2:X}, ${3:nlags}, ${4:STATFLAG})$0",
"description": "function [ret] = cca_granger_regress_zerolag(X,nlags,STATFLAG)" 
},
"cca_kpss": {
"prefix": "cca_kpss",
"body": "${1:[H, ks] = }cca_kpss(${2:X}, ${3:nlags}, ${4:pval})$0",
"description": "function [H,ks] = cca_kpss(X,nlags,pval)" 
},
"cca_kpss_mtrial": {
"prefix": "cca_kpss_mtrial",
"body": "${1:[H, ks] = }cca_kpss_mtrial(${2:X}, ${3:Nr}, ${4:Nl}, ${5:nlags}, ${6:pval})$0",
"description": "function [H,ks] = cca_kpss_mtrial(X,Nr,Nl,nlags,pval)" 
},
"cca_multitaper": {
"prefix": "cca_multitaper",
"body": "${1:y = }cca_multitaper(${2:x}, ${3:Fs}, ${4:Fnoise}, ${5:WSIZE})$0",
"description": "function y = cca_multitaper(x,Fs,Fnoise,WSIZE)" 
},
"cca_pajek": {
"prefix": "cca_pajek",
"body": "cca_pajek(${2:PR}, ${3:GC}, ${4:fname}, ${5:nodenames})$0",
"description": "function cca_pajek(PR,GC,fname,nodenames)" 
},
"cca_partialgc": {
"prefix": "cca_partialgc",
"body": "${1:ret = }cca_partialgc(${2:X}, ${3:nlags}, ${4:STATFLAG})$0",
"description": "function ret = cca_partialgc(X,nlags,STATFLAG)" 
},
"cca_partialgc_doi_bstrap": {
"prefix": "cca_partialgc_doi_bstrap",
"body": "${1:ret = }cca_partialgc_doi_bstrap(${2:X}, ${3:Nr}, ${4:Nl}, ${5:nlags}, ${6:nBoot}, ${7:nBwin}, ${8:pval}, ${9:CORRTYPE}, ${10:DOIFLAG})$0",
"description": "function ret = cca_partialgc_doi_bstrap(X,Nr,Nl,nlags,nBoot,nBwin,pval,CORRTYPE,DOIFLAG)" 
},
"cca_partialgc_doi_permute": {
"prefix": "cca_partialgc_doi_permute",
"body": "${1:ret = }cca_partialgc_doi_permute(${2:X}, ${3:Nr}, ${4:Nl}, ${5:nlags}, ${6:nPerm}, ${7:nBwin}, ${8:pval}, ${9:CORRTYPE}, ${10:DOIFLAG})$0",
"description": "function ret = cca_partialgc_doi_permute(X,Nr,Nl,nlags,nPerm,nBwin,pval,CORRTYPE,DOIFLAG)" 
},
"cca_partialgc_mtrial": {
"prefix": "cca_partialgc_mtrial",
"body": "${1:ret = }cca_partialgc_mtrial(${2:X}, ${3:Nr}, ${4:Nl}, ${5:nlags}, ${6:STATFLAG})$0",
"description": "function ret = cca_partialgc_mtrial(X,Nr,Nl,nlags,STATFLAG)" 
},
"cca_plotcausality": {
"prefix": "cca_plotcausality",
"body": "cca_plotcausality(${2:M}, ${3:nodenames}, ${4:sfac})$0",
"description": "function cca_plotcausality(M,nodenames,sfac);" 
},
"cca_plotcausality_spectral": {
"prefix": "cca_plotcausality_spectral",
"body": "cca_plotcausality_spectral(${2:M}, ${3:freqs}, ${4:c1}, ${5:c2})$0",
"description": "function cca_plotcausality_spectral(M,freqs,c1,c2)" 
},
"cca_plotcoherence": {
"prefix": "cca_plotcoherence",
"body": "cca_plotcoherence(${2:COH}, ${3:freqs}, ${4:varargin})$0",
"description": "function cca_plotcoherence(COH,freqs,varargin)" 
},
"cca_plotevent": {
"prefix": "cca_plotevent",
"body": "cca_plotevent(${2:X}, ${3:Nr}, ${4:Nl})$0",
"description": "function cca_plotevent(X,Nr,Nl);" 
},
"cca_pwcausal": {
"prefix": "cca_pwcausal",
"body": "${1:[GW, COH, pp, waut, cons] = }cca_pwcausal(${2:X}, ${3:Nr}, ${4:Nl}, ${5:nlags}, ${6:Fs}, ${7:freq}, ${8:STATFLAG})$0",
"description": "function [GW,COH,pp,waut,cons]=cca_pwcausal(X,Nr,Nl,nlags,Fs,freq, STATFLAG)" 
},
"cca_pwcausal_bstrap": {
"prefix": "cca_pwcausal_bstrap",
"body": "${1:ret = }cca_pwcausal_bstrap(${2:X}, ${3:Nr}, ${4:Nl}, ${5:nlags}, ${6:nBoot}, ${7:nBwin}, ${8:Fs}, ${9:freq}, ${10:pval}, ${11:CORRTYPE})$0",
"description": "function ret = cca_pwcausal_bstrap(X,Nr,Nl,nlags,nBoot,nBwin,Fs,freq,pval,CORRTYPE)" 
},
"cca_pwcausal_permute": {
"prefix": "cca_pwcausal_permute",
"body": "${1:ret = }cca_pwcausal_permute(${2:X}, ${3:Nr}, ${4:Nl}, ${5:nlags}, ${6:nPerm}, ${7:nBwin}, ${8:Fs}, ${9:freq}, ${10:pval}, ${11:CORRTYPE})$0",
"description": "function ret = cca_pwcausal_permute(X,Nr,Nl,nlags,nPerm,nBwin,Fs,freq,pval,CORRTYPE)" 
},
"cca_regress": {
"prefix": "cca_regress",
"body": "${1:ret = }cca_regress(${2:X}, ${3:nlags}, ${4:STATFLAG})$0",
"description": "function [ret] = cca_regress(X,nlags,STATFLAG)" 
},
"cca_regress_optimized": {
"prefix": "cca_regress_optimized",
"body": "${1:ret = }cca_regress_optimized(${2:X}, ${3:nlags}, ${4:STATFLAG})$0",
"description": "function [ret] = cca_regress_optimized(X,nlags,STATFLAG)" 
},
"cca_rm_ensemblemean": {
"prefix": "cca_rm_ensemblemean",
"body": "${1:[X2, M, E] = }cca_rm_ensemblemean(${2:X}, ${3:Nr}, ${4:Nl}, ${5:FLAG})$0",
"description": "function [X2,M,E] = cca_rm_ensemblemean(X,Nr,Nl,FLAG)" 
},
"cca_rm_temporalmean": {
"prefix": "cca_rm_temporalmean",
"body": "${1:[X2, m, e] = }cca_rm_temporalmean(${2:X}, ${3:FLAG})$0",
"description": "function [X2,m,e] = cca_rm_temporalmean(X,FLAG)" 
},
"cca_rm_temporalmean_mtrial": {
"prefix": "cca_rm_temporalmean_mtrial",
"body": "${1:X2 = }cca_rm_temporalmean_mtrial(${2:X}, ${3:Nr}, ${4:Nl}, ${5:FLAG})$0",
"description": "function [X2] = cca_rm_temporalmean_mtrial(X,Nr,Nl,FLAG)" 
},
"cca_sacf": {
"prefix": "cca_sacf",
"body": "${1:[rho, bigY] = }cca_sacf(${2:y}, ${3:m}, ${4:gflag})$0",
"description": "function [rho,bigY] = cca_sacf(y,m,gflag)" 
},
"cca_autonomy_demo": {
"prefix": "cca_autonomy_demo",
"body": "cca_autonomy_demo$0",
"description": "function cca_autonomy_demo" 
},
"cca_permutebstrap_demo": {
"prefix": "cca_permutebstrap_demo",
"body": "cca_permutebstrap_demo(${2:GENFLAG})$0",
"description": "function cca_permutebstrap_demo(GENFLAG)" 
},
"cca_testData": {
"prefix": "cca_testData",
"body": "${1:X = }cca_testData(${2:N}, ${3:FLAG})$0",
"description": "function X = ccaTestData(N,FLAG)" 
},
"FTEST2": {
"prefix": "FTEST2",
"body": "${1:[fstat, mu, f, trueid] = }FTEST2(${2:dat}, ${3:NW}, ${4:K}, ${5:fftpad}, ${6:Fs})$0",
"description": "function [fstat, mu, f, trueid] = ftest(dat, NW, K, fftpad, Fs);" 
},
"RECONSTR": {
"prefix": "RECONSTR",
"body": "${1:harmon = }RECONSTR(${2:fstat}, ${3:mu}, ${4:T}, ${5:id}, ${6:bw})$0",
"description": "function [harmon] = reconstr(fstat, mu, T, id, bw);" 
},
"armorf_to_cca": {
"prefix": "armorf_to_cca",
"body": "${1:beta2 = }armorf_to_cca(${2:beta}, ${3:nvar}, ${4:nlags})$0",
"description": "function beta2 = armorf_to_aks(beta,nvar,nlags)" 
},
"cca_adf": {
"prefix": "cca_adf",
"body": "${1:results = }cca_adf(${2:x}, ${3:p}, ${4:nlag})$0",
"description": "function results =  adf(x,p,nlag)" 
},
"cca_arrowh": {
"prefix": "cca_arrowh",
"body": "cca_arrowh(${2:x}, ${3:y}, ${4:clr}, ${5:ArSize}, ${6:Where})$0",
"description": "function arrowh(x,y,clr,ArSize,Where);" 
},
"cca_calc_resid": {
"prefix": "cca_calc_resid",
"body": "${1:[u, xpred] = }cca_calc_resid(${2:X}, ${3:beta}, ${4:nobs}, ${5:nvar}, ${6:nlags})$0",
"description": "function [u,xpred] = cca_calc_resid(X,beta,nobs,nvar,nlags)" 
},
"cca_cdff": {
"prefix": "cca_cdff",
"body": "${1:p = }cca_cdff(${2:x}, ${3:v1}, ${4:v2})$0",
"description": "function p = cca_cdff(x,v1,v2)" 
},
"cca_center": {
"prefix": "cca_center",
"body": "${1:XC = }cca_center(${2:X})$0",
"description": "function XC = cca_center(X)" 
},
"cca_consistency": {
"prefix": "cca_consistency",
"body": "${1:cons = }cca_consistency(${2:X}, ${3:xpred})$0",
"description": "function [cons] = cca_consistency(X,xpred)" 
},
"cca_mtrial_whitecon": {
"prefix": "cca_mtrial_whitecon",
"body": "${1:[waut, cons] = }cca_mtrial_whitecon(${2:X}, ${3:Nr}, ${4:Nl}, ${5:nlags})$0",
"description": "function [waut,cons] = cca_mtrial_whitecon(X,Nr,Nl,nlags)" 
},
"cca_normcdf": {
"prefix": "cca_normcdf",
"body": "${1:p = }cca_normcdf(${2:x}, ${3:mu}, ${4:sigma})$0",
"description": "function [p] = cca_normcdf(x,mu,sigma)" 
},
"cca_normrnd": {
"prefix": "cca_normrnd",
"body": "${1:r = }cca_normrnd(${2:mu}, ${3:sigma}, ${4:m}, ${5:n})$0",
"description": "function r = cca_normrnd(mu,sigma,m,n);" 
},
"cca_ols": {
"prefix": "cca_ols",
"body": "${1:[ols, u, fit, v] = }cca_ols(${2:y}, ${3:x})$0",
"description": "function [ols,u,fit,v]=cca_ols(y,x)" 
},
"cca_plotci": {
"prefix": "cca_plotci",
"body": "cca_plotci(${2:m}, ${3:ul}, ${4:ll})$0",
"description": "function cca_plotci(m,ul,ll)" 
},
"cca_rmisnan": {
"prefix": "cca_rmisnan",
"body": "${1:Y = }cca_rmisnan(${2:X}, ${3:val})$0",
"description": "function Y=cca_rmisnan(X,val)" 
},
"cca_spec": {
"prefix": "cca_spec",
"body": "${1:[ps, freq, psd] = }cca_spec(${2:signal}, ${3:srate}, ${4:DRAWFLAG})$0",
"description": "function [ps,freq,psd] = cca_spec(signal,srate,DRAWFLAG)" 
},
"cca_whiteness": {
"prefix": "cca_whiteness",
"body": "${1:[pval, dw] = }cca_whiteness(${2:X}, ${3:r})$0",
"description": "function [pval,dw] = cca_whiteness(X,r)" 
},
"combinator": {
"prefix": "combinator",
"body": "${1:A = }combinator(${2:N}, ${3:K}, ${4:s1}, ${5:s2})$0",
"description": "function [A] = combinator(N,K,s1,s2)" 
},
"covariance": {
"prefix": "covariance",
"body": "${1:cov_value = }covariance(${2:X}, ${3:Y}, ${4:n})$0",
"description": "function  cov_value=covariance(X,Y,n)" 
},
"detrend_V2": {
"prefix": "detrend_V2",
"body": "${1:y = }detrend(${2:x}, ${3:o}, ${4:bp})$0",
"description": "function y = detrend(x,o,bp)" 
},
"findnearest": {
"prefix": "findnearest",
"body": "${1:[r, c, V] = }findnearest(${2:srchvalue}, ${3:srcharray}, ${4:bias})$0",
"description": "function [r,c,V] = findnearest(srchvalue,srcharray,bias)" 
},
"freezeColors": {
"prefix": "freezeColors",
"body": "freezeColors(${2:h})$0",
"description": "function freezeColors(h)" 
},
"genBoot": {
"prefix": "genBoot",
"body": "${1:XX = }genBoot(${2:X}, ${3:Nbwin}, ${4:nwin}, ${5:nvar}, ${6:N})$0",
"description": "function XX = genBoot(X,Nbwin,nwin,nvar,N)" 
},
"genPerm": {
"prefix": "genPerm",
"body": "${1:XX = }genPerm(${2:X}, ${3:Nbwin}, ${4:nwin}, ${5:nvar}, ${6:N})$0",
"description": "function XX = genPerm(X,Nbwin,nwin,nvar,N)" 
},
"generate_oscillation": {
"prefix": "generate_oscillation",
"body": "${1:osc = }generate_oscillation(${2:freq}, ${3:srate}, ${4:N}, ${5:phase})$0",
"description": "function osc = generate_oscillation(freq,srate,N,phase)" 
},
"isint_V1": {
"prefix": "isint_V1",
"body": "${1:[int, nearest, rem] = }isint(${2:num})$0",
"description": "function [int, nearest, rem] = isint(num)" 
},
"jicolorbar": {
"prefix": "jicolorbar",
"body": "${1:handle = }jicolorbar(${2:loc}, ${3:tit})$0",
"description": "function handle=jicolorbar(loc,tit)" 
},
"plotMultiFFT": {
"prefix": "plotMultiFFT",
"body": "plotMultiFFT(${2:fplot}, ${3:freq}, ${4:ps})$0",
"description": "function plotMultiFFT(fplot,freq,ps)" 
},
"pwcausal": {
"prefix": "pwcausal",
"body": "${1:[pp, cohe, Fx2y, Fy2x] = }pwcausal(${2:x}, ${3:Nr}, ${4:Nl}, ${5:porder}, ${6:fs}, ${7:freq})$0",
"description": "function [pp,cohe,Fx2y,Fy2x]=pwcausal(x,Nr,Nl,porder,fs,freq)" 
},
"quantile_V1": {
"prefix": "quantile_V1",
"body": "${1:y = }quantile(${2:x}, ${3:p}, ${4:dim})$0",
"description": "function y = quantile(x,p,dim);" 
},
"spectrum": {
"prefix": "spectrum",
"body": "${1:[S, H] = }spectrum(${2:A}, ${3:Z}, ${4:M}, ${5:f}, ${6:fs})$0",
"description": "function [S,H] = spectrum(A,Z,M,f,fs);" 
},
"RLS": {
"prefix": "RLS",
"body": "${1:[Theta, Sigma, AIC] = }RLS(${2:A}, ${3:p}, ${4:c})$0",
"description": "function  [Theta,Sigma,AIC] = RLS(A,p,c)" 
},
"Reccursion": {
"prefix": "Reccursion",
"body": "Reccursion(${2:A}, ${3:path}, ${4:f}, ${5:fid1}, ${6:fid2}, ${7:s1}, ${8:s2})$0",
"description": "function   Reccursion(A,path,f,fid1,fid2,s1,s2)" 
},
"art2008jul2": {
"prefix": "art2008jul2",
"body": "art2008jul2(${2:s})$0",
"description": "function art2008jul2(s)" 
},
"b2011SAM": {
"prefix": "b2011SAM",
"body": "${1:w = }b2011SAM(${2:s})$0",
"description": "function w=b2011SAM(s)" 
},
"gtaxsv": {
"prefix": "gtaxsv",
"body": "${1:axsv = }gtaxsv(${2:x}, ${3:y})$0",
"description": "function axsv=gtaxsv(x,y)" 
},
"spiketrain2": {
"prefix": "spiketrain2",
"body": "spiketrain2(${2:s})$0",
"description": "function spiketrain2(s)" 
},
"Probit_loglike": {
"prefix": "Probit_loglike",
"body": "${1:ll = }Probit_loglike(${2:parameters}, ${3:y}, ${4:x})$0",
"description": "function ll = probit_loglike(parameters,y,x)" 
},
"Std_studentst_loglike": {
"prefix": "Std_studentst_loglike",
"body": "${1:ll = }Std_studentst_loglike(${2:nu}, ${3:x})$0",
"description": "function ll = std_studentst_loglike(nu,x)" 
},
"Std_studentst_loglike_mean_var": {
"prefix": "Std_studentst_loglike_mean_var",
"body": "${1:ll = }Std_studentst_loglike_mean_var(${2:parameters}, ${3:x})$0",
"description": "function ll = std_studentst_loglike_mean_var(parameters,x)" 
},
"Std_studentst_loglike_mean_var_notrans": {
"prefix": "Std_studentst_loglike_mean_var_notrans",
"body": "${1:ll = }Std_studentst_loglike_mean_var_notrans(${2:parameters}, ${3:x})$0",
"description": "function ll = std_studentst_loglike_mean_var_notrans(parameters,x)" 
},
"addToPath": {
"prefix": "addToPath",
"body": "addToPath(${2:arg})$0",
"description": "function addToPath(arg)" 
},
"ARMAX": {
"prefix": "ARMAX",
"body": "${1:varargout = }ARMAX(${2:varargin})$0",
"description": "function varargout = ARMAX(varargin)" 
},
"ARMAX_about": {
"prefix": "ARMAX_about",
"body": "${1:varargout = }ARMAX_about(${2:varargin})$0",
"description": "function varargout = ARMAX_about(varargin)" 
},
"ARMAX_close_dialog": {
"prefix": "ARMAX_close_dialog",
"body": "${1:varargout = }ARMAX_close_dialog(${2:varargin})$0",
"description": "function varargout = ARMAX_close_dialog(varargin)" 
},
"ARMAX_viewer": {
"prefix": "ARMAX_viewer",
"body": "${1:varargout = }ARMAX_viewer(${2:varargin})$0",
"description": "function varargout = ARMAX_viewer(varargin)" 
},
"block_bootstrap_V1": {
"prefix": "block_bootstrap_V1",
"body": "${1:[bsdata, indices] = }block_bootstrap(${2:data}, ${3:B}, ${4:w})$0",
"description": "function [bsdata, indices]=block_bootstrap(data,B,w)" 
},
"bsds_V1": {
"prefix": "bsds_V1",
"body": "${1:[c, u, l] = }bsds(${2:bench}, ${3:models}, ${4:B}, ${5:w}, ${6:type}, ${7:boot})$0",
"description": "function [c,u,l]=bsds(bench,models,B,w,type,boot)" 
},
"mcs": {
"prefix": "mcs",
"body": "${1:[includedR, pvalsR, excludedR, includedSQ, pvalsSQ, excludedSQ] = }mcs(${2:losses}, ${3:alpha}, ${4:B}, ${5:w}, ${6:boot})$0",
"description": "function [includedR,pvalsR,excludedR,includedSQ,pvalsSQ,excludedSQ]=mcs(losses,alpha,B,w,boot)" 
},
"stationary_bootstrap_V1": {
"prefix": "stationary_bootstrap_V1",
"body": "${1:[bsdata, indices] = }stationary_bootstrap(${2:data}, ${3:B}, ${4:w})$0",
"description": "function [bsdata, indices]=stationary_bootstrap(data,B,w)" 
},
"ols_V1": {
"prefix": "ols_V1",
"body": "${1:[b, tstat, s2, vcv, vcvwhite, R2, Rbar, yhat] = }ols(${2:y}, ${3:x}, ${4:c})$0",
"description": "function [b, tstat, s2, vcv, vcvwhite, R2, Rbar, yhat] = ols(y,x,c)" 
},
"pca_V1": {
"prefix": "pca_V1",
"body": "${1:[weights, princomp, eigenvals, explvar, cumR2] = }pca(${2:data}, ${3:type})$0",
"description": "function [weights, princomp, eigenvals, explvar, cumR2]=pca(data,type)" 
},
"composite_likelihood": {
"prefix": "composite_likelihood",
"body": "${1:ll = }composite_likelihood(${2:S}, ${3:data}, ${4:indices})$0",
"description": "function ll = composite_likelihood(S,data,indices)" 
},
"gedcdf_V1": {
"prefix": "gedcdf_V1",
"body": "${1:p = }gedcdf(${2:x}, ${3:v})$0",
"description": "function p = gedcdf(x,v)" 
},
"gedinv_V1": {
"prefix": "gedinv_V1",
"body": "${1:x = }gedinv(${2:p}, ${3:v})$0",
"description": "function x = gedinv(p,v)" 
},
"gedloglik": {
"prefix": "gedloglik",
"body": "${1:[LL, LLS] = }gedloglik(${2:x}, ${3:mu}, ${4:sigma2}, ${5:v})$0",
"description": "function [LL,LLS]=gedloglik(x,mu,sigma2,v)" 
},
"gedpdf_V1": {
"prefix": "gedpdf_V1",
"body": "${1:y = }gedpdf(${2:x}, ${3:v})$0",
"description": "function y = gedpdf(x,v)" 
},
"gedrnd_V1": {
"prefix": "gedrnd_V1",
"body": "${1:r = }gedrnd(${2:v}, ${3:varargin})$0",
"description": "function r = gedrnd(v,varargin)" 
},
"mvnormloglik": {
"prefix": "mvnormloglik",
"body": "${1:[LL, lls] = }mvnormloglik(${2:x}, ${3:mu}, ${4:sigma})$0",
"description": "function [LL,lls]=mvnormloglik(x,mu,sigma)" 
},
"normloglik": {
"prefix": "normloglik",
"body": "${1:[LL, lls] = }normloglik(${2:x}, ${3:mu}, ${4:sigma2})$0",
"description": "function [LL,lls]=normloglik(x,mu,sigma2)" 
},
"skewtcdf": {
"prefix": "skewtcdf",
"body": "${1:p = }skewtcdf(${2:x}, ${3:v}, ${4:lambda})$0",
"description": "function p = skewtcdf(x,v,lambda)" 
},
"skewtinv": {
"prefix": "skewtinv",
"body": "${1:x = }skewtinv(${2:p}, ${3:v}, ${4:lambda})$0",
"description": "function x=skewtinv(p,v,lambda)" 
},
"skewtloglik": {
"prefix": "skewtloglik",
"body": "${1:[LL, LLS] = }skewtloglik(${2:x}, ${3:mu}, ${4:sigma2}, ${5:v}, ${6:lambda})$0",
"description": "function [LL,LLS]=skewtloglik(x,mu,sigma2,v,lambda)" 
},
"skewtpdf": {
"prefix": "skewtpdf",
"body": "${1:y = }skewtpdf(${2:x}, ${3:v}, ${4:lambda})$0",
"description": "function y = skewtpdf(x, v, lambda)" 
},
"skewtrnd": {
"prefix": "skewtrnd",
"body": "${1:r = }skewtrnd(${2:v}, ${3:lambda}, ${4:varargin})$0",
"description": "function r = skewtrnd(v,lambda,varargin)" 
},
"stdtcdf": {
"prefix": "stdtcdf",
"body": "${1:p = }stdtcdf(${2:x}, ${3:v})$0",
"description": "function p=stdtcdf(x,v)" 
},
"stdtinv": {
"prefix": "stdtinv",
"body": "${1:x = }stdtinv(${2:p}, ${3:v})$0",
"description": "function x=stdtinv(p,v)" 
},
"stdtloglik": {
"prefix": "stdtloglik",
"body": "${1:[ll, lls] = }stdtloglik(${2:x}, ${3:mu}, ${4:sigma2}, ${5:nu})$0",
"description": "function [ll,lls]=stdtloglik(x,mu,sigma2,nu)" 
},
"stdtpdf": {
"prefix": "stdtpdf",
"body": "${1:y = }stdtpdf(${2:x}, ${3:v})$0",
"description": "function y=stdtpdf(x,v)" 
},
"stdtrnd": {
"prefix": "stdtrnd",
"body": "${1:r = }stdtrnd(${2:v}, ${3:varargin})$0",
"description": "function r=stdtrnd(v,varargin)" 
},
"chi2cdf_V1": {
"prefix": "chi2cdf_V1",
"body": "${1:p = }chi2cdf(${2:x}, ${3:v})$0",
"description": "function p=chi2cdf(x,v)" 
},
"iscompatible": {
"prefix": "iscompatible",
"body": "${1:[error, errortext, sizeOut, varargout] = }iscompatible(${2:narg}, ${3:varargin})$0",
"description": "function [error, errortext, sizeOut, varargout]=iscompatible(narg,varargin)" 
},
"kurtosis": {
"prefix": "kurtosis",
"body": "${1:k = }kurtosis(${2:x}, ${3:flag}, ${4:dim})$0",
"description": "function k=kurtosis(x, flag, dim)" 
},
"normcdf": {
"prefix": "normcdf",
"body": "${1:p = }normcdf(${2:x}, ${3:mu}, ${4:sigma})$0",
"description": "function p = normcdf(x,mu,sigma)" 
},
"norminv": {
"prefix": "norminv",
"body": "${1:x = }norminv(${2:p}, ${3:mu}, ${4:sigma})$0",
"description": "function x = norminv(p,mu,sigma)" 
},
"normpdf": {
"prefix": "normpdf",
"body": "${1:y = }normpdf(${2:x}, ${3:mu}, ${4:sigma})$0",
"description": "function y = normpdf(x,mu,sigma)" 
},
"skewness": {
"prefix": "skewness",
"body": "${1:sk = }skewness(${2:x}, ${3:flag}, ${4:dim})$0",
"description": "function sk=skewness(x, flag, dim)" 
},
"bekk": {
"prefix": "bekk",
"body": "${1:[parameters, ll, Ht, VCV, scores] = }bekk(${2:data}, ${3:dataAsym}, ${4:p}, ${5:o}, ${6:q}, ${7:type}, ${8:startingVals}, ${9:options})$0",
"description": "function [parameters, ll, Ht, VCV, scores] = bekk(data,dataAsym,p,o,q,type,startingVals,options)" 
},
"bekk_constraint": {
"prefix": "bekk_constraint",
"body": "${1:[c, ceq] = }bekk_constraint(${2:parameters}, ${3:data}, ${4:dataAsym}, ${5:p}, ${6:o}, ${7:q}, ${8:backCast}, ${9:backCastAsym}, ${10:type})$0",
"description": "function [c,ceq] = bekk_constraint(parameters,data,dataAsym,p,o,q,backCast,backCastAsym,type) %#ok<*INUSL>" 
},
"bekk_likelihood": {
"prefix": "bekk_likelihood",
"body": "${1:[ll, lls, Ht] = }bekk_likelihood(${2:parameters}, ${3:data}, ${4:dataAsym}, ${5:p}, ${6:o}, ${7:q}, ${8:backCast}, ${9:backCastAsym}, ${10:type})$0",
"description": "function [ll,lls,Ht] = bekk_likelihood(parameters,data,dataAsym,p,o,q,backCast,backCastAsym,type)" 
},
"bekk_parameter_transform": {
"prefix": "bekk_parameter_transform",
"body": "${1:[C, A, G, B] = }bekk_parameter_transform(${2:parameters}, ${3:p}, ${4:o}, ${5:q}, ${6:k}, ${7:type})$0",
"description": "function [C,A,G,B] = bekk_parameter_transform(parameters,p,o,q,k,type)" 
},
"bekk_simulate": {
"prefix": "bekk_simulate",
"body": "${1:[data, Ht] = }bekk_simulate(${2:T}, ${3:k}, ${4:parameters}, ${5:p}, ${6:o}, ${7:q}, ${8:type})$0",
"description": "function [data, Ht] = bekk_simulate(T,k,parameters,p,o,q,type)" 
},
"ccc_mvgarch": {
"prefix": "ccc_mvgarch",
"body": "${1:[parameters, ll, Ht, VCV, scores] = }ccc_mvgarch(${2:data}, ${3:dataAsym}, ${4:p}, ${5:o}, ${6:q}, ${7:gjrType}, ${8:startingVals}, ${9:options})$0",
"description": "function  [parameters, ll, Ht, VCV, scores] = ccc_mvgarch(data,dataAsym,p,o,q,gjrType,startingVals,options)" 
},
"ccc_mvgarch_joint_likelihood": {
"prefix": "ccc_mvgarch_joint_likelihood",
"body": "${1:[ll, lls, ht] = }ccc_mvgarch_joint_likelihood(${2:parameters}, ${3:data}, ${4:volData}, ${5:p}, ${6:o}, ${7:q})$0",
"description": "function [ll, lls, ht] = ccc_mvgarch_joint_likelihood(parameters,data,volData,p,o,q)" 
},
"ccc_mvgarch_likelihood": {
"prefix": "ccc_mvgarch_likelihood",
"body": "${1:[ll, lls] = }ccc_mvgarch_likelihood(${2:parameters}, ${3:data}, ${4:htMat})$0",
"description": "function [ll, lls] = ccc_mvgarch_likelihood(parameters,data,htMat)" 
},
"ccc_mvgarch_simulate": {
"prefix": "ccc_mvgarch_simulate",
"body": "${1:[simulatedata, ht, pseudorc] = }ccc_mvgarch_simulate(${2:t}, ${3:k}, ${4:parameters}, ${5:p}, ${6:o}, ${7:q}, ${8:m})$0",
"description": "function [simulatedata,ht,pseudorc]=ccc_mvgarch_simulate(t,k,parameters,p,o,q,m)" 
},
"dcc": {
"prefix": "dcc",
"body": "${1:[parameters, ll, Ht, VCV, scores, diagnostics] = }dcc(${2:data}, ${3:dataAsym}, ${4:m}, ${5:l}, ${6:n}, ${7:p}, ${8:o}, ${9:q}, ${10:gjrType}, ${11:method}, ${12:composite}, ${13:startingVals}, ${14:options})$0",
"description": "function [parameters, ll ,Ht, VCV, scores, diagnostics]=dcc(data,dataAsym,m,l,n,p,o,q,gjrType,method,composite,startingVals,options)" 
},
"dcc_fit_variance": {
"prefix": "dcc_fit_variance",
"body": "${1:[H, univariate] = }dcc_fit_variance(${2:data}, ${3:p}, ${4:o}, ${5:q}, ${6:gjrType}, ${7:startingVals})$0",
"description": "function [H,univariate] = dcc_fit_variance(data,p,o,q,gjrType,startingVals)" 
},
"dcc_inference_objective": {
"prefix": "dcc_inference_objective",
"body": "${1:[obj, objs] = }dcc_inference_objective(${2:parameters}, ${3:data}, ${4:dataAsym}, ${5:m}, ${6:l}, ${7:n}, ${8:univariate})$0",
"description": "function [obj,objs] = dcc_inference_objective(parameters,data,dataAsym,m,l,n,univariate) %#ok<INUSL>" 
},
"dcc_likelihood": {
"prefix": "dcc_likelihood",
"body": "${1:[ll, lls, Rt] = }dcc_likelihood(${2:parameters}, ${3:data}, ${4:dataAsym}, ${5:m}, ${6:l}, ${7:n}, ${8:R}, ${9:N}, ${10:backCast}, ${11:backCastAsym}, ${12:stage}, ${13:composite}, ${14:isJoint}, ${15:isInference}, ${16:gScale}, ${17:univariate})$0",
"description": "function [ll,lls,Rt] = dcc_likelihood(parameters,data,dataAsym,m,l,n,R,N,backCast,backCastAsym,stage,composite,isJoint,isInference,gScale,univariate)" 
},
"dcc_reconstruct_variance": {
"prefix": "dcc_reconstruct_variance",
"body": "${1:H = }dcc_reconstruct_variance(${2:garchParameters}, ${3:univariate})$0",
"description": "function H = dcc_reconstruct_variance(garchParameters,univariate)" 
},
"gogarch": {
"prefix": "gogarch",
"body": "${1:[parameters, ll, Ht, VCV, scores] = }gogarch(${2:data}, ${3:p}, ${4:q}, ${5:gjrType}, ${6:type}, ${7:startingVals}, ${8:options})$0",
"description": "function [parameters,ll,Ht,VCV,scores] = gogarch(data,p,q,gjrType,type,startingVals,options)" 
},
"gogarch_likelihood": {
"prefix": "gogarch_likelihood",
"body": "${1:[ll, lls, Ht] = }gogarch_likelihood(${2:parameters}, ${3:data}, ${4:p}, ${5:q}, ${6:gjrType}, ${7:P}, ${8:L}, ${9:isOgarch}, ${10:isInference})$0",
"description": "function [ll,lls,Ht] = gogarch_likelihood(parameters,data,p,q,gjrType,P,L,isOgarch,isInference)" 
},
"matrix_garch": {
"prefix": "matrix_garch",
"body": "${1:[parameters, ll, ht, VCV, scores, diagnostics] = }matrix_garch(${2:data}, ${3:dataAsym}, ${4:p}, ${5:o}, ${6:q}, ${7:startingvals}, ${8:options})$0",
"description": "function [parameters, ll, ht, VCV, scores, diagnostics] = matrix_garch(data,dataAsym,p,o,q,startingvals,options)" 
},
"matrix_garch_display": {
"prefix": "matrix_garch_display",
"body": "${1:[C, A, G, B] = }matrix_garch_display(${2:parameters}, ${3:p}, ${4:o}, ${5:q})$0",
"description": "function [C,A,G,B] = matrix_garch_display(parameters,p,o,q)" 
},
"matrix_garch_likelihood": {
"prefix": "matrix_garch_likelihood",
"body": "${1:[ll, lls, Ht] = }matrix_garch_likelihood(${2:parameters}, ${3:data}, ${4:dataAsym}, ${5:p}, ${6:o}, ${7:q}, ${8:backCast}, ${9:backCastAsym})$0",
"description": "function [ll,lls,Ht]=matrix_garch_likelihood(parameters,data,dataAsym,p,o,q,backCast,backCastAsym)" 
},
"matrix_garch_simulate": {
"prefix": "matrix_garch_simulate",
"body": "${1:[simulatedata, ht, pseudorc] = }matrix_garch_simulate(${2:t}, ${3:k}, ${4:parameters}, ${5:p}, ${6:o}, ${7:q}, ${8:m})$0",
"description": "function [simulatedata,ht,pseudorc]=matrix_garch_simulate(t,k,parameters,p,o,q,m)" 
},
"o_mvgarch_V1": {
"prefix": "o_mvgarch_V1",
"body": "${1:[parameters, ht, w, pc] = }o_mvgarch(${2:data}, ${3:numfactors}, ${4:p}, ${5:o}, ${6:q}, ${7:startingVals}, ${8:options})$0",
"description": "function [parameters,ht,w,pc]=o_mvgarch(data,numfactors,p,o,q,startingVals,options)" 
},
"ogarch_likelihood": {
"prefix": "ogarch_likelihood",
"body": "${1:[ll, lls] = }ogarch_likelihood(${2:parameters}, ${3:data}, ${4:p}, ${5:q}, ${6:gjrType}, ${7:backCast})$0",
"description": "function [ll,lls] = ogarch_likelihood(parameters,data,p,q,gjrType,backCast)" 
},
"rarch": {
"prefix": "rarch",
"body": "${1:[parameters, ll, Ht, VCV, scores] = }rarch(${2:data}, ${3:p}, ${4:q}, ${5:type}, ${6:method}, ${7:startingVals}, ${8:options})$0",
"description": "function [parameters, ll, Ht, VCV, scores] = rarch(data,p,q,type,method,startingVals,options)" 
},
"rarch_constraint": {
"prefix": "rarch_constraint",
"body": "${1:[c, ceq] = }rarch_constraint(${2:parameters}, ${3:data}, ${4:p}, ${5:q}, ${6:C}, ${7:backCast}, ${8:type}, ${9:isJoint}, ${10:isCChol})$0",
"description": "function [c,ceq] = rarch_constraint(parameters,data,p,q,C,backCast,type,isJoint,isCChol) %#ok<*INUSL>" 
},
"rarch_likelihood": {
"prefix": "rarch_likelihood",
"body": "${1:[ll, lls, Ht] = }rarch_likelihood(${2:parameters}, ${3:data}, ${4:p}, ${5:q}, ${6:C}, ${7:backCast}, ${8:type}, ${9:isJoint}, ${10:isCChol})$0",
"description": "function [ll, lls, Ht] = rarch_likelihood(parameters,data,p,q,C,backCast,type,isJoint,isCChol)" 
},
"rarch_parameter_transform": {
"prefix": "rarch_parameter_transform",
"body": "${1:[C, A, B] = }rarch_parameter_transform(${2:parameters}, ${3:p}, ${4:q}, ${5:k}, ${6:C}, ${7:type}, ${8:isJoint}, ${9:isCChol})$0",
"description": "function [C,A,B] = rarch_parameter_transform(parameters,p,q,k,C,type,isJoint,isCChol)" 
},
"rarch_simulate": {
"prefix": "rarch_simulate",
"body": "${1:[data, Ht] = }rarch_simulate(${2:T}, ${3:C}, ${4:parameters}, ${5:p}, ${6:q}, ${7:type})$0",
"description": "function [data, Ht] = rarch_simulate(T,C,parameters,p,q,type)" 
},
"rarch_test": {
"prefix": "rarch_test",
"body": "rarch_test$0",
"description": "rarch_test" 
},
"rcc": {
"prefix": "rcc",
"body": "${1:[parameters, ll, Ht, VCV, scores, diagnostics] = }rcc(${2:data}, ${3:dataAsym}, ${4:m}, ${5:n}, ${6:p}, ${7:o}, ${8:q}, ${9:gjrType}, ${10:type}, ${11:method}, ${12:composite}, ${13:startingVals}, ${14:options})$0",
"description": "function [parameters, ll ,Ht, VCV, scores, diagnostics]=rcc(data,dataAsym,m,n,p,o,q,gjrType,type,method,composite,startingVals,options)" 
},
"rcc_constraint": {
"prefix": "rcc_constraint",
"body": "${1:[c, ceq] = }rcc_constraint(${2:parameters}, ${3:data}, ${4:m}, ${5:n}, ${6:R}, ${7:backCast}, ${8:stage}, ${9:type}, ${10:composite}, ${11:isJoint}, ${12:isInference}, ${13:rScale}, ${14:univariate})$0",
"description": "function [c,ceq] = rcc_constraint(parameters,data,m,n,R,backCast,stage,type,composite,isJoint,isInference,rScale,univariate)  %#ok<INUSD,INUSL>" 
},
"rcc_likelihood": {
"prefix": "rcc_likelihood",
"body": "${1:[ll, lls, Rt] = }rcc_likelihood(${2:parameters}, ${3:data}, ${4:m}, ${5:n}, ${6:R}, ${7:backCast}, ${8:stage}, ${9:type}, ${10:composite}, ${11:isJoint}, ${12:isInference}, ${13:rScale}, ${14:univariate})$0",
"description": "function [ll,lls,Rt] = rcc_likelihood(parameters,data,m,n,R,backCast,stage,type,composite,isJoint,isInference,rScale,univariate)" 
},
"riskmetrics": {
"prefix": "riskmetrics",
"body": "${1:Ht = }riskmetrics(${2:data}, ${3:lambda}, ${4:backCast})$0",
"description": "function Ht = riskmetrics(data,lambda,backCast)" 
},
"riskmetrics2006": {
"prefix": "riskmetrics2006",
"body": "${1:[Ht, weights] = }riskmetrics2006(${2:data}, ${3:tau0}, ${4:tau1}, ${5:kmax}, ${6:rho})$0",
"description": "function [Ht,weights] = riskmetrics2006(data,tau0,tau1,kmax,rho)" 
},
"scalar_vt_vech": {
"prefix": "scalar_vt_vech",
"body": "${1:[parameters, ll, ht, intercept, VCV, scores, diagnostics] = }scalar_vt_vech(${2:data}, ${3:dataAsym}, ${4:p}, ${5:o}, ${6:q}, ${7:composite}, ${8:startingvals}, ${9:options})$0",
"description": "function [parameters, ll, ht, intercept, VCV, scores, diagnostics] = scalar_vt_vech(data,dataAsym,p,o,q,composite,startingvals,options)" 
},
"scalar_vt_vech_itransform": {
"prefix": "scalar_vt_vech_itransform",
"body": "${1:parameters = }scalar_vt_vech_itransform(${2:tparameters}, ${3:p}, ${4:o}, ${5:q}, ${6:kappa})$0",
"description": "function parameters=scalar_vt_vech_itransform(tparameters,p,o,q,kappa)" 
},
"scalar_vt_vech_likelihood": {
"prefix": "scalar_vt_vech_likelihood",
"body": "${1:[ll, lls, Ht] = }scalar_vt_vech_likelihood(${2:parameters}, ${3:data}, ${4:dataAsym}, ${5:p}, ${6:o}, ${7:q}, ${8:C}, ${9:Casym}, ${10:kappa}, ${11:backCast}, ${12:backCastAsym}, ${13:isJoint}, ${14:useComposite}, ${15:estimFlag})$0",
"description": "function [ll,lls,Ht]=scalar_vt_vech_likelihood(parameters,data,dataAsym,p,o,q,C,Casym,kappa,backCast,backCastAsym,isJoint,useComposite,estimFlag)" 
},
"scalar_vt_vech_simulate": {
"prefix": "scalar_vt_vech_simulate",
"body": "${1:[simulatedata, ht, pseudorc] = }scalar_vt_vech_simulate(${2:t}, ${3:parameters}, ${4:c}, ${5:p}, ${6:o}, ${7:q}, ${8:m})$0",
"description": "function [simulatedata,ht,pseudorc]=scalar_vt_vech_simulate(t,parameters,c,p,o,q,m)" 
},
"scalar_vt_vech_starting_values": {
"prefix": "scalar_vt_vech_starting_values",
"body": "${1:[startingvals, lls, output_parameters] = }scalar_vt_vech_starting_values(${2:startingvals}, ${3:data}, ${4:dataAsym}, ${5:p}, ${6:o}, ${7:q}, ${8:C}, ${9:Casym}, ${10:kappa}, ${11:useComposite}, ${12:backCast}, ${13:backCastAsym})$0",
"description": "function [startingvals,lls,output_parameters]=scalar_vt_vech_starting_values(startingvals,data,dataAsym,p,o,q,C,Casym,kappa,useComposite,backCast,backCastAsym)" 
},
"scalar_vt_vech_transform": {
"prefix": "scalar_vt_vech_transform",
"body": "${1:tparameters = }scalar_vt_vech_transform(${2:parameters}, ${3:p}, ${4:o}, ${5:q}, ${6:kappa})$0",
"description": "function tparameters=scalar_vt_vech_transform(parameters,p,o,q,kappa)" 
},
"realized_bipower_variation": {
"prefix": "realized_bipower_variation",
"body": "${1:[bv, bvSS, bvDebiased, bvSSDebiased] = }realized_bipower_variation(${2:price}, ${3:time}, ${4:timeType}, ${5:samplingType}, ${6:samplingInterval}, ${7:skip}, ${8:subsamples})$0",
"description": "function [bv,bvSS,bvDebiased,bvSSDebiased]=realized_bipower_variation(price,time,timeType,samplingType,samplingInterval,skip,subsamples)" 
},
"realized_compute_median": {
"prefix": "realized_compute_median",
"body": "${1:[medianPrice, medianTime, totalVol, nObs] = }realized_compute_median(${2:price}, ${3:time}, ${4:volume})$0",
"description": "function [medianPrice,medianTime,totalVol,nObs] = realized_compute_median(price,time,volume)" 
},
"realized_convert2unit": {
"prefix": "realized_convert2unit",
"body": "${1:[time, time0, time1, samplingInterval] = }realized_convert2unit(${2:time}, ${3:timeType}, ${4:samplingType}, ${5:samplingInterval})$0",
"description": "function [time,time0,time1,samplingInterval]=realized_convert2unit(time,timeType,samplingType,samplingInterval)" 
},
"realized_covariance": {
"prefix": "realized_covariance",
"body": "${1:[rc, rcSS] = }realized_covariance(${2:varargin})$0",
"description": "function [rc,rcSS]=realized_covariance(varargin)" 
},
"realized_hayashi_yoshida": {
"prefix": "realized_hayashi_yoshida",
"body": "${1:rchy = }realized_hayashi_yoshida(${2:priceA}, ${3:timeA}, ${4:priceB}, ${5:timeB}, ${6:timeType}, ${7:samplingType}, ${8:samplingInterval}, ${9:overlap})$0",
"description": "function rchy = realized_hayashi_yoshida(priceA,timeA,priceB,timeB,timeType,samplingType,samplingInterval,overlap)" 
},
"realized_kernel": {
"prefix": "realized_kernel",
"body": "${1:[rk, rkAdjusted, diagnostics] = }realized_kernel(${2:price}, ${3:time}, ${4:timeType}, ${5:samplingType}, ${6:samplingInterval}, ${7:options})$0",
"description": "function [rk,rkAdjusted,diagnostics]=realized_kernel(price,time,timeType,samplingType,samplingInterval,options)" 
},
"realized_kernel_bandwidth": {
"prefix": "realized_kernel_bandwidth",
"body": "${1:bandwidth = }realized_kernel_bandwidth(${2:noiseVariance}, ${3:IQEstimate}, ${4:options})$0",
"description": "function bandwidth = realized_kernel_bandwidth(noiseVariance, IQEstimate, options)" 
},
"realized_kernel_core": {
"prefix": "realized_kernel_core",
"body": "${1:rk = }realized_kernel_core(${2:returns}, ${3:weights}, ${4:options})$0",
"description": "function rk = realized_kernel_core(returns, weights, options)" 
},
"realized_kernel_jitter_lag_length": {
"prefix": "realized_kernel_jitter_lag_length",
"body": "${1:jitterLags = }realized_kernel_jitter_lag_length(${2:noiseEstimate}, ${3:iqEstimate}, ${4:kernel}, ${5:N})$0",
"description": "function  jitterLags = realized_kernel_jitter_lag_length(noiseEstimate,iqEstimate,kernel,N)" 
},
"realized_kernel_weights": {
"prefix": "realized_kernel_weights",
"body": "${1:weights = }realized_kernel_weights(${2:options})$0",
"description": "function weights=realized_kernel_weights(options)" 
},
"realized_min_med_variance": {
"prefix": "realized_min_med_variance",
"body": "${1:[medRV, minRV, medRVSS, minRVSS] = }realized_min_med_variance(${2:price}, ${3:time}, ${4:timeType}, ${5:samplingType}, ${6:samplingInterval}, ${7:subsamples})$0",
"description": "function [medRV,minRV,medRVSS,minRVSS]=realized_min_med_variance(price,time,timeType,samplingType,samplingInterval,subsamples)" 
},
"realized_multiscale_variance": {
"prefix": "realized_multiscale_variance",
"body": "${1:[rvms, rvmsSS, diagnostics] = }realized_multiscale_variance(${2:price}, ${3:time}, ${4:timeType}, ${5:samplingType}, ${6:samplingInterval}, ${7:subsamples}, ${8:options})$0",
"description": "function [rvms,rvmsSS,diagnostics] = realized_multiscale_variance(price,time,timeType,samplingType,samplingInterval,subsamples,options)" 
},
"realized_multivariate_kernel": {
"prefix": "realized_multivariate_kernel",
"body": "${1:[rmk, diagnostics] = }realized_multivariate_kernel(${2:varargin})$0",
"description": "function [rmk,diagnostics]=realized_multivariate_kernel(varargin)" 
},
"realized_noise_estimate": {
"prefix": "realized_noise_estimate",
"body": "${1:[noiseVariance, debiasedNoiseVariance, IQEstimate] = }realized_noise_estimate(${2:price}, ${3:time}, ${4:timeType}, ${5:options})$0",
"description": "function [noiseVariance, debiasedNoiseVariance, IQEstimate] = realized_noise_estimate(price, time, timeType, options)" 
},
"realized_options": {
"prefix": "realized_options",
"body": "${1:options = }realized_options(${2:realizedFunction})$0",
"description": "function options = realized_options(realizedFunction)" 
},
"realized_price_filter": {
"prefix": "realized_price_filter",
"body": "${1:[filteredPrice, filteredTime, actualTime] = }realized_price_filter(${2:price}, ${3:time}, ${4:timeType}, ${5:samplingType}, ${6:samplingInterval})$0",
"description": "function [filteredPrice,filteredTime,actualTime] = realized_price_filter(price,time,timeType,samplingType,samplingInterval)" 
},
"realized_qmle_variance": {
"prefix": "realized_qmle_variance",
"body": "${1:[rqv, diagnostics] = }realized_qmle_variance(${2:price}, ${3:time}, ${4:timeType}, ${5:samplingType}, ${6:samplingInterval}, ${7:options})$0",
"description": "function [rqv,diagnostics]=realized_qmle_variance(price,time,timeType,samplingType,samplingInterval,options)" 
},
"realized_quantile_variance": {
"prefix": "realized_quantile_variance",
"body": "${1:[rq, rqSS, diagnostics] = }realized_quantile_variance(${2:price}, ${3:time}, ${4:timeType}, ${5:samplingType}, ${6:samplingInterval}, ${7:quantiles}, ${8:blockSize}, ${9:symmetric}, ${10:overlap}, ${11:subsamples})$0",
"description": "function [rq,rqSS,diagnostics] = realized_quantile_variance(price,time,timeType,samplingType,samplingInterval,quantiles,blockSize,symmetric,overlap,subsamples)" 
},
"realized_quantile_variance_scale": {
"prefix": "realized_quantile_variance_scale",
"body": "${1:[scales, weights, covar] = }realized_quantile_variance_scale(${2:samplesperbin}, ${3:quantiles}, ${4:simulations}, ${5:symmetric})$0",
"description": "function [scales,weights,covar]=realized_quantile_variance_scale(samplesperbin,quantiles,simulations,symmetric)" 
},
"realized_quantile_weight_simulation": {
"prefix": "realized_quantile_weight_simulation",
"body": "realized_quantile_weight_simulation$0",
"description": "realized_quantile_weight_simulation" 
},
"realized_quarticity": {
"prefix": "realized_quarticity",
"body": "${1:[qt, qtSS, qtDebiased, qtSSDebiased] = }realized_quarticity(${2:price}, ${3:time}, ${4:timeType}, ${5:samplingType}, ${6:samplingInterval}, ${7:QTtype}, ${8:skip}, ${9:subsamples})$0",
"description": "function [qt,qtSS,qtDebiased,qtSSDebiased] = realized_quarticity(price,time,timeType,samplingType,samplingInterval,QTtype,skip,subsamples)" 
},
"realized_range": {
"prefix": "realized_range",
"body": "${1:[rr, rrSS] = }realized_range(${2:price}, ${3:time}, ${4:timeType}, ${5:samplingType}, ${6:samplingInterval}, ${7:samplesperbin}, ${8:overlap}, ${9:subsamples})$0",
"description": "function [rr,rrSS]=realized_range(price,time,timeType,samplingType,samplingInterval,samplesperbin,overlap,subsamples)" 
},
"realized_range_simulation": {
"prefix": "realized_range_simulation",
"body": "realized_range_simulation$0",
"description": "realized_range_simulation" 
},
"realized_refresh_time": {
"prefix": "realized_refresh_time",
"body": "${1:[prices, refreshTimes, actualTimes] = }realized_refresh_time(${2:timeType}, ${3:varargin})$0",
"description": "function [prices, refreshTimes, actualTimes] = realized_refresh_time(timeType,varargin)" 
},
"realized_refresh_time_bivariate": {
"prefix": "realized_refresh_time_bivariate",
"body": "${1:[prices, refreshTimes, actualTimes] = }realized_refresh_time_bivariate(${2:timeType}, ${3:price1}, ${4:time1}, ${5:price2}, ${6:time2})$0",
"description": "function [prices, refreshTimes, actualTimes] = realized_refresh_time_bivariate(timeType,price1,time1,price2,time2)" 
},
"realized_return_filter": {
"prefix": "realized_return_filter",
"body": "${1:[returns, interval] = }realized_return_filter(${2:price}, ${3:time}, ${4:timeType}, ${5:samplingType}, ${6:samplingInterval}, ${7:subsamples})$0",
"description": "function [returns,interval] = realized_return_filter(price,time,timeType,samplingType,samplingInterval,subsamples)" 
},
"realized_semivariance": {
"prefix": "realized_semivariance",
"body": "${1:[rsvn, rsvp, rsvnSS, rsvpSS] = }realized_semivariance(${2:price}, ${3:time}, ${4:timeType}, ${5:samplingType}, ${6:samplingInterval}, ${7:subsamples})$0",
"description": "function [rsvn,rsvp,rsvnSS,rsvpSS]=realized_semivariance(price,time,timeType,samplingType,samplingInterval,subsamples)" 
},
"realized_subsample": {
"prefix": "realized_subsample",
"body": "${1:[subsampledPrice, subsampledTimes] = }realized_subsample(${2:price}, ${3:time}, ${4:timeType}, ${5:samplingType}, ${6:samplingInterval}, ${7:subSamples})$0",
"description": "function [subsampledPrice,subsampledTimes] = realized_subsample(price,time,timeType,samplingType,samplingInterval, subSamples)" 
},
"realized_test": {
"prefix": "realized_test",
"body": "realized_test$0",
"description": "realized_test" 
},
"realized_threshold_multipower_variation": {
"prefix": "realized_threshold_multipower_variation",
"body": "${1:[rv, rvSS] = }realized_threshold_multipower_variation(${2:price}, ${3:time}, ${4:timeType}, ${5:samplingType}, ${6:samplingInterval}, ${7:gamma}, ${8:thresholdScale}, ${9:thresholdType}, ${10:subsamples})$0",
"description": "function [rv,rvSS]=realized_threshold_multipower_variation(price,time,timeType,samplingType,samplingInterval,gamma,thresholdScale,thresholdType,subsamples)" 
},
"realized_threshold_variance": {
"prefix": "realized_threshold_variance",
"body": "${1:[rtv, rtvD, rtvSS, rtvSSD, diagnostics] = }realized_threshold_variance(${2:price}, ${3:time}, ${4:timeType}, ${5:samplingType}, ${6:samplingInterval}, ${7:thresholdScale}, ${8:localVar}, ${9:subsamples})$0",
"description": "function [rtv,rtvD,rtvSS,rtvSSD,diagnostics]=realized_threshold_variance(price,time,timeType,samplingType,samplingInterval,thresholdScale,localVar,subsamples)" 
},
"realized_twoscale_variance": {
"prefix": "realized_twoscale_variance",
"body": "${1:[rvts, rvtsSS, rvtsD, rvtsSSD, diagnostics] = }realized_twoscale_variance(${2:price}, ${3:time}, ${4:timeType}, ${5:samplingType}, ${6:samplingInterval}, ${7:subsamples}, ${8:options})$0",
"description": "function [rvts,rvtsSS,rvtsD,rvtsSSD,diagnostics] = realized_twoscale_variance(price,time,timeType,samplingType,samplingInterval,subsamples,options)" 
},
"realized_variance": {
"prefix": "realized_variance",
"body": "${1:[rv, rvSS] = }realized_variance(${2:price}, ${3:time}, ${4:timeType}, ${5:samplingType}, ${6:samplingInterval}, ${7:subsamples})$0",
"description": "function [rv,rvSS]=realized_variance(price,time,timeType,samplingType,samplingInterval,subsamples)" 
},
"realized_variance_optimal_sampling": {
"prefix": "realized_variance_optimal_sampling",
"body": "${1:[rv, rvDebiased, rvSS, rvDebiasedSS, diagnostics] = }realized_variance_optimal_sampling(${2:price}, ${3:time}, ${4:timeType}, ${5:samplingType}, ${6:samplingInterval}, ${7:subsamples}, ${8:options})$0",
"description": "function [rv,rvDebiased,rvSS,rvDebiasedSS,diagnostics] = realized_variance_optimal_sampling(price,time,timeType,samplingType,samplingInterval,subsamples,options)" 
},
"seconds2unit": {
"prefix": "seconds2unit",
"body": "${1:unit = }seconds2unit(${2:seconds}, ${3:seconds0}, ${4:seconds1})$0",
"description": "function unit = seconds2unit(seconds,seconds0,seconds1)" 
},
"seconds2wall": {
"prefix": "seconds2wall",
"body": "${1:wall = }seconds2wall(${2:seconds})$0",
"description": "function wall = seconds2wall(seconds)" 
},
"unit2seconds": {
"prefix": "unit2seconds",
"body": "${1:seconds = }unit2seconds(${2:unit}, ${3:seconds0}, ${4:seconds1})$0",
"description": "function seconds = unit2seconds(unit, seconds0, seconds1)" 
},
"unit2wall": {
"prefix": "unit2wall",
"body": "${1:wall = }unit2wall(${2:unit}, ${3:wall0}, ${4:wall1})$0",
"description": "function wall = unit2wall(unit, wall0, wall1)" 
},
"wall2seconds": {
"prefix": "wall2seconds",
"body": "${1:seconds = }wall2seconds(${2:wall})$0",
"description": "function seconds = wall2seconds(wall)" 
},
"wall2unit": {
"prefix": "wall2unit",
"body": "${1:unit = }wall2unit(${2:wall}, ${3:wall0}, ${4:wall1})$0",
"description": "function unit = wall2unit(wall,wall0,wall1)" 
},
"berkowitz_V1": {
"prefix": "berkowitz_V1",
"body": "${1:[stat, pval, H] = }berkowitz(${2:x}, ${3:type}, ${4:alpha}, ${5:dist}, ${6:varargin})$0",
"description": "function [stat,pval,H]=berkowitz(x,type,alpha,dist,varargin)" 
},
"jarquebera_V1": {
"prefix": "jarquebera_V1",
"body": "${1:[statistic, pval, H] = }jarquebera(${2:data}, ${3:K}, ${4:alpha})$0",
"description": "function [statistic,pval,H] = jarquebera(data, K, alpha)" 
},
"kolmogorov_V1": {
"prefix": "kolmogorov_V1",
"body": "${1:[stat, pval, H] = }kolmogorov(${2:x}, ${3:alpha}, ${4:dist}, ${5:varargin})$0",
"description": "function [stat,pval,H]=kolmogorov(x,alpha,dist,varargin)" 
},
"ljungbox": {
"prefix": "ljungbox",
"body": "${1:[q, pval] = }ljungbox(${2:data}, ${3:lags})$0",
"description": "function [q, pval] = ljungbox(data, lags)" 
},
"lmtest1_V1": {
"prefix": "lmtest1_V1",
"body": "${1:[lm, pval] = }lmtest1(${2:data}, ${3:q}, ${4:robust})$0",
"description": "function [lm, pval] = lmtest1(data,q,robust)" 
},
"acf_V4": {
"prefix": "acf_V4",
"body": "${1:[autocorr, sigma2_y] = }acf(${2:phi}, ${3:theta}, ${4:N}, ${5:sigma2_e})$0",
"description": "function [autocorr, sigma2_y] = acf(phi,theta,N,sigma2_e)" 
},
"aichqcsbic": {
"prefix": "aichqcsbic",
"body": "${1:[aic, hqc, sbic] = }aichqcsbic(${2:errors}, ${3:constant}, ${4:p}, ${5:q}, ${6:X})$0",
"description": "function [aic, hqc, sbic] = aichqcsbic(errors,constant,p,q,X)" 
},
"aicsbic": {
"prefix": "aicsbic",
"body": "${1:[aic, sbic] = }aicsbic(${2:errors}, ${3:constant}, ${4:p}, ${5:q}, ${6:X})$0",
"description": "function [aic, sbic] = aicsbic(errors,constant,p,q,X)" 
},
"arma_forecaster": {
"prefix": "arma_forecaster",
"body": "${1:[yhattph, ytph, forerr, ystd] = }arma_forecaster(${2:y}, ${3:parameters}, ${4:constant}, ${5:p}, ${6:q}, ${7:r}, ${8:h}, ${9:seregression}, ${10:holdBack})$0",
"description": "function [yhattph, ytph, forerr, ystd]=arma_forecaster(y, parameters, constant, p, q, r, h, seregression, holdBack)" 
},
"armaroots": {
"prefix": "armaroots",
"body": "${1:[arroots, absarroots] = }armaroots(${2:parameters}, ${3:constant}, ${4:p}, ${5:q}, ${6:X})$0",
"description": "function [arroots, absarroots] = armaroots(parameters, constant, p, q, X)" 
},
"armaxerrors": {
"prefix": "armaxerrors",
"body": "${1:errors = }armaxerrors(${2:parameters}, ${3:p}, ${4:q}, ${5:constant}, ${6:y}, ${7:x}, ${8:m}, ${9:sigma})$0",
"description": "function errors = armaxerrors(parameters,p,q,constant,y,x,m,sigma)" 
},
"armaxfilter_V1": {
"prefix": "armaxfilter_V1",
"body": "${1:[parameters, LL, errors, SEregression, diagnostics, VCVrobust, VCV, likelihoods, scores] = }armaxfilter(${2:y}, ${3:constant}, ${4:p}, ${5:q}, ${6:x}, ${7:startingVals}, ${8:options}, ${9:holdBack}, ${10:sigma2})$0",
"description": "function [parameters, LL, errors, SEregression, diagnostics, VCVrobust, VCV, likelihoods, scores]=armaxfilter(y,constant,p,q,x,startingVals,options,holdBack,sigma2)" 
},
"armaxfilter_core": {
"prefix": "armaxfilter_core",
"body": "${1:[errors, E] = }armaxfilter_core(${2:regressand}, ${3:regressors}, ${4:arxparameters}, ${5:maparameters}, ${6:q}, ${7:K}, ${8:tau}, ${9:maxq}, ${10:maxe})$0",
"description": "function [errors,E]=armaxfilter_core(regressand,regressors, arxparameters, maparameters, q, K, tau, maxq, maxe)" 
},
"armaxfilter_likelihood_V1": {
"prefix": "armaxfilter_likelihood_V1",
"body": "${1:[LLF, likelihoods, errors] = }armaxfilter_likelihood(${2:parameters}, ${3:p}, ${4:q}, ${5:constant}, ${6:y}, ${7:x}, ${8:m}, ${9:sigma})$0",
"description": "function [LLF, likelihoods, errors] = armaxfilter_likelihood(parameters,p,q,constant,y,x,m,sigma)" 
},
"armaxfilter_simulate": {
"prefix": "armaxfilter_simulate",
"body": "${1:[y, errors] = }armaxfilter_simulate(${2:T}, ${3:const}, ${4:ar}, ${5:ARparams}, ${6:ma}, ${7:MAparams}, ${8:X}, ${9:Xparams})$0",
"description": "function [y,errors]=armaxfilter_simulate(T,const,ar,ARparams,ma,MAparams,X,Xparams)" 
},
"augdf": {
"prefix": "augdf",
"body": "${1:[adfstat, pval, critval, resid] = }augdf(${2:y}, ${3:p}, ${4:lags})$0",
"description": "function [adfstat,pval,critval,resid]=augdf(y,p,lags)" 
},
"augdf_cvsim_tieup": {
"prefix": "augdf_cvsim_tieup",
"body": "augdf_cvsim_tieup$0",
"description": "augdf_cvsim_tieup" 
},
"augdfautolag": {
"prefix": "augdfautolag",
"body": "${1:[adfstat, pval, critval, resid, lags] = }augdfautolag(${2:y}, ${3:p}, ${4:maxlags}, ${5:IC})$0",
"description": "function [adfstat,pval,critval,resid,lags]=augdfautolag(y,p,maxlags,IC)" 
},
"augdfcv": {
"prefix": "augdfcv",
"body": "${1:[pval, critval] = }augdfcv(${2:tstat}, ${3:p}, ${4:T})$0",
"description": "function [pval,critval]=augdfcv(tstat,p,T)" 
},
"beveridgenelson": {
"prefix": "beveridgenelson",
"body": "${1:[trend, cyclic] = }beveridgenelson(${2:y}, ${3:parameters}, ${4:constant}, ${5:p}, ${6:q})$0",
"description": "function [trend,cyclic] = beveridgenelson(y,parameters,constant,p,q)" 
},
"bkfilter": {
"prefix": "bkfilter",
"body": "${1:[trend, cyclic, noise] = }bkfilter(${2:y}, ${3:p}, ${4:q}, ${5:k})$0",
"description": "function [trend, cyclic, noise] = bkfilter(y,p,q,k)" 
},
"convert_ma_roots": {
"prefix": "convert_ma_roots",
"body": "${1:parameters = }convert_ma_roots(${2:parameters}, ${3:q})$0",
"description": "function parameters = convert_ma_roots(parameters, q)" 
},
"grangercause": {
"prefix": "grangercause",
"body": "${1:[stat, pval, statAll, pvalAll] = }grangercause(${2:y}, ${3:constant}, ${4:lags}, ${5:het}, ${6:uncorr}, ${7:inference})$0",
"description": "function [stat,pval,statAll,pvalAll]=grangercause(y,constant,lags,het,uncorr,inference)" 
},
"heterogeneousar": {
"prefix": "heterogeneousar",
"body": "${1:[parameters, errors, SEregression, diagnostics, VCVrobust, VCV] = }heterogeneousar(${2:y}, ${3:constant}, ${4:p}, ${5:nw}, ${6:spec})$0",
"description": "function [parameters, errors, SEregression, diagnostics, VCVrobust, VCV]=heterogeneousar(y,constant,p,nw,spec)" 
},
"hp_filter": {
"prefix": "hp_filter",
"body": "${1:[trend, cyclic] = }hp_filter(${2:y}, ${3:lambda})$0",
"description": "function [trend,cyclic] = hp_filter(y,lambda)" 
},
"impulseresponse": {
"prefix": "impulseresponse",
"body": "${1:[impulses, impulsesstd, hfig] = }impulseresponse(${2:y}, ${3:constant}, ${4:lags}, ${5:leads}, ${6:sqrttype}, ${7:graph}, ${8:het}, ${9:uncorr})$0",
"description": "function [impulses,impulsesstd,hfig] = impulseresponse(y,constant,lags,leads,sqrttype,graph,het,uncorr)" 
},
"impulseresponse_bootstrap": {
"prefix": "impulseresponse_bootstrap",
"body": "${1:[impulses, impulseLowerCI, impulseUpperCI, hfig] = }impulseresponse_bootstrap(${2:y}, ${3:constant}, ${4:lags}, ${5:leads}, ${6:sqrttype}, ${7:graph}, ${8:bootstrap}, ${9:B}, ${10:w})$0",
"description": "function [impulses,impulseLowerCI,impulseUpperCI,hfig] = impulseresponse_bootstrap(y,constant,lags,leads,sqrttype,graph,bootstrap,B,w)" 
},
"inverse_ar_roots": {
"prefix": "inverse_ar_roots",
"body": "${1:[rho, stationary] = }inverse_ar_roots(${2:phi})$0",
"description": "function [rho, stationary]=inverse_ar_roots(phi)" 
},
"olsnw": {
"prefix": "olsnw",
"body": "${1:[b, tstat, s2, vcvnw, R2, Rbar, yhat] = }olsnw(${2:y}, ${3:x}, ${4:c}, ${5:nwlags})$0",
"description": "function [b, tstat, s2, vcvnw, R2, Rbar, yhat] = olsnw(y,x,c,nwlags)" 
},
"pacf": {
"prefix": "pacf",
"body": "${1:pautocorr = }pacf(${2:phi}, ${3:theta}, ${4:N})$0",
"description": "function [pautocorr] = pacf(phi,theta,N)" 
},
"sacf_V1": {
"prefix": "sacf_V1",
"body": "${1:[ac, acstd, hfig] = }sacf(${2:data}, ${3:lags}, ${4:robust}, ${5:graph})$0",
"description": "function [ac, acstd, hfig] = sacf(data, lags, robust, graph)" 
},
"spacf_V1": {
"prefix": "spacf_V1",
"body": "${1:[pac, pacstd, hfig] = }spacf(${2:data}, ${3:lags}, ${4:robust}, ${5:graph})$0",
"description": "function [pac, pacstd, hfig] = spacf(data, lags, robust, graph)" 
},
"tsresidualplot": {
"prefix": "tsresidualplot",
"body": "${1:varargout = }tsresidualplot(${2:y}, ${3:errors}, ${4:dates})$0",
"description": "function [varargout]  = tsresidualplot(y,errors,dates)" 
},
"vectorar": {
"prefix": "vectorar",
"body": "${1:[parameters, stderr, tstat, pval, const, conststd, r2, errors, s2, paramvec, vcv] = }vectorar(${2:y}, ${3:constant}, ${4:lags}, ${5:het}, ${6:uncorr})$0",
"description": "function [parameters,stderr,tstat,pval,const,conststd,r2,errors,s2,paramvec,vcv] = vectorar(y,constant,lags,het,uncorr)" 
},
"vectorarvcv": {
"prefix": "vectorarvcv",
"body": "${1:VCV = }vectorarvcv(${2:X}, ${3:errors}, ${4:het}, ${5:uncorr})$0",
"description": "function VCV = vectorarvcv(X,errors,het,uncorr)" 
},
"agarch": {
"prefix": "agarch",
"body": "${1:[parameters, LL, ht, VCVrobust, VCV, scores, diagnostics] = }agarch(${2:epsilon}, ${3:p}, ${4:q}, ${5:model_type}, ${6:error_type}, ${7:startingvals}, ${8:options})$0",
"description": "function [parameters, LL, ht, VCVrobust, VCV, scores, diagnostics] = agarch(epsilon, p, q, model_type, error_type, startingvals, options)" 
},
"agarch_core": {
"prefix": "agarch_core",
"body": "${1:ht = }agarch_core(${2:data}, ${3:parameters}, ${4:back_cast}, ${5:p}, ${6:q}, ${7:m}, ${8:T}, ${9:model_type})$0",
"description": "function ht=agarch_core(data,parameters,back_cast,p,q,m,T,model_type)" 
},
"agarch_display": {
"prefix": "agarch_display",
"body": "${1:[text, AIC, BIC] = }agarch_display(${2:parameters}, ${3:ll}, ${4:vcv}, ${5:epsilon}, ${6:p}, ${7:q}, ${8:modelType}, ${9:errorType})$0",
"description": "function [text,AIC,BIC]=agarch_display(parameters,ll,vcv,epsilon,p,q,modelType,errorType)" 
},
"agarch_itransform": {
"prefix": "agarch_itransform",
"body": "${1:[trans_parameters, nu, lambda] = }agarch_itransform(${2:parameters}, ${3:p}, ${4:q}, ${5:model_type}, ${6:error_type}, ${7:transform_bounds})$0",
"description": "function [trans_parameters,nu,lambda]=agarch_itransform(parameters,p,q,model_type,error_type,transform_bounds)" 
},
"agarch_likelihood": {
"prefix": "agarch_likelihood",
"body": "${1:[LL, LLS, ht] = }agarch_likelihood(${2:parameters}, ${3:epsilon_aug}, ${4:p}, ${5:q}, ${6:model_type}, ${7:error_type}, ${8:transform_bounds}, ${9:back_cast}, ${10:T}, ${11:estim_flag})$0",
"description": "function [LL, LLS, ht] = agarch_likelihood(parameters, epsilon_aug, p, q, model_type, error_type, transform_bounds, back_cast, T, estim_flag)" 
},
"agarch_parameter_check": {
"prefix": "agarch_parameter_check",
"body": "${1:[p, q, model_type, error_type, startingvals, options] = }agarch_parameter_check(${2:epsilon}, ${3:p}, ${4:q}, ${5:model_type}, ${6:error_type}, ${7:startingvals}, ${8:options})$0",
"description": "function [p,q,model_type,error_type,startingvals,options]=agarch_parameter_check(epsilon, p, q, model_type, error_type, startingvals, options)" 
},
"agarch_simulate": {
"prefix": "agarch_simulate",
"body": "${1:[simulatedata, ht] = }agarch_simulate(${2:t}, ${3:parameters}, ${4:p}, ${5:q}, ${6:model_type}, ${7:error_type})$0",
"description": "function [simulatedata, ht] = agarch_simulate(t,parameters,p,q,model_type,error_type)" 
},
"agarch_starting_values": {
"prefix": "agarch_starting_values",
"body": "${1:[startingvals, nu, lambda] = }agarch_starting_values(${2:startingvals}, ${3:epsilon}, ${4:p}, ${5:q}, ${6:model_type}, ${7:error_type})$0",
"description": "function [startingvals,nu,lambda]=agarch_starting_values(startingvals,epsilon,p,q,model_type,error_type)" 
},
"agarch_transform": {
"prefix": "agarch_transform",
"body": "${1:[trans_parameters, nu, lambda] = }agarch_transform(${2:parameters}, ${3:p}, ${4:q}, ${5:model_type}, ${6:error_type}, ${7:transform_bounds})$0",
"description": "function [trans_parameters,nu,lambda]=agarch_transform(parameters,p,q,model_type,error_type,transform_bounds)" 
},
"aparch": {
"prefix": "aparch",
"body": "${1:[parameters, LL, ht, VCVrobust, VCV, scores, diagnostics] = }aparch(${2:data}, ${3:p}, ${4:o}, ${5:q}, ${6:errorType}, ${7:userDelta}, ${8:startingvals}, ${9:options})$0",
"description": "function [parameters, LL, ht, VCVrobust, VCV, scores, diagnostics] = aparch(data, p, o, q, errorType, userDelta, startingvals, options)" 
},
"aparch_core": {
"prefix": "aparch_core",
"body": "${1:ht = }aparch_core(${2:data_aug}, ${3:abs_data_aug}, ${4:parameters}, ${5:p}, ${6:o}, ${7:q}, ${8:m}, ${9:T}, ${10:back_cast}, ${11:LB}, ${12:UB})$0",
"description": "function ht=aparch_core(data_aug,abs_data_aug,parameters,p,o,q,m,T,back_cast,LB,UB)" 
},
"aparch_display": {
"prefix": "aparch_display",
"body": "${1:[text, AIC, BIC] = }aparch_display(${2:parameters}, ${3:ll}, ${4:vcv}, ${5:data}, ${6:p}, ${7:o}, ${8:q}, ${9:errorType}, ${10:userDelta})$0",
"description": "function [text,AIC,BIC]=aparch_display(parameters,ll,vcv,data,p,o,q,errorType,userDelta)" 
},
"aparch_itransform": {
"prefix": "aparch_itransform",
"body": "${1:[trans_parameters, nu, lambda] = }aparch_itransform(${2:parameters}, ${3:p}, ${4:o}, ${5:q}, ${6:errorType}, ${7:deltaIsEstimated})$0",
"description": "function [trans_parameters,nu,lambda]=aparch_itransform(parameters,p,o,q,errorType,deltaIsEstimated)" 
},
"aparch_likelihood": {
"prefix": "aparch_likelihood",
"body": "${1:[LL, LLS, ht] = }aparch_likelihood(${2:parameters}, ${3:data_aug}, ${4:abs_data_aug}, ${5:p}, ${6:o}, ${7:q}, ${8:errorType}, ${9:T}, ${10:deltaIsEstimated}, ${11:userDelta}, ${12:estim_flag})$0",
"description": "function [LL, LLS, ht] = aparch_likelihood(parameters, data_aug, abs_data_aug, p, o, q, errorType, T, deltaIsEstimated, userDelta, estim_flag)" 
},
"aparch_loglikelihood": {
"prefix": "aparch_loglikelihood",
"body": "aparch_loglikelihood$0",
"description": "aparch_loglikelihood" 
},
"aparch_parameter_check": {
"prefix": "aparch_parameter_check",
"body": "${1:[p, o, q, errorType, userDelta, noUserDelta, startingvals, options] = }aparch_parameter_check(${2:data}, ${3:p}, ${4:o}, ${5:q}, ${6:errorType}, ${7:userDelta}, ${8:startingvals}, ${9:options})$0",
"description": "function [p,o,q,errorType,userDelta,noUserDelta,startingvals,options]=aparch_parameter_check(data, p, o, q, errorType, userDelta, startingvals, options)" 
},
"aparch_simulate": {
"prefix": "aparch_simulate",
"body": "${1:[simulatedata, ht] = }aparch_simulate(${2:t}, ${3:parameters}, ${4:p}, ${5:o}, ${6:q}, ${7:error_type})$0",
"description": "function [simulatedata, ht] = aparch_simulate(t,parameters,p,o,q,error_type)" 
},
"aparch_starting_values": {
"prefix": "aparch_starting_values",
"body": "${1:[startingvals, nu, lambda, LLs, output_parameters] = }aparch_starting_values(${2:startingvals}, ${3:data}, ${4:p}, ${5:o}, ${6:q}, ${7:errorType}, ${8:deltaIsEstimated})$0",
"description": "function [startingvals,nu,lambda,LLs,output_parameters]=aparch_starting_values(startingvals,data,p,o,q,errorType,deltaIsEstimated)" 
},
"aparch_transform": {
"prefix": "aparch_transform",
"body": "${1:[trans_parameters, nu, lambda] = }aparch_transform(${2:parameters}, ${3:p}, ${4:o}, ${5:q}, ${6:errorType}, ${7:deltaIsEstimated})$0",
"description": "function [trans_parameters,nu,lambda]=aparch_transform(parameters,p,o,q,errorType,deltaIsEstimated)" 
},
"egarch_V1": {
"prefix": "egarch_V1",
"body": "${1:[parameters, LL, ht, VCVrobust, VCV, scores, diagnostics] = }egarch(${2:data}, ${3:p}, ${4:o}, ${5:q}, ${6:error_type}, ${7:startingvals}, ${8:options})$0",
"description": "function [parameters, LL, ht, VCVrobust, VCV, scores, diagnostics] = egarch(data, p, o, q, error_type, startingvals, options)" 
},
"egarch_core": {
"prefix": "egarch_core",
"body": "${1:ht = }egarch_core(${2:data}, ${3:parameters}, ${4:back_cast}, ${5:upper}, ${6:p}, ${7:o}, ${8:q}, ${9:m}, ${10:T})$0",
"description": "function ht=egarch_core(data,parameters,back_cast,upper,p,o,q,m,T)" 
},
"egarch_display": {
"prefix": "egarch_display",
"body": "${1:[text, AIC, BIC] = }egarch_display(${2:parameters}, ${3:ll}, ${4:vcv}, ${5:data}, ${6:p}, ${7:o}, ${8:q}, ${9:errorType})$0",
"description": "function [text,AIC,BIC]=egarch_display(parameters,ll,vcv,data,p,o,q,errorType)" 
},
"egarch_itransform": {
"prefix": "egarch_itransform",
"body": "${1:parameters = }egarch_itransform(${2:parameters}, ${3:p}, ${4:o}, ${5:q}, ${6:error_type})$0",
"description": "function parameters=egarch_itransform(parameters,p,o,q,error_type)" 
},
"egarch_likelihood": {
"prefix": "egarch_likelihood",
"body": "${1:[LL, LLS, ht] = }egarch_likelihood(${2:parameters}, ${3:data}, ${4:p}, ${5:o}, ${6:q}, ${7:error_type}, ${8:back_cast}, ${9:T}, ${10:estim_flag})$0",
"description": "function [LL, LLS, ht] = egarch_likelihood(parameters, data, p, o, q, error_type, back_cast, T, estim_flag)" 
},
"egarch_nlcon": {
"prefix": "egarch_nlcon",
"body": "${1:[c, ceq] = }egarch_nlcon(${2:parameters}, ${3:data}, ${4:p}, ${5:o}, ${6:q}, ${7:error_type}, ${8:back_cast}, ${9:T}, ${10:estim_flag})$0",
"description": "function [c,ceq]=egarch_nlcon(parameters, data, p, o, q, error_type, back_cast, T, estim_flag)" 
},
"egarch_parameter_check": {
"prefix": "egarch_parameter_check",
"body": "${1:[p, o, q, error_type, startingvals, options] = }egarch_parameter_check(${2:data}, ${3:p}, ${4:o}, ${5:q}, ${6:error_type}, ${7:startingvals}, ${8:options})$0",
"description": "function [p,o,q,error_type,startingvals,options]=egarch_parameter_check(data, p, o, q, error_type, startingvals, options)" 
},
"egarch_simulate": {
"prefix": "egarch_simulate",
"body": "${1:[simulatedata, ht] = }egarch_simulate(${2:t}, ${3:parameters}, ${4:p}, ${5:o}, ${6:q}, ${7:error_type})$0",
"description": "function [simulatedata, ht] = egarch_simulate(t,parameters,p,o,q,error_type)" 
},
"egarch_starting_values": {
"prefix": "egarch_starting_values",
"body": "${1:[startingvals, nu, lambda, LLs, output_parameters] = }egarch_starting_values(${2:startingvals}, ${3:data}, ${4:p}, ${5:o}, ${6:q}, ${7:T}, ${8:error_type})$0",
"description": "function [startingvals,nu,lambda,LLs,output_parameters]=egarch_starting_values(startingvals,data,p,o,q,T,error_type)" 
},
"egarch_transform": {
"prefix": "egarch_transform",
"body": "${1:parameters = }egarch_transform(${2:parameters}, ${3:p}, ${4:o}, ${5:q}, ${6:error_type})$0",
"description": "function parameters=egarch_transform(parameters,p,o,q,error_type)" 
},
"figarch": {
"prefix": "figarch",
"body": "${1:[parameters, LL, ht, VCVrobust, VCV, scores, diagnostics] = }figarch(${2:epsilon}, ${3:p}, ${4:q}, ${5:errorType}, ${6:truncLag}, ${7:startingvals}, ${8:options})$0",
"description": "function [parameters, LL, ht, VCVrobust, VCV, scores, diagnostics] = figarch(epsilon, p, q, errorType, truncLag, startingvals, options)" 
},
"figarch_itransform": {
"prefix": "figarch_itransform",
"body": "${1:[parameters, nu, lambda] = }figarch_itransform(${2:parameters}, ${3:p}, ${4:q}, ${5:errorType})$0",
"description": "function [parameters,nu,lambda] = figarch_itransform(parameters,p,q,errorType)" 
},
"figarch_likelihood": {
"prefix": "figarch_likelihood",
"body": "${1:[LL, LLS, ht] = }figarch_likelihood(${2:parameters}, ${3:p}, ${4:q}, ${5:epsilon}, ${6:epsilon2}, ${7:truncLag}, ${8:errorType}, ${9:estimFlag})$0",
"description": "function [LL,LLS,ht] = figarch_likelihood(parameters,p,q,epsilon,epsilon2,truncLag,errorType,estimFlag)" 
},
"figarch_parameter_check": {
"prefix": "figarch_parameter_check",
"body": "${1:[p, q, errorType, truncLag, startingvals, options] = }figarch_parameter_check(${2:epsilon}, ${3:p}, ${4:q}, ${5:errorType}, ${6:truncLag}, ${7:startingvals}, ${8:options})$0",
"description": "function [p,q,errorType,truncLag,startingvals,options]=figarch_parameter_check(epsilon,p,q,errorType,truncLag,startingvals,options)" 
},
"figarch_simulate": {
"prefix": "figarch_simulate",
"body": "${1:[simulatedata, ht, lambda] = }figarch_simulate(${2:t}, ${3:parameters}, ${4:p}, ${5:q}, ${6:errorType}, ${7:truncLag}, ${8:bcLength})$0",
"description": "function [simulatedata, ht, lambda] = figarch_simulate(t,parameters,p,q,errorType,truncLag,bcLength)" 
},
"figarch_starting_values": {
"prefix": "figarch_starting_values",
"body": "${1:[startingvals, nu, lambda, LLs, outputParameters] = }figarch_starting_values(${2:startingvals}, ${3:epsilon}, ${4:epsilon2}, ${5:p}, ${6:q}, ${7:errorType}, ${8:truncLag})$0",
"description": "function [startingvals,nu,lambda,LLs,outputParameters]=figarch_starting_values(startingvals,epsilon,epsilon2,p,q,errorType,truncLag)" 
},
"figarch_transform": {
"prefix": "figarch_transform",
"body": "${1:[trans_parameters, nu, lambda] = }figarch_transform(${2:parameters}, ${3:p}, ${4:q}, ${5:errorType})$0",
"description": "function [trans_parameters,nu,lambda] = figarch_transform(parameters,p,q,errorType)" 
},
"figarch_weights": {
"prefix": "figarch_weights",
"body": "${1:lambda = }figarch_weights(${2:parameters}, ${3:p}, ${4:q}, ${5:truncLag})$0",
"description": "function lambda = figarch_weights(parameters,p,q,truncLag)" 
},
"heavy": {
"prefix": "heavy",
"body": "${1:[parameters, ll, ht, VCV, scores] = }heavy(${2:data}, ${3:p}, ${4:q}, ${5:cons}, ${6:startingVals}, ${7:options})$0",
"description": "function [parameters, ll, ht, VCV, scores] = heavy(data,p,q,cons,startingVals,options)" 
},
"heavy_likelihood": {
"prefix": "heavy_likelihood",
"body": "${1:[ll, lls, h] = }heavy_likelihood(${2:parameters}, ${3:data}, ${4:p}, ${5:q}, ${6:backCast}, ${7:lb}, ${8:ub})$0",
"description": "function [ll,lls,h] = heavy_likelihood(parameters,data,p,q,backCast,lb,ub)" 
},
"heavy_parameter_transform": {
"prefix": "heavy_parameter_transform",
"body": "${1:[O, A, B] = }heavy_parameter_transform(${2:parameters}, ${3:p}, ${4:q}, ${5:K})$0",
"description": "function [O,A,B] = heavy_parameter_transform(parameters,p,q,K)" 
},
"heavy_simulate": {
"prefix": "heavy_simulate",
"body": "${1:[data, ht] = }heavy_simulate(${2:T}, ${3:K}, ${4:parameters}, ${5:p}, ${6:q}, ${7:m}, ${8:R})$0",
"description": "function [data,ht] = heavy_simulate(T,K,parameters,p,q,m,R)" 
},
"igarch": {
"prefix": "igarch",
"body": "${1:[parameters, LL, ht, VCVrobust, VCV, scores, diagnostics] = }igarch(${2:epsilon}, ${3:p}, ${4:q}, ${5:errorType}, ${6:igarchType}, ${7:constant}, ${8:startingvals}, ${9:options})$0",
"description": "function [parameters, LL, ht, VCVrobust, VCV, scores, diagnostics] = igarch(epsilon, p, q, errorType, igarchType, constant, startingvals, options)" 
},
"igarch_core": {
"prefix": "igarch_core",
"body": "${1:ht = }igarch_core(${2:fepsilon}, ${3:parameters}, ${4:backCast}, ${5:p}, ${6:q}, ${7:m}, ${8:T}, ${9:igarchType}, ${10:constant})$0",
"description": "function ht=igarch_core(fepsilon,parameters,backCast,p,q,m,T,igarchType,constant)" 
},
"igarch_display": {
"prefix": "igarch_display",
"body": "${1:[text, AIC, BIC] = }igarch_display(${2:parameters}, ${3:ll}, ${4:vcv}, ${5:data}, ${6:p}, ${7:q}, ${8:errorType}, ${9:igarchType}, ${10:constant})$0",
"description": "function [text,AIC,BIC]=igarch_display(parameters,ll,vcv,data,p,q,errorType,igarchType,constant)" 
},
"igarch_itransform": {
"prefix": "igarch_itransform",
"body": "${1:[transParameters, nu, lambda] = }igarch_itransform(${2:parameters}, ${3:p}, ${4:q}, ${5:errorType}, ${6:constant})$0",
"description": "function [transParameters,nu,lambda]=igarch_itransform(parameters,p,q,errorType,constant)" 
},
"igarch_likelihood": {
"prefix": "igarch_likelihood",
"body": "${1:[LL, LLS, ht] = }igarch_likelihood(${2:parameters}, ${3:epsilon}, ${4:fepsilon}, ${5:p}, ${6:q}, ${7:errorType}, ${8:igarchType}, ${9:constant}, ${10:backCast}, ${11:T}, ${12:estimFlag})$0",
"description": "function [LL, LLS, ht] = igarch_likelihood(parameters, epsilon, fepsilon, p, q, errorType, igarchType, constant, backCast, T, estimFlag)" 
},
"igarch_parameter_check": {
"prefix": "igarch_parameter_check",
"body": "${1:[p, q, errorType, igarchType, constant, startingvals, options] = }igarch_parameter_check(${2:epsilon}, ${3:p}, ${4:q}, ${5:errorType}, ${6:igarchType}, ${7:constant}, ${8:startingvals}, ${9:options})$0",
"description": "function [p,q,errorType,igarchType,constant,startingvals,options]=igarch_parameter_check(epsilon, p, q, errorType, igarchType, constant, startingvals, options)" 
},
"igarch_starting_values": {
"prefix": "igarch_starting_values",
"body": "${1:[startingvals, nu, lambda, LLs, outputParameters] = }igarch_starting_values(${2:startingvals}, ${3:epsilon}, ${4:fepsilon}, ${5:p}, ${6:q}, ${7:T}, ${8:errorType}, ${9:igarchType}, ${10:constant})$0",
"description": "function [startingvals,nu,lambda,LLs,outputParameters]=igarch_starting_values(startingvals,epsilon,fepsilon,p,q,T,errorType,igarchType,constant)" 
},
"igarch_transform": {
"prefix": "igarch_transform",
"body": "${1:[transParameters, nu, lambda] = }igarch_transform(${2:parameters}, ${3:p}, ${4:q}, ${5:errorType}, ${6:constant})$0",
"description": "function [transParameters,nu,lambda]=igarch_transform(parameters,p,q,errorType,constant)" 
},
"tarch_V1": {
"prefix": "tarch_V1",
"body": "${1:[parameters, LL, ht, VCVrobust, VCV, scores, diagnostics] = }tarch(${2:epsilon}, ${3:p}, ${4:o}, ${5:q}, ${6:error_type}, ${7:tarch_type}, ${8:startingvals}, ${9:options})$0",
"description": "function [parameters, LL, ht, VCVrobust, VCV, scores, diagnostics] = tarch(epsilon, p, o, q, error_type, tarch_type, startingvals, options)" 
},
"tarch_core": {
"prefix": "tarch_core",
"body": "${1:ht = }tarch_core(${2:fdata}, ${3:fIdata}, ${4:parameters}, ${5:back_cast}, ${6:p}, ${7:o}, ${8:q}, ${9:m}, ${10:T}, ${11:tarch_type})$0",
"description": "function ht=tarch_core(fdata,fIdata,parameters,back_cast,p,o,q,m,T,tarch_type)" 
},
"tarch_core_simple": {
"prefix": "tarch_core_simple",
"body": "${1:ht = }tarch_core_simple(${2:data}, ${3:parameters}, ${4:backCast}, ${5:backCastAsym}, ${6:p}, ${7:o}, ${8:q}, ${9:tarch_type})$0",
"description": "function ht=tarch_core_simple(data,parameters,backCast,backCastAsym,p,o,q,tarch_type)" 
},
"tarch_display": {
"prefix": "tarch_display",
"body": "${1:[text, AIC, BIC] = }tarch_display(${2:parameters}, ${3:ll}, ${4:vcv}, ${5:data}, ${6:p}, ${7:o}, ${8:q}, ${9:errorType}, ${10:tarchType})$0",
"description": "function [text,AIC,BIC]=tarch_display(parameters,ll,vcv,data,p,o,q,errorType,tarchType)" 
},
"tarch_itransform": {
"prefix": "tarch_itransform",
"body": "${1:[trans_parameters, nu, lambda] = }tarch_itransform(${2:parameters}, ${3:p}, ${4:o}, ${5:q}, ${6:error_type})$0",
"description": "function [trans_parameters,nu,lambda]=tarch_itransform(parameters,p,o,q,error_type)" 
},
"tarch_likelihood": {
"prefix": "tarch_likelihood",
"body": "${1:[LL, LLS, ht] = }tarch_likelihood(${2:parameters}, ${3:data}, ${4:fdata}, ${5:fIdata}, ${6:p}, ${7:o}, ${8:q}, ${9:error_type}, ${10:tarch_type}, ${11:back_cast}, ${12:T}, ${13:estim_flag})$0",
"description": "function [LL, LLS, ht] = tarch_likelihood(parameters, data, fdata, fIdata, p, o, q, error_type, tarch_type, back_cast, T, estim_flag)" 
},
"tarch_parameter_check": {
"prefix": "tarch_parameter_check",
"body": "${1:[p, o, q, error_type, tarch_type, startingvals, options] = }tarch_parameter_check(${2:data}, ${3:p}, ${4:o}, ${5:q}, ${6:error_type}, ${7:tarch_type}, ${8:startingvals}, ${9:options})$0",
"description": "function [p,o,q,error_type,tarch_type,startingvals,options]=tarch_parameter_check(data, p, o, q, error_type, tarch_type, startingvals, options)" 
},
"tarch_simulate": {
"prefix": "tarch_simulate",
"body": "${1:[simulatedata, ht] = }tarch_simulate(${2:t}, ${3:parameters}, ${4:p}, ${5:o}, ${6:q}, ${7:error_type}, ${8:tarch_type})$0",
"description": "function [simulatedata, ht] = tarch_simulate(t,parameters,p,o,q,error_type,tarch_type)" 
},
"tarch_starting_values": {
"prefix": "tarch_starting_values",
"body": "${1:[startingvals, nu, lambda, LLs, output_parameters] = }tarch_starting_values(${2:startingvals}, ${3:data}, ${4:fdata}, ${5:fIdata}, ${6:p}, ${7:o}, ${8:q}, ${9:T}, ${10:error_type}, ${11:tarch_type})$0",
"description": "function [startingvals,nu,lambda,LLs,output_parameters]=tarch_starting_values(startingvals,data,fdata,fIdata,p,o,q,T,error_type,tarch_type)" 
},
"tarch_transform": {
"prefix": "tarch_transform",
"body": "${1:[trans_parameters, nu, lambda] = }tarch_transform(${2:parameters}, ${3:p}, ${4:o}, ${5:q}, ${6:error_type})$0",
"description": "function [trans_parameters,nu,lambda]=tarch_transform(parameters,p,o,q,error_type)" 
},
"c2mdate": {
"prefix": "c2mdate",
"body": "${1:mldate = }c2mdate(${2:crspdate})$0",
"description": "function mldate = c2mdate(crspdate)" 
},
"chol2vec": {
"prefix": "chol2vec",
"body": "${1:stackedData = }chol2vec(${2:matrixData})$0",
"description": "function stackedData = chol2vec(matrixData)" 
},
"corr_ivech": {
"prefix": "corr_ivech",
"body": "${1:matrixData = }corr_ivech(${2:stackedData})$0",
"description": "function matrixData=corr_ivech(stackedData)" 
},
"corr_vech": {
"prefix": "corr_vech",
"body": "${1:stackedData = }corr_vech(${2:matrixData})$0",
"description": "function stackedData = corr_vech(matrixData)" 
},
"cov2corr_V2": {
"prefix": "cov2corr_V2",
"body": "${1:[sigma, correl] = }cov2corr(${2:cov})$0",
"description": "function [sigma,correl] = cov2corr(cov)" 
},
"covnw": {
"prefix": "covnw",
"body": "${1:V = }covnw(${2:data}, ${3:nlag}, ${4:demean})$0",
"description": "function V=covnw(data,nlag,demean)" 
},
"covvar": {
"prefix": "covvar",
"body": "${1:[V, lagsused] = }covvar(${2:data}, ${3:maxlag}, ${4:method})$0",
"description": "function [V,lagsused]=covvar(data,maxlag,method)" 
},
"demean_V2": {
"prefix": "demean_V2",
"body": "${1:x = }demean(${2:y})$0",
"description": "function x = demean(y)" 
},
"dirod": {
"prefix": "dirod",
"body": "${1:varargout = }dirod(${2:varargin})$0",
"description": "function varargout = dirod(varargin)" 
},
"gradient_2sided": {
"prefix": "gradient_2sided",
"body": "${1:[G, Gt] = }gradient_2sided(${2:f}, ${3:x}, ${4:varargin})$0",
"description": "function [G,Gt] = gradient_2sided(f,x,varargin)" 
},
"hessian_2sided_nrows": {
"prefix": "hessian_2sided_nrows",
"body": "${1:H = }hessian_2sided_nrows(${2:f}, ${3:x}, ${4:k}, ${5:varargin})$0",
"description": "function H = hessian_2sided_nrows(f,x,k,varargin)" 
},
"ivech_V1": {
"prefix": "ivech_V1",
"body": "${1:matrixData = }ivech(${2:stackedData})$0",
"description": "function matrixData=ivech(stackedData)" 
},
"m2cdate": {
"prefix": "m2cdate",
"body": "${1:crspdate = }m2cdate(${2:mldate})$0",
"description": "function  crspdate = m2cdate(mldate)" 
},
"mvstandardize": {
"prefix": "mvstandardize",
"body": "${1:st = }mvstandardize(${2:x}, ${3:sigma}, ${4:demean})$0",
"description": "function st=mvstandardize(x,sigma,demean)" 
},
"phi2r": {
"prefix": "phi2r",
"body": "${1:R = }phi2r(${2:phi}, ${3:transform})$0",
"description": "function R = phi2r(phi,transform)" 
},
"phi2u": {
"prefix": "phi2u",
"body": "${1:U = }phi2u(${2:phi})$0",
"description": "function U = phi2u(phi)" 
},
"r2phi": {
"prefix": "r2phi",
"body": "${1:phi = }r2phi(${2:R})$0",
"description": "function phi = r2phi(R)" 
},
"r2z": {
"prefix": "r2z",
"body": "${1:z = }r2z(${2:R})$0",
"description": "function z = r2z(R)" 
},
"randchar": {
"prefix": "randchar",
"body": "${1:c = }randchar(${2:n})$0",
"description": "function c = randchar(n)" 
},
"standardize": {
"prefix": "standardize",
"body": "${1:st = }standardize(${2:x}, ${3:demean})$0",
"description": "function st=standardize(x,demean)" 
},
"vec2chol": {
"prefix": "vec2chol",
"body": "${1:matrixData = }vec2chol(${2:stackedData})$0",
"description": "function matrixData= vec2chol(stackedData)" 
},
"vech_V1": {
"prefix": "vech_V1",
"body": "${1:stackedData = }vech(${2:matrixData})$0",
"description": "function stackedData = vech(matrixData)" 
},
"x2mdate": {
"prefix": "x2mdate",
"body": "${1:mldate = }x2mdate(${2:xlsdate}, ${3:type})$0",
"description": "function mldate = x2mdate(xlsdate, type)" 
},
"z2r": {
"prefix": "z2r",
"body": "${1:R = }z2r(${2:z})$0",
"description": "function R = z2r(z)" 
},
"startup": {
"prefix": "startup",
"body": "startup$0",
"description": "startup" 
},
"autocov_to_cpsd": {
"prefix": "autocov_to_cpsd",
"body": "${1:[S, fres] = }autocov_to_cpsd(${2:G}, ${3:fres})$0",
"description": "function [S,fres] = autocov_to_cpsd(G,fres)" 
},
"autocov_to_var": {
"prefix": "autocov_to_var",
"body": "${1:[AF, SIG] = }autocov_to_var(${2:G})$0",
"description": "function [AF,SIG] = autocov_to_var(G)" 
},
"autocov_xform": {
"prefix": "autocov_xform",
"body": "${1:G = }autocov_xform(${2:G}, ${3:AR}, ${4:SIGR}, ${5:useFFT})$0",
"description": "function G = autocov_xform(G,AR,SIGR,useFFT)" 
},
"cpsd_to_autocov": {
"prefix": "cpsd_to_autocov",
"body": "${1:[G, q] = }cpsd_to_autocov(${2:S}, ${3:q})$0",
"description": "function [G,q] = cpsd_to_autocov(S,q)" 
},
"cpsd_to_var": {
"prefix": "cpsd_to_var",
"body": "${1:[H, SIG, iters] = }cpsd_to_var(${2:S}, ${3:G0}, ${4:maxiters}, ${5:numtol})$0",
"description": "function [H,SIG,iters] = cpsd_to_var(S,G0,maxiters,numtol)" 
},
"cpsd_xform": {
"prefix": "cpsd_xform",
"body": "${1:S = }cpsd_xform(${2:S}, ${3:AR}, ${4:SIGR})$0",
"description": "function S = cpsd_xform(S,AR,SIGR)" 
},
"tsdata_to_autocov": {
"prefix": "tsdata_to_autocov",
"body": "${1:G = }tsdata_to_autocov(${2:X}, ${3:q})$0",
"description": "function G = tsdata_to_autocov(X,q)" 
},
"tsdata_to_cpsd": {
"prefix": "tsdata_to_cpsd",
"body": "${1:S = }tsdata_to_cpsd(${2:X}, ${3:fres}, ${4:method}, ${5:window}, ${6:noverlap}, ${7:nw}, ${8:ntapers})$0",
"description": "function S = tsdata_to_cpsd(X,fres,method,window,noverlap,nw,ntapers)" 
},
"tsdata_to_infocrit": {
"prefix": "tsdata_to_infocrit",
"body": "${1:[aic, bic, moaic, mobic] = }tsdata_to_infocrit(${2:X}, ${3:morder}, ${4:regmode}, ${5:verb})$0",
"description": "function [aic,bic,moaic,mobic] = tsdata_to_infocrit(X,morder,regmode,verb)" 
},
"tsdata_to_var": {
"prefix": "tsdata_to_var",
"body": "${1:[A, SIG, E] = }tsdata_to_var(${2:X}, ${3:p}, ${4:regmode})$0",
"description": "function [A,SIG,E] = tsdata_to_var(X,p,regmode)" 
},
"var_to_autocov": {
"prefix": "var_to_autocov",
"body": "${1:[G, info] = }var_to_autocov(${2:A}, ${3:SIG}, ${4:acmaxlags}, ${5:acdectol}, ${6:aitr}, ${7:maxiters}, ${8:maxrelerr})$0",
"description": "function [G,info] = var_to_autocov(A,SIG,acmaxlags,acdectol,aitr,maxiters,maxrelerr)" 
},
"var_to_cpsd": {
"prefix": "var_to_cpsd",
"body": "${1:[S, H] = }var_to_cpsd(${2:A}, ${3:SIG}, ${4:fres})$0",
"description": "function [S,H] = var_to_cpsd(A,SIG,fres)" 
},
"var_to_tsdata": {
"prefix": "var_to_tsdata",
"body": "${1:[X, E, mtrunc] = }var_to_tsdata(${2:A}, ${3:SIG}, ${4:m}, ${5:N}, ${6:mtrunc}, ${7:decayfac})$0",
"description": "function [X,E,mtrunc] = var_to_tsdata(A,SIG,m,N,mtrunc,decayfac)" 
},
"var_to_tsdata_nonstat": {
"prefix": "var_to_tsdata_nonstat",
"body": "${1:X = }var_to_tsdata_nonstat(${2:A}, ${3:SIG}, ${4:N})$0",
"description": "function X = var_to_tsdata_nonstat(A,SIG,N)" 
},
"mvgc_demo": {
"prefix": "mvgc_demo",
"body": "mvgc_demo$0",
"description": "mvgc_demo" 
},
"mvgc_demo_GCCA": {
"prefix": "mvgc_demo_GCCA",
"body": "mvgc_demo_GCCA$0",
"description": "mvgc_demo_GCCA" 
},
"mvgc_demo_bootstrap": {
"prefix": "mvgc_demo_bootstrap",
"body": "mvgc_demo_bootstrap$0",
"description": "mvgc_demo_bootstrap" 
},
"mvgc_demo_nonstationary": {
"prefix": "mvgc_demo_nonstationary",
"body": "mvgc_demo_nonstationary$0",
"description": "mvgc_demo_nonstationary" 
},
"mvgc_demo_permtest": {
"prefix": "mvgc_demo_permtest",
"body": "mvgc_demo_permtest$0",
"description": "mvgc_demo_permtest" 
},
"mvgc_demo_stats": {
"prefix": "mvgc_demo_stats",
"body": "mvgc_demo_stats$0",
"description": "mvgc_demo_stats" 
},
"var5_test": {
"prefix": "var5_test",
"body": "${1:A = }var5_test$0",
"description": "function A = var5_test" 
},
"var9_test": {
"prefix": "var9_test",
"body": "${1:A = }var9_test$0",
"description": "function A = var9_test" 
},
"mvgc_schema": {
"prefix": "mvgc_schema",
"body": "mvgc_schema$0",
"description": "mvgc_schema" 
},
"mvgcfuncref": {
"prefix": "mvgcfuncref",
"body": "mvgcfuncref$0",
"description": "mvgcfuncref" 
},
"mvgchelp": {
"prefix": "mvgchelp",
"body": "mvgchelp$0",
"description": "mvgchelp" 
},
"mvgcrelnotes": {
"prefix": "mvgcrelnotes",
"body": "mvgcrelnotes$0",
"description": "mvgcrelnotes" 
},
"mvgc_adf": {
"prefix": "mvgc_adf",
"body": "${1:[tstat, cval] = }mvgc_adf(${2:X}, ${3:alpha}, ${4:q}, ${5:pdeg})$0",
"description": "function [tstat,cval] = mvgc_adf(X,alpha,q,pdeg)" 
},
"mvgc_kpss": {
"prefix": "mvgc_kpss",
"body": "${1:[ksstat, cval] = }mvgc_kpss(${2:X}, ${3:alpha}, ${4:q})$0",
"description": "function [ksstat,cval] = mvgc_kpss(X,alpha,q)" 
},
"tsdata_to_autocov_debias": {
"prefix": "tsdata_to_autocov_debias",
"body": "${1:G = }tsdata_to_autocov_debias(${2:X}, ${3:q})$0",
"description": "function G = tsdata_to_autocov_debias(X,q)" 
},
"autocov_to_mvgc": {
"prefix": "autocov_to_mvgc",
"body": "${1:F = }autocov_to_mvgc(${2:G}, ${3:x}, ${4:y})$0",
"description": "function F = autocov_to_mvgc(G,x,y)" 
},
"autocov_to_pwcgc": {
"prefix": "autocov_to_pwcgc",
"body": "${1:F = }autocov_to_pwcgc(${2:G})$0",
"description": "function F = autocov_to_pwcgc(G)" 
},
"autocov_to_smvgc": {
"prefix": "autocov_to_smvgc",
"body": "${1:[f, fres] = }autocov_to_smvgc(${2:G}, ${3:x}, ${4:y}, ${5:fres}, ${6:useFFT})$0",
"description": "function [f,fres] = autocov_to_smvgc(G,x,y,fres,useFFT)" 
},
"autocov_to_spwcgc": {
"prefix": "autocov_to_spwcgc",
"body": "${1:[f, fres] = }autocov_to_spwcgc(${2:G}, ${3:fres}, ${4:useFFT})$0",
"description": "function [f,fres] = autocov_to_spwcgc(G,fres,useFFT)" 
},
"smvgc_to_mvgc": {
"prefix": "smvgc_to_mvgc",
"body": "${1:F = }smvgc_to_mvgc(${2:f}, ${3:B})$0",
"description": "function F = smvgc_to_mvgc(f,B)" 
},
"GCCA_tsdata_to_mvgc": {
"prefix": "GCCA_tsdata_to_mvgc",
"body": "${1:F = }GCCA_tsdata_to_mvgc(${2:U}, ${3:x}, ${4:y}, ${5:p}, ${6:regmode})$0",
"description": "function F = GCCA_tsdata_to_mvgc(U,x,y,p,regmode)" 
},
"GCCA_tsdata_to_pwcgc": {
"prefix": "GCCA_tsdata_to_pwcgc",
"body": "${1:[F, A, SIG, E] = }GCCA_tsdata_to_pwcgc(${2:X}, ${3:p}, ${4:regmode})$0",
"description": "function [F,A,SIG,E] = GCCA_tsdata_to_pwcgc(X,p,regmode)" 
},
"GCCA_tsdata_to_smvgc": {
"prefix": "GCCA_tsdata_to_smvgc",
"body": "${1:f = }GCCA_tsdata_to_smvgc(${2:U}, ${3:x}, ${4:y}, ${5:p}, ${6:fres}, ${7:regmode})$0",
"description": "function f = GCCA_tsdata_to_smvgc(U,x,y,p,fres,regmode)" 
},
"bootstrap_tsdata_to_mvgc": {
"prefix": "bootstrap_tsdata_to_mvgc",
"body": "${1:FB = }bootstrap_tsdata_to_mvgc(${2:U}, ${3:x}, ${4:y}, ${5:p}, ${6:nsamps}, ${7:acmaxlags}, ${8:acdectol})$0",
"description": "function FB = bootstrap_tsdata_to_mvgc(U,x,y,p,nsamps,acmaxlags,acdectol)" 
},
"bootstrap_tsdata_to_pwcgc": {
"prefix": "bootstrap_tsdata_to_pwcgc",
"body": "${1:FB = }bootstrap_tsdata_to_pwcgc(${2:U}, ${3:p}, ${4:nsamps}, ${5:acmaxlags}, ${6:acdectol})$0",
"description": "function FB = bootstrap_tsdata_to_pwcgc(U,p,nsamps,acmaxlags,acdectol)" 
},
"bootstrap_tsdata_to_smvgc": {
"prefix": "bootstrap_tsdata_to_smvgc",
"body": "${1:fB = }bootstrap_tsdata_to_smvgc(${2:U}, ${3:x}, ${4:y}, ${5:p}, ${6:fres}, ${7:nsamps}, ${8:acmaxlags}, ${9:acdectol})$0",
"description": "function fB = bootstrap_tsdata_to_smvgc(U,x,y,p,fres,nsamps,acmaxlags,acdectol)" 
},
"bootstrap_tsdata_to_spwcgc": {
"prefix": "bootstrap_tsdata_to_spwcgc",
"body": "${1:fB = }bootstrap_tsdata_to_spwcgc(${2:U}, ${3:p}, ${4:fres}, ${5:nsamps}, ${6:acmaxlags}, ${7:acdectol})$0",
"description": "function fB = bootstrap_tsdata_to_spwcgc(U,p,fres,nsamps,acmaxlags,acdectol)" 
},
"empirical_var_to_mvgc": {
"prefix": "empirical_var_to_mvgc",
"body": "${1:FE = }empirical_var_to_mvgc(${2:A}, ${3:SIG}, ${4:m}, ${5:N}, ${6:x}, ${7:y}, ${8:H0}, ${9:nsamps}, ${10:mtrunc}, ${11:decayfac}, ${12:regmode}, ${13:acmaxlags}, ${14:acdectol})$0",
"description": "function FE = empirical_var_to_mvgc(A,SIG,m,N,x,y,H0,nsamps,mtrunc,decayfac,regmode,acmaxlags,acdectol)" 
},
"empirical_var_to_pwcgc": {
"prefix": "empirical_var_to_pwcgc",
"body": "${1:FE = }empirical_var_to_pwcgc(${2:A}, ${3:SIG}, ${4:m}, ${5:N}, ${6:H0}, ${7:nsamps}, ${8:mtrunc}, ${9:decayfac}, ${10:regmode}, ${11:acmaxlags}, ${12:acdectol})$0",
"description": "function FE = empirical_var_to_pwcgc(A,SIG,m,N,H0,nsamps,mtrunc,decayfac,regmode,acmaxlags,acdectol)" 
},
"empirical_var_to_smvgc": {
"prefix": "empirical_var_to_smvgc",
"body": "${1:fE = }empirical_var_to_smvgc(${2:A}, ${3:SIG}, ${4:m}, ${5:N}, ${6:x}, ${7:y}, ${8:fres}, ${9:H0}, ${10:nsamps}, ${11:mtrunc}, ${12:decayfac}, ${13:regmode}, ${14:acmaxlags}, ${15:acdectol})$0",
"description": "function fE = empirical_var_to_smvgc(A,SIG,m,N,x,y,fres,H0,nsamps,mtrunc,decayfac,regmode,acmaxlags,acdectol)" 
},
"empirical_var_to_spwcgc": {
"prefix": "empirical_var_to_spwcgc",
"body": "${1:fE = }empirical_var_to_spwcgc(${2:A}, ${3:SIG}, ${4:m}, ${5:N}, ${6:fres}, ${7:H0}, ${8:nsamps}, ${9:mtrunc}, ${10:decayfac}, ${11:regmode}, ${12:acmaxlags}, ${13:acdectol})$0",
"description": "function fE = empirical_var_to_spwcgc(A,SIG,m,N,fres,H0,nsamps,mtrunc,decayfac,regmode,acmaxlags,acdectol)" 
},
"permtest_tsdata_to_mvgc": {
"prefix": "permtest_tsdata_to_mvgc",
"body": "${1:FP = }permtest_tsdata_to_mvgc(${2:U}, ${3:x}, ${4:y}, ${5:p}, ${6:bsize}, ${7:nsamps}, ${8:regmode}, ${9:acmaxlags}, ${10:acdectol})$0",
"description": "function FP = permtest_tsdata_to_mvgc(U,x,y,p,bsize,nsamps,regmode,acmaxlags,acdectol)" 
},
"permtest_tsdata_to_pwcgc": {
"prefix": "permtest_tsdata_to_pwcgc",
"body": "${1:FP = }permtest_tsdata_to_pwcgc(${2:U}, ${3:p}, ${4:bsize}, ${5:nsamps}, ${6:regmode}, ${7:acmaxlags}, ${8:acdectol})$0",
"description": "function FP = permtest_tsdata_to_pwcgc(U,p,bsize,nsamps,regmode,acmaxlags,acdectol)" 
},
"permtest_tsdata_to_smvgc": {
"prefix": "permtest_tsdata_to_smvgc",
"body": "${1:fP = }permtest_tsdata_to_smvgc(${2:U}, ${3:x}, ${4:y}, ${5:p}, ${6:fres}, ${7:bsize}, ${8:nsamps}, ${9:regmode}, ${10:acmaxlags}, ${11:acdectol})$0",
"description": "function fP = permtest_tsdata_to_smvgc(U,x,y,p,fres,bsize,nsamps,regmode,acmaxlags,acdectol)" 
},
"permtest_tsdata_to_spwcgc": {
"prefix": "permtest_tsdata_to_spwcgc",
"body": "${1:fP = }permtest_tsdata_to_spwcgc(${2:U}, ${3:p}, ${4:fres}, ${5:bsize}, ${6:nsamps}, ${7:regmode}, ${8:acmaxlags}, ${9:acdectol})$0",
"description": "function fP = permtest_tsdata_to_spwcgc(U,p,fres,bsize,nsamps,regmode,acmaxlags,acdectol)" 
},
"consistency": {
"prefix": "consistency",
"body": "${1:cons = }consistency(${2:X}, ${3:E})$0",
"description": "function cons = consistency(X,E)" 
},
"demean_V3": {
"prefix": "demean_V3",
"body": "${1:Y = }demean(${2:X}, ${3:normalise})$0",
"description": "function Y = demean(X,normalise)" 
},
"empirical_cdf": {
"prefix": "empirical_cdf",
"body": "${1:P = }empirical_cdf(${2:x}, ${3:X}, ${4:ptails}, ${5:ksmooth})$0",
"description": "function P = empirical_cdf(x,X,ptails,ksmooth)" 
},
"empirical_cdfi": {
"prefix": "empirical_cdfi",
"body": "${1:x = }empirical_cdfi(${2:P}, ${3:X}, ${4:ptails}, ${5:ksmooth})$0",
"description": "function x = empirical_cdfi(P,X,ptails,ksmooth)" 
},
"empirical_confint": {
"prefix": "empirical_confint",
"body": "${1:[xup, xlo] = }empirical_confint(${2:alpha}, ${3:X}, ${4:ptails}, ${5:ksmooth})$0",
"description": "function [xup,xlo] = empirical_confint(alpha,X,ptails,ksmooth)" 
},
"empirical_cval": {
"prefix": "empirical_cval",
"body": "${1:x = }empirical_cval(${2:alpha}, ${3:XNULL}, ${4:ptails}, ${5:ksmooth})$0",
"description": "function x = empirical_cval(alpha,XNULL,ptails,ksmooth)" 
},
"empirical_pval": {
"prefix": "empirical_pval",
"body": "${1:pval = }empirical_pval(${2:x}, ${3:XNULL}, ${4:ptails}, ${5:ksmooth})$0",
"description": "function pval = empirical_pval(x,XNULL,ptails,ksmooth)" 
},
"infocrit_V2": {
"prefix": "infocrit_V2",
"body": "${1:[aic, bic] = }infocrit(${2:L}, ${3:k}, ${4:m})$0",
"description": "function [aic,bic] = infocrit(L,k,m)" 
},
"mvgc_cdf": {
"prefix": "mvgc_cdf",
"body": "${1:P = }mvgc_cdf(${2:x}, ${3:X}, ${4:p}, ${5:m}, ${6:N}, ${7:nx}, ${8:ny}, ${9:nz}, ${10:tstat})$0",
"description": "function P = mvgc_cdf(x,X,p,m,N,nx,ny,nz,tstat)" 
},
"mvgc_cdfi": {
"prefix": "mvgc_cdfi",
"body": "${1:x = }mvgc_cdfi(${2:P}, ${3:X}, ${4:p}, ${5:m}, ${6:N}, ${7:nx}, ${8:ny}, ${9:nz}, ${10:tstat})$0",
"description": "function x = mvgc_cdfi(P,X,p,m,N,nx,ny,nz,tstat)" 
},
"mvgc_confint": {
"prefix": "mvgc_confint",
"body": "${1:[xup, xlo] = }mvgc_confint(${2:alpha}, ${3:x}, ${4:p}, ${5:m}, ${6:N}, ${7:nx}, ${8:ny}, ${9:nz}, ${10:tstat})$0",
"description": "function [xup,xlo] = mvgc_confint(alpha,x,p,m,N,nx,ny,nz,tstat)" 
},
"mvgc_cval": {
"prefix": "mvgc_cval",
"body": "${1:x = }mvgc_cval(${2:alpha}, ${3:p}, ${4:m}, ${5:N}, ${6:nx}, ${7:ny}, ${8:nz}, ${9:tstat})$0",
"description": "function x = mvgc_cval(alpha,p,m,N,nx,ny,nz,tstat)" 
},
"mvgc_pval": {
"prefix": "mvgc_pval",
"body": "${1:pval = }mvgc_pval(${2:x}, ${3:p}, ${4:m}, ${5:N}, ${6:nx}, ${7:ny}, ${8:nz}, ${9:tstat})$0",
"description": "function pval = mvgc_pval(x,p,m,N,nx,ny,nz,tstat)" 
},
"rsquared": {
"prefix": "rsquared",
"body": "${1:[RSQ, RSQADJ] = }rsquared(${2:X}, ${3:E})$0",
"description": "function [RSQ,RSQADJ] = rsquared(X,E)" 
},
"significance": {
"prefix": "significance",
"body": "${1:sig = }significance(${2:pval}, ${3:alpha}, ${4:correction})$0",
"description": "function sig = significance(pval,alpha,correction)" 
},
"whiteness": {
"prefix": "whiteness",
"body": "${1:[dw, pval] = }whiteness(${2:X}, ${3:E})$0",
"description": "function [dw,pval] = whiteness(X,E)" 
},
"bfft": {
"prefix": "bfft",
"body": "${1:AF = }bfft(${2:A}, ${3:q})$0",
"description": "function AF = bfft(A,q)" 
},
"bifft": {
"prefix": "bifft",
"body": "${1:AF = }bifft(${2:A}, ${3:q})$0",
"description": "function AF = bifft(A,q)" 
},
"cov2corr_V3": {
"prefix": "cov2corr_V3",
"body": "${1:R = }cov2corr(${2:G})$0",
"description": "function R = cov2corr(G)" 
},
"dlyap_aitr": {
"prefix": "dlyap_aitr",
"body": "${1:[X, iters] = }dlyap_aitr(${2:A}, ${3:Q}, ${4:maxiters}, ${5:maxrelerr})$0",
"description": "function [X,iters] = dlyap_aitr(A,Q,maxiters,maxrelerr)" 
},
"fexists": {
"prefix": "fexists",
"body": "${1:res = }fexists(${2:fhandle})$0",
"description": "function res = fexists(fhandle)" 
},
"genvar": {
"prefix": "genvar",
"body": "${1:[X, E] = }genvar(${2:A}, ${3:E}, ${4:trunc})$0",
"description": "function [X,E] = genvar(A,E,trunc)" 
},
"get_crand": {
"prefix": "get_crand",
"body": "${1:u = }get_crand$0",
"description": "function u = get_crand" 
},
"get_hostname": {
"prefix": "get_hostname",
"body": "${1:hostname = }get_hostname$0",
"description": "function hostname = get_hostname" 
},
"get_urand": {
"prefix": "get_urand",
"body": "${1:u = }get_urand(${2:n})$0",
"description": "function u = get_urand(n)" 
},
"helpon": {
"prefix": "helpon",
"body": "helpon(${2:mname})$0",
"description": "function helpon(mname)" 
},
"isbad": {
"prefix": "isbad",
"body": "${1:b = }isbad(${2:x}, ${3:demand_allfinite})$0",
"description": "function b = isbad(x,demand_allfinite)" 
},
"isint_V2": {
"prefix": "isint_V2",
"body": "${1:I = }isint(${2:x})$0",
"description": "function I = isint(x)" 
},
"isposdef_V1": {
"prefix": "isposdef_V1",
"body": "${1:pd = }isposdef(${2:A})$0",
"description": "function pd = isposdef(A)" 
},
"maxabs_V2": {
"prefix": "maxabs_V2",
"body": "${1:d = }maxabs(${2:X})$0",
"description": "function d = maxabs(X)" 
},
"mvdetrend": {
"prefix": "mvdetrend",
"body": "${1:[Y, P, p, x] = }mvdetrend(${2:X}, ${3:pdeg}, ${4:x})$0",
"description": "function [Y,P,p,x] = mvdetrend(X,pdeg,x)" 
},
"mvdiff": {
"prefix": "mvdiff",
"body": "${1:Y = }mvdiff(${2:X}, ${3:dff})$0",
"description": "function Y = mvdiff(X,dff)" 
},
"mvgc_makemex": {
"prefix": "mvgc_makemex",
"body": "mvgc_makemex(${2:force_recompile}, ${3:verbose})$0",
"description": "function mvgc_makemex(force_recompile,verbose)" 
},
"plot_autocov": {
"prefix": "plot_autocov",
"body": "plot_autocov(${2:G}, ${3:leg}, ${4:dt}, ${5:trange}, ${6:auto}, ${7:acorr})$0",
"description": "function plot_autocov(G,leg,dt,trange,auto,acorr)" 
},
"plot_confints": {
"prefix": "plot_confints",
"body": "plot_confints(${2:F}, ${3:FUP}, ${4:FLO}, ${5:FCRIT})$0",
"description": "function plot_confints(F,FUP,FLO,FCRIT)" 
},
"plot_cpsd": {
"prefix": "plot_cpsd",
"body": "plot_cpsd(${2:S}, ${3:leg}, ${4:fs}, ${5:frange}, ${6:auto})$0",
"description": "function plot_cpsd(S,leg,fs,frange,auto)" 
},
"plot_pw": {
"prefix": "plot_pw",
"body": "plot_pw(${2:P}, ${3:cm})$0",
"description": "function plot_pw(P,cm)" 
},
"plot_spw": {
"prefix": "plot_spw",
"body": "plot_spw(${2:P}, ${3:fs}, ${4:frange})$0",
"description": "function plot_spw(P,fs,frange)" 
},
"plot_tsdata": {
"prefix": "plot_tsdata",
"body": "plot_tsdata(${2:X}, ${3:leg}, ${4:dt}, ${5:trange})$0",
"description": "function plot_tsdata(X,leg,dt,trange)" 
},
"plot_varcoeffs": {
"prefix": "plot_varcoeffs",
"body": "plot_varcoeffs(${2:A})$0",
"description": "function plot_varcoeffs(A)" 
},
"ptic": {
"prefix": "ptic",
"body": "ptic(${2:s})$0",
"description": "function ptic(s)" 
},
"ptoc": {
"prefix": "ptoc",
"body": "ptoc(${2:s1}, ${3:s2}, ${4:inhms})$0",
"description": "function ptoc(s1,s2,inhms)" 
},
"quads": {
"prefix": "quads",
"body": "${1:q = }quads(${2:x}, ${3:Y})$0",
"description": "function q = quads(x,Y)" 
},
"quadsr": {
"prefix": "quadsr",
"body": "${1:[q, xrsupp] = }quadsr(${2:x}, ${3:y}, ${4:xrange})$0",
"description": "function [q,xrsupp] = quadsr(x,y,xrange)" 
},
"rng_restore": {
"prefix": "rng_restore",
"body": "rng_restore(${2:state})$0",
"description": "function rng_restore(state)" 
},
"rng_save": {
"prefix": "rng_save",
"body": "${1:state = }rng_save$0",
"description": "function state = rng_save" 
},
"rng_seed": {
"prefix": "rng_seed",
"body": "${1:state = }rng_seed(${2:seed})$0",
"description": "function state = rng_seed(seed)" 
},
"secs2hms": {
"prefix": "secs2hms",
"body": "${1:[h, m, s] = }secs2hms(${2:t})$0",
"description": "function [h,m,s] = secs2hms(t)" 
},
"sfreqs": {
"prefix": "sfreqs",
"body": "${1:freqs = }sfreqs(${2:fres}, ${3:fs})$0",
"description": "function freqs = sfreqs(fres,fs)" 
},
"timestr": {
"prefix": "timestr",
"body": "${1:tstr = }timestr(${2:t})$0",
"description": "function tstr = timestr(t)" 
},
"trfun2var": {
"prefix": "trfun2var",
"body": "${1:[A, p] = }trfun2var(${2:H}, ${3:p})$0",
"description": "function [A,p] = trfun2var(H,p)" 
},
"var2trfun": {
"prefix": "var2trfun",
"body": "${1:H = }var2trfun(${2:A}, ${3:fres})$0",
"description": "function H = var2trfun(A,fres)" 
},
"var_decay": {
"prefix": "var_decay",
"body": "${1:A = }var_decay(${2:A}, ${3:dfac})$0",
"description": "function A = var_decay(A,dfac)" 
},
"var_info": {
"prefix": "var_info",
"body": "${1:acerr = }var_info(${2:info}, ${3:abort_on_error})$0",
"description": "function acerr = var_info(info,abort_on_error)" 
},
"var_normalise": {
"prefix": "var_normalise",
"body": "${1:[A, SIG] = }var_normalise(${2:A}, ${3:SIG})$0",
"description": "function [A,SIG] = var_normalise(A,SIG)" 
},
"var_specrad": {
"prefix": "var_specrad",
"body": "${1:[out1, out2] = }var_specrad(${2:A}, ${3:newrho})$0",
"description": "function [out1,out2] = var_specrad(A,newrho)" 
},
"warn_if": {
"prefix": "warn_if",
"body": "${1:wcond = }warn_if(${2:wcond}, ${3:msgstr}, ${4:wfunc})$0",
"description": "function wcond = warn_if(wcond,msgstr,wfunc)" 
},
"warn_supp": {
"prefix": "warn_supp",
"body": "${1:oldstate = }warn_supp(${2:warnid})$0",
"description": "function oldstate = warn_supp(warnid)" 
},
"warn_test": {
"prefix": "warn_test",
"body": "${1:[waswarn, msgstr, warnid] = }warn_test(${2:oldstate}, ${3:umsgstr}, ${4:wfunc}, ${5:rwid})$0",
"description": "function [waswarn,msgstr,warnid] = warn_test(oldstate,umsgstr,wfunc,rwid)" 
},
"dlyap": {
"prefix": "dlyap",
"body": "${1:X = }dlyap(${2:A}, ${3:Q})$0",
"description": "function X = dlyap(A,Q)" 
},
"lyapslv": {
"prefix": "lyapslv",
"body": "${1:X = }lyapslv$0",
"description": "function X = lyapslv(~,A,~,Q)" 
},
"make_legacy": {
"prefix": "make_legacy",
"body": "${1:mdir = }make_legacy(${2:tdir})$0",
"description": "function mdir = make_legacy(tdir)" 
},
"hpfiltercell": {
"prefix": "hpfiltercell",
"body": "${1:[hpCycled, hpTrended, hpDeviation] = }hpfiltercell(${2:cellA}, ${3:lamb})$0",
"description": "function [hpCycled, hpTrended, hpDeviation] = hpfiltercell(cellA, lamb)" 
},
"randi - 副本": {
"prefix": "randi - 副本",
"body": "${1:r = }randi - 副本(${2:imax}, ${3:n})$0",
"description": "function r = randi(imax,n)" 
},
"randiMvgc": {
"prefix": "randiMvgc",
"body": "${1:r = }randiMvgc(${2:imax}, ${3:n})$0",
"description": "function r = randi(imax,n)" 
},
"rng": {
"prefix": "rng",
"body": "${1:state = }rng(${2:s})$0",
"description": "function state = rng(s)" 
},
"chi2cdf_V2": {
"prefix": "chi2cdf_V2",
"body": "${1:P = }chi2cdf(${2:X}, ${3:V})$0",
"description": "function P = chi2cdf(X,V)" 
},
"chi2inv": {
"prefix": "chi2inv",
"body": "${1:X = }chi2inv(${2:P}, ${3:V})$0",
"description": "function X = chi2inv(P,V)" 
},
"gamcdf": {
"prefix": "gamcdf",
"body": "${1:P = }gamcdf(${2:X}, ${3:A}, ${4:B})$0",
"description": "function P = gamcdf(X,A,B)" 
},
"gaminv": {
"prefix": "gaminv",
"body": "${1:X = }gaminv(${2:P}, ${3:A}, ${4:B})$0",
"description": "function X = gaminv(P,A,B)" 
},
"gampdf": {
"prefix": "gampdf",
"body": "${1:Y = }gampdf(${2:X}, ${3:A}, ${4:B})$0",
"description": "function Y = gampdf(X,A,B)" 
},
"ar_constraint": {
"prefix": "ar_constraint",
"body": "${1:[c, ceq] = }ar_constraint(${2:params}, ${3:arma_part})$0",
"description": "function [c,ceq]= ar_constraint(params,arma_part)" 
},
"arfima_covs": {
"prefix": "arfima_covs",
"body": "arfima_covs$0",
"description": "arfima_covs" 
},
"arfima_estimate": {
"prefix": "arfima_estimate",
"body": "${1:model = }arfima_estimate(${2:Z}, ${3:modeltype}, ${4:arma_part})$0",
"description": "function [model] = arfima_estimate(Z,modeltype,arma_part)" 
},
"arfima_exactlik": {
"prefix": "arfima_exactlik",
"body": "arfima_exactlik$0",
"description": "arfima_exactlik" 
},
"arfima_forecast": {
"prefix": "arfima_forecast",
"body": "${1:Z_plus_s = }arfima_forecast(${2:Z}, ${3:s}, ${4:d}, ${5:AR}, ${6:MA}, ${7:mn}, ${8:sigma2})$0",
"description": "function [Z_plus_s] = arfima_forecast(Z,s,d,AR,MA,mn,sigma2)" 
},
"arfima_gof": {
"prefix": "arfima_gof",
"body": "arfima_gof$0",
"description": "arfima_gof" 
},
"arfima_test": {
"prefix": "arfima_test",
"body": "arfima_test$0",
"description": "arfima_test" 
},
"arfima_whittle": {
"prefix": "arfima_whittle",
"body": "arfima_whittle$0",
"description": "arfima_whittle" 
},
"arma_covs": {
"prefix": "arma_covs",
"body": "${1:gamma_arma = }arma_covs(${2:lag}, ${3:params}, ${4:arma_part})$0",
"description": "function [gamma_arma] = arma_covs(lag,params,arma_part)" 
},
"d_filter": {
"prefix": "d_filter",
"body": "d_filter$0",
"description": "d_filter" 
},
"denton_V1": {
"prefix": "denton_V1",
"body": "${1:res = }denton(${2:Y}, ${3:x}, ${4:z}, ${5:ta}, ${6:sc}, ${7:d})$0",
"description": "function res = denton(Y,x,z,ta,sc,d)" 
},
"denton_prop": {
"prefix": "denton_prop",
"body": "${1:res = }denton_prop(${2:Y}, ${3:x}, ${4:z}, ${5:ta}, ${6:sc}, ${7:d})$0",
"description": "function res = denton_prop(Y,x,z,ta,sc,d)" 
},
"denton_prop_d": {
"prefix": "denton_prop_d",
"body": "denton_prop_d$0",
"description": "denton_prop_d" 
},
"denton_uni_V1": {
"prefix": "denton_uni_V1",
"body": "${1:res = }denton_uni(${2:Y}, ${3:x}, ${4:ta}, ${5:d}, ${6:sc})$0",
"description": "function res = denton_uni(Y,x,ta,d,sc)" 
},
"denton_uni_prop_V1": {
"prefix": "denton_uni_prop_V1",
"body": "${1:res = }denton_uni_prop(${2:Y}, ${3:x}, ${4:ta}, ${5:d}, ${6:sc})$0",
"description": "function res = denton_uni_prop(Y,x,ta,d,sc)" 
},
"lop": {
"prefix": "lop",
"body": "lop$0",
"description": "lop" 
},
"BQ_demo": {
"prefix": "BQ_demo",
"body": "BQ_demo$0",
"description": "BQ_demo" 
},
"BQyPotential": {
"prefix": "BQyPotential",
"body": "${1:cellsapotential = }BQyPotential(${2:ycellt}, ${3:nlagVAR}, ${4:nlagVMA})$0",
"description": "function cellsapotential = BQyPotential(ycellt, nlagVAR, nlagVMA)" 
},
"ImpulseOnVARCholeski": {
"prefix": "ImpulseOnVARCholeski",
"body": "${1:X = }ImpulseOnVARCholeski(${2:b}, ${3:xlags0}, ${4:A}, ${5:epsilon})$0",
"description": "function X = ImpulseOnVARCholeski(b, xlags0, A, epsilon)" 
},
"VAR2VMAlrw": {
"prefix": "VAR2VMAlrw",
"body": "${1:[Ceoff, Ceoffnd] = }VAR2VMAlrw(${2:phi}, ${3:threshholdS})$0",
"description": "function [Ceoff, Ceoffnd] = VAR2VMAlrw(phi, threshholdS)" 
},
"VARconst2": {
"prefix": "VARconst2",
"body": "${1:betaHat = }VARconst2(${2:data}, ${3:nlagVAR}, ${4:varargin})$0",
"description": "function [betaHat] = VARconst2(data, nlagVAR,varargin)" 
},
"VMAfromVARconst": {
"prefix": "VMAfromVARconst",
"body": "${1:varepsilon = }VMAfromVARconst(${2:phi}, ${3:threshholdS})$0",
"description": "function varepsilon = VMAfromVARconst(phi, threshholdS)" 
},
"VMAfromVARold": {
"prefix": "VMAfromVARold",
"body": "${1:varepsilon = }VMAfromVARold(${2:phi}, ${3:threshholdS})$0",
"description": "function varepsilon = VMAfromVAR(phi, threshholdS)" 
},
"choleski": {
"prefix": "choleski",
"body": "choleski$0",
"description": "choleski" 
},
"choleski_demo2": {
"prefix": "choleski_demo2",
"body": "choleski_demo2$0",
"description": "choleski_demo2" 
},
"fnBQEQA0": {
"prefix": "fnBQEQA0",
"body": "${1:y = }fnBQEQA0(${2:a0})$0",
"description": "function y = fnBQEQA0(a0)" 
},
"fnBQEQA0snopt": {
"prefix": "fnBQEQA0snopt",
"body": "${1:y = }fnBQEQA0snopt(${2:a0})$0",
"description": "function y = fnBQEQA0snopt(a0)" 
},
"indata": {
"prefix": "indata",
"body": "indata$0",
"description": "indata" 
},
"nleq1": {
"prefix": "nleq1",
"body": "${1:[x, info, wk] = }nleq1(${2:fcn}, ${3:x}, ${4:xscal}, ${5:rtol}, ${6:iopt}, ${7:par}, ${8:wk})$0",
"description": "function [x,info,wk] = nleq1(fcn,x,xscal,rtol,iopt,par,wk)" 
},
"obtainSpectralVAR": {
"prefix": "obtainSpectralVAR",
"body": "${1:fhandle = }obtainSpectralVAR(${2:b}, ${3:varianceMatrix})$0",
"description": "function fhandle = obtainSpectralVAR(b, varianceMatrix)" 
},
"obtainSpectralVAR2": {
"prefix": "obtainSpectralVAR2",
"body": "${1:fhandle = }obtainSpectralVAR2(${2:b}, ${3:varianceMatrix})$0",
"description": "function fhandle = obtainSpectralVAR2(b, varianceMatrix)" 
},
"obtainSpectralVARneg2": {
"prefix": "obtainSpectralVARneg2",
"body": "${1:fhandle = }obtainSpectralVARneg2(${2:b}, ${3:varianceMatrix})$0",
"description": "function fhandle = obtainSpectralVAR2(b, varianceMatrix)" 
},
"obtainSpectralVARwenyi": {
"prefix": "obtainSpectralVARwenyi",
"body": "${1:fhandle = }obtainSpectralVARwenyi(${2:b}, ${3:varianceMatrix})$0",
"description": "function fhandle = obtainSpectralVARwenyi(b, varianceMatrix)" 
},
"obtainSpectralVMA": {
"prefix": "obtainSpectralVMA",
"body": "${1:fhandle = }obtainSpectralVMA(${2:b}, ${3:varianceMatrix})$0",
"description": "function fhandle = obtainSpectralVMA(b, varianceMatrix)" 
},
"obtainSpectralVMAvecinput": {
"prefix": "obtainSpectralVMAvecinput",
"body": "${1:fhandle = }obtainSpectralVMAvecinput(${2:b}, ${3:varianceMatrix})$0",
"description": "function fhandle = obtainSpectralVMAinput(b, varianceMatrix)" 
},
"samplepriodogram_demo": {
"prefix": "samplepriodogram_demo",
"body": "samplepriodogram_demo$0",
"description": "samplepriodogram_demo" 
},
"setupEquationsBQ": {
"prefix": "setupEquationsBQ",
"body": "${1:Equations = }setupEquationsBQ(${2:ExpectationVv}, ${3:M}, ${4:a11}, ${5:a12}, ${6:a13}, ${7:a14}, ${8:a21}, ${9:a22}, ${10:a23}, ${11:a24}, ${12:a31}, ${13:a32}, ${14:a33}, ${15:a34}, ${16:a41}, ${17:a42}, ${18:a43}, ${19:a44})$0",
"description": "function Equations = setupEquationsBQ(ExpectationVv,M,a11, a12, a13,  a14, a21, a22, a23 , a24, a31, a32, a33,  a34,  a41, a42, a43,  a44 )" 
},
"setupEquationsBQ2": {
"prefix": "setupEquationsBQ2",
"body": "${1:Equationshandle = }setupEquationsBQ2(${2:ExpectationVv}, ${3:M})$0",
"description": "function Equationshandle = setupEquationsBQ2(ExpectationVv,M)" 
},
"setupEquationsBQ3": {
"prefix": "setupEquationsBQ3",
"body": "${1:Equations = }setupEquationsBQ3(${2:ExpectationVv}, ${3:Varepsilon}, ${4:A})$0",
"description": "function Equations = setupEquationsBQ3(ExpectationVv, Varepsilon, A )" 
},
"tttt": {
"prefix": "tttt",
"body": "tttt$0",
"description": "tttt" 
},
"var_iris_domo": {
"prefix": "var_iris_domo",
"body": "var_iris_domo$0",
"description": "var_iris_domo" 
},
"BVARdrawpost": {
"prefix": "BVARdrawpost",
"body": "${1:[sigma_draw, beta_draw] = }BVARdrawpost(${2:VAR})$0",
"description": "function [sigma_draw, beta_draw] = BVARdrawpost(VAR)" 
},
"BVARir": {
"prefix": "BVARir",
"body": "${1:IRF = }BVARir(${2:VAR}, ${3:sigma_draw}, ${4:beta_draw}, ${5:nsteps})$0",
"description": "function IRF = BVARir(VAR, sigma_draw, beta_draw, nsteps)" 
},
"BVARir_single": {
"prefix": "BVARir_single",
"body": "${1:IRF = }BVARir_single(${2:VAR}, ${3:sigma_draw}, ${4:beta_draw}, ${5:impulse}, ${6:nsteps})$0",
"description": "function IRF = BVARir_single(VAR, sigma_draw, beta_draw, impulse, nsteps)" 
},
"VARfevd": {
"prefix": "VARfevd",
"body": "${1:[FEVD, FEVD_opt] = }VARfevd(${2:VAR}, ${3:nsteps}, ${4:ident})$0",
"description": "function [FEVD, FEVD_opt] = VARfevd(VAR,nsteps,ident)" 
},
"VARfevdband": {
"prefix": "VARfevdband",
"body": "${1:[INF, SUP, MED] = }VARfevdband(${2:VAR}, ${3:FEVD_opt}, ${4:ndraws}, ${5:pctg}, ${6:method})$0",
"description": "function [INF,SUP,MED] = VARfevdband(VAR,FEVD_opt,ndraws,pctg,method)" 
},
"VARfevdplot": {
"prefix": "VARfevdplot",
"body": "VARfevdplot(${2:FEVD}, ${3:pick}, ${4:labels}, ${5:filename}, ${6:INF}, ${7:SUP}, ${8:FontSize})$0",
"description": "function VARfevdplot(FEVD,pick,labels,filename,INF,SUP,FontSize)" 
},
"VARir": {
"prefix": "VARir",
"body": "${1:IRF IRF_opt = }VARir(${2:VAR}, ${3:nsteps}, ${4:ident}, ${5:impact})$0",
"description": "function [IRF IRF_opt] = VARir(VAR,nsteps,ident,impact)" 
},
"VARirband": {
"prefix": "VARirband",
"body": "${1:[INF, SUP, MED] = }VARirband(${2:VAR}, ${3:IRF_opt}, ${4:ndraws}, ${5:pctg}, ${6:method})$0",
"description": "function [INF,SUP,MED] = VARirband(VAR,IRF_opt,ndraws,pctg,method)" 
},
"VARirplot": {
"prefix": "VARirplot",
"body": "VARirplot(${2:IRF}, ${3:pick}, ${4:labels}, ${5:filename}, ${6:INF}, ${7:SUP}, ${8:FontSize})$0",
"description": "function VARirplot(IRF,pick,labels,filename,INF,SUP, FontSize)" 
},
"VARmakelags": {
"prefix": "VARmakelags",
"body": "${1:X = }VARmakelags(${2:DATA}, ${3:lags})$0",
"description": "function X = VARmakelags(DATA,lags)" 
},
"VARmakexy": {
"prefix": "VARmakexy",
"body": "${1:[Y, X] = }VARmakexy(${2:DATA}, ${3:lags}, ${4:c_case})$0",
"description": "function [Y, X] = VARmakexy(DATA,lags,c_case)" 
},
"VARmodel": {
"prefix": "VARmodel",
"body": "${1:results = }VARmodel(${2:DATA}, ${3:nlag}, ${4:c_case}, ${5:DATA_EX}, ${6:nlag_ex})$0",
"description": "function results = VARmodel(DATA,nlag,c_case,DATA_EX,nlag_ex)" 
},
"VARprint": {
"prefix": "VARprint",
"body": "${1:BETA TSTAT = }VARprint(${2:VAR}, ${3:end_names}, ${4:ex_names})$0",
"description": "function [BETA TSTAT]= VARprint(VAR,end_names,ex_names)" 
},
"isconvergenceMLD": {
"prefix": "isconvergenceMLD",
"body": "${1:indMLD = }isconvergenceMLD(${2:x})$0",
"description": "function indMLD = isconvergenceMLD(x)" 
},
"isconvergenceMeanLogarithmDeviation": {
"prefix": "isconvergenceMeanLogarithmDeviation",
"body": "${1:indMLC = }isconvergenceMeanLogarithmDeviation(${2:x})$0",
"description": "function indMLC = isconvergenceMeanLogarithmDeviation(x)" 
},
"Main_FitDistribution_GUI": {
"prefix": "Main_FitDistribution_GUI",
"body": "${1:varargout = }Main_FitDistribution_GUI(${2:varargin})$0",
"description": "function varargout = Main_FitDistribution_GUI(varargin)" 
},
"CLS": {
"prefix": "CLS",
"body": "${1:result = }CLS(${2:y}, ${3:x})$0",
"description": "function result = CLS(y,x)" 
},
"CLS_d": {
"prefix": "CLS_d",
"body": "CLS_d$0",
"description": "CLS_d" 
},
"ndKron": {
"prefix": "ndKron",
"body": "${1:y = }ndKron(${2:A}, ${3:B})$0",
"description": "function y = ndKron(A, B)" 
},
"lowess": {
"prefix": "lowess",
"body": "${1:dataout lowerLimit upperLimit xy = }lowess(${2:datain}, ${3:f}, ${4:wantplot}, ${5:imagefile}, ${6:xdata})$0",
"description": "function [dataout lowerLimit upperLimit xy] = lowess(datain,f,wantplot,imagefile,xdata)" 
},
"ppdiff": {
"prefix": "ppdiff",
"body": "${1:qq = }ppdiff(${2:pp}, ${3:j})$0",
"description": "function qq = ppdiff(pp,j)" 
},
"ppint": {
"prefix": "ppint",
"body": "${1:output = }ppint(${2:pp}, ${3:a}, ${4:b})$0",
"description": "function output = ppint(pp,a,b)" 
},
"splinefit": {
"prefix": "splinefit",
"body": "${1:pp = }splinefit(${2:varargin})$0",
"description": "function pp = splinefit(varargin)" 
},
"splinefitcell": {
"prefix": "splinefitcell",
"body": "${1:yy yycell = }splinefitcell(${2:xycell}, ${3:breaks}, ${4:xx})$0",
"description": "function [yy yycell] = splinefitcell(xycell,breaks,xx)" 
},
"acf_V5": {
"prefix": "acf_V5",
"body": "${1:results = }acf(${2:x}, ${3:k}, ${4:p})$0",
"description": "function results =  acf(x,k,p)" 
},
"adf": {
"prefix": "adf",
"body": "${1:results = }adf(${2:x}, ${3:p}, ${4:l})$0",
"description": "function results =  adf(x,p,l)" 
},
"adf_d": {
"prefix": "adf_d",
"body": "adf_d$0",
"description": "adf_d" 
},
"c_sja": {
"prefix": "c_sja",
"body": "${1:jc = }c_sja(${2:n}, ${3:p})$0",
"description": "function jc =  c_sja(n,p)" 
},
"c_sjt": {
"prefix": "c_sjt",
"body": "${1:jc = }c_sjt(${2:n}, ${3:p})$0",
"description": "function jc = c_sjt(n,p)" 
},
"cadf": {
"prefix": "cadf",
"body": "${1:results = }cadf(${2:y}, ${3:x}, ${4:p}, ${5:l})$0",
"description": "function results = cadf(y,x,p,l)" 
},
"cadf_d": {
"prefix": "cadf_d",
"body": "cadf_d$0",
"description": "cadf_d" 
},
"crthegy": {
"prefix": "crthegy",
"body": "${1:crit = }crthegy(${2:type}, ${3:det}, ${4:nobs}, ${5:sig})$0",
"description": "function crit = crthegy(type,det,nobs,sig)" 
},
"detrend_V3": {
"prefix": "detrend_V3",
"body": "${1:resid = }detrend(${2:y}, ${3:p})$0",
"description": "function resid = detrend(y,p)" 
},
"hegy": {
"prefix": "hegy",
"body": "${1:results = }hegy(${2:x}, ${3:sig}, ${4:det}, ${5:alag}, ${6:fid})$0",
"description": "function results = hegy(x,sig,det,alag,fid);" 
},
"hegy_d": {
"prefix": "hegy_d",
"body": "hegy_d$0",
"description": "hegy_d" 
},
"johansen": {
"prefix": "johansen",
"body": "${1:result = }johansen(${2:x}, ${3:p}, ${4:k})$0",
"description": "function result = johansen(x,p,k)" 
},
"johansen_d": {
"prefix": "johansen_d",
"body": "johansen_d$0",
"description": "johansen_d" 
},
"phillips": {
"prefix": "phillips",
"body": "${1:result = }phillips(${2:y}, ${3:x}, ${4:flag})$0",
"description": "function result = phillips(y,x,flag)" 
},
"phillips_d": {
"prefix": "phillips_d",
"body": "phillips_d$0",
"description": "phillips_d" 
},
"prt_coint": {
"prefix": "prt_coint",
"body": "prt_coint(${2:result}, ${3:vnames}, ${4:fid})$0",
"description": "function prt_coint(result,vnames,fid)" 
},
"ptrend": {
"prefix": "ptrend",
"body": "${1:xmat = }ptrend(${2:p}, ${3:nobs})$0",
"description": "function xmat = ptrend(p,nobs)" 
},
"rztcrit": {
"prefix": "rztcrit",
"body": "${1:crit = }rztcrit(${2:nobs}, ${3:k}, ${4:p})$0",
"description": "function crit = rztcrit(nobs,k,p)" 
},
"ztcrit": {
"prefix": "ztcrit",
"body": "${1:crit = }ztcrit(${2:nobs}, ${3:p})$0",
"description": "function crit = ztcrit(nobs,p)" 
},
"arch": {
"prefix": "arch",
"body": "${1:[archstat, pval] = }arch(${2:x}, ${3:p})$0",
"description": "function [archstat,pval] = arch(x,p)" 
},
"arch_d": {
"prefix": "arch_d",
"body": "arch_d$0",
"description": "arch_d" 
},
"bkw_V2": {
"prefix": "bkw_V2",
"body": "bkw(${2:x}, ${3:vnames}, ${4:fmt})$0",
"description": "function bkw(x,vnames,fmt)" 
},
"bkw_d": {
"prefix": "bkw_d",
"body": "bkw_d$0",
"description": "bkw_d" 
},
"bpagan": {
"prefix": "bpagan",
"body": "${1:result = }bpagan(${2:y}, ${3:x})$0",
"description": "function result = bpagan(y,x)" 
},
"bpagan_d": {
"prefix": "bpagan_d",
"body": "bpagan_d$0",
"description": "bpagan_d" 
},
"cusums": {
"prefix": "cusums",
"body": "${1:result = }cusums(${2:y}, ${3:x})$0",
"description": "function result = cusums(y,x)" 
},
"cusums_d": {
"prefix": "cusums_d",
"body": "cusums_d$0",
"description": "cusums_d" 
},
"dfbeta": {
"prefix": "dfbeta",
"body": "${1:results = }dfbeta(${2:y}, ${3:x})$0",
"description": "function results=dfbeta(y,x)" 
},
"dfbeta_d": {
"prefix": "dfbeta_d",
"body": "dfbeta_d$0",
"description": "dfbeta_d" 
},
"plt_cus": {
"prefix": "plt_cus",
"body": "plt_cus(${2:results})$0",
"description": "function plt_cus(results)" 
},
"plt_dfb": {
"prefix": "plt_dfb",
"body": "plt_dfb(${2:results}, ${3:vnames})$0",
"description": "function plt_dfb(results,vnames)" 
},
"plt_dff": {
"prefix": "plt_dff",
"body": "plt_dff(${2:results})$0",
"description": "function plt_dff(results)" 
},
"qstat2": {
"prefix": "qstat2",
"body": "${1:[qstat, pval] = }qstat2(${2:x}, ${3:p})$0",
"description": "function [qstat,pval] = qstat2(x,p)" 
},
"qstat2_d": {
"prefix": "qstat2_d",
"body": "qstat2_d$0",
"description": "qstat2_d" 
},
"rdiag": {
"prefix": "rdiag",
"body": "rdiag(${2:y}, ${3:x})$0",
"description": "function rdiag(y,x)" 
},
"rdiag_d": {
"prefix": "rdiag_d",
"body": "rdiag_d$0",
"description": "rdiag_d" 
},
"rdiagnoise_d": {
"prefix": "rdiagnoise_d",
"body": "rdiagnoise_d$0",
"description": "rdiagnoise_d" 
},
"rdiagnose": {
"prefix": "rdiagnose",
"body": "${1:result = }rdiagnose(${2:y}, ${3:x}, ${4:prt})$0",
"description": "function result = rdiagnose(y,x,prt)" 
},
"recresid": {
"prefix": "recresid",
"body": "${1:rresid = }recresid(${2:y}, ${3:x})$0",
"description": "function rresid = recresid(y,x)" 
},
"recresid_d": {
"prefix": "recresid_d",
"body": "recresid_d$0",
"description": "recresid_d" 
},
"studentize": {
"prefix": "studentize",
"body": "${1:t = }studentize(${2:x})$0",
"description": "function t = studentize(x)" 
},
"unstudentize": {
"prefix": "unstudentize",
"body": "${1:t = }unstudentize(${2:xin}, ${3:xraw})$0",
"description": "function t = unstudentize(xin,xraw)" 
},
"unstudentize_d": {
"prefix": "unstudentize_d",
"body": "unstudentize_d$0",
"description": "unstudentize_d" 
},
"beta_d": {
"prefix": "beta_d",
"body": "beta_d$0",
"description": "beta_d" 
},
"beta_rnd": {
"prefix": "beta_rnd",
"body": "${1:rnd = }beta_rnd(${2:n}, ${3:a}, ${4:b})$0",
"description": "function rnd = beta_rnd (n, a, b)" 
},
"bincoef": {
"prefix": "bincoef",
"body": "${1:k = }bincoef(${2:n}, ${3:N})$0",
"description": "function k = bincoef(n,N)" 
},
"bingen": {
"prefix": "bingen",
"body": "${1:s = }bingen(${2:p0}, ${3:p1}, ${4:m})$0",
"description": "function s = bingen(p0,p1,m)" 
},
"bino_cdf": {
"prefix": "bino_cdf",
"body": "${1:cdf = }bino_cdf(${2:x}, ${3:n}, ${4:p})$0",
"description": "function cdf = bino_cdf (x, n, p)" 
},
"bino_d": {
"prefix": "bino_d",
"body": "bino_d$0",
"description": "bino_d" 
},
"bino_pdf": {
"prefix": "bino_pdf",
"body": "${1:pdf = }bino_pdf(${2:k}, ${3:n}, ${4:p})$0",
"description": "function  pdf = bino_pdf(k,n,p)" 
},
"bino_rnd": {
"prefix": "bino_rnd",
"body": "${1:rnd = }bino_rnd(${2:n}, ${3:p}, ${4:r}, ${5:c})$0",
"description": "function rnd = bino_rnd (n, p, r, c)" 
},
"chis_cdf": {
"prefix": "chis_cdf",
"body": "${1:F = }chis_cdf(${2:x}, ${3:a})$0",
"description": "function F = chis_cdf (x, a)" 
},
"chis_d": {
"prefix": "chis_d",
"body": "chis_d$0",
"description": "chis_d" 
},
"chis_inv": {
"prefix": "chis_inv",
"body": "${1:x = }chis_inv(${2:p}, ${3:a})$0",
"description": "function x = chis_inv (p, a)" 
},
"chis_pdf": {
"prefix": "chis_pdf",
"body": "${1:f = }chis_pdf(${2:x}, ${3:a})$0",
"description": "function f = chis_pdf (x, a)" 
},
"chis_prb": {
"prefix": "chis_prb",
"body": "${1:prob = }chis_prb(${2:x}, ${3:v})$0",
"description": "function prob = chis_prb(x,v)" 
},
"chis_rnd": {
"prefix": "chis_rnd",
"body": "${1:rn = }chis_rnd(${2:nn}, ${3:v})$0",
"description": "function rn=chis_rnd(nn,v)" 
},
"com_size": {
"prefix": "com_size",
"body": "${1:[ret, x, aout, bout] = }com_size(${2:x}, ${3:a}, ${4:b})$0",
"description": "function [ret, x, aout, bout] = com_size(x,a,b)" 
},
"demo_distr": {
"prefix": "demo_distr",
"body": "demo_distr$0",
"description": "demo_distr" 
},
"fdis_d": {
"prefix": "fdis_d",
"body": "fdis_d$0",
"description": "fdis_d" 
},
"fdis_inv": {
"prefix": "fdis_inv",
"body": "${1:finv = }fdis_inv(${2:p}, ${3:a}, ${4:b})$0",
"description": "function finv = fdis_inv(p,a,b)" 
},
"fdis_pdf": {
"prefix": "fdis_pdf",
"body": "${1:pdf = }fdis_pdf(${2:x}, ${3:a}, ${4:b})$0",
"description": "function pdf = fdis_pdf(x,a,b)" 
},
"fdis_prb": {
"prefix": "fdis_prb",
"body": "${1:y = }fdis_prb(${2:x}, ${3:m}, ${4:n})$0",
"description": "function y = fdis_prb( x, m, n)" 
},
"fdis_rnd": {
"prefix": "fdis_rnd",
"body": "${1:x = }fdis_rnd(${2:n}, ${3:a}, ${4:b})$0",
"description": "function x = fdis_rnd(n,a,b)" 
},
"gamm_cdf": {
"prefix": "gamm_cdf",
"body": "${1:cdf = }gamm_cdf(${2:x}, ${3:a})$0",
"description": "function cdf = gamm_cdf (x, a)" 
},
"gamm_d": {
"prefix": "gamm_d",
"body": "gamm_d$0",
"description": "gamm_d" 
},
"gamm_inv": {
"prefix": "gamm_inv",
"body": "${1:x = }gamm_inv(${2:p}, ${3:a})$0",
"description": "function x = gamm_inv(p,a)" 
},
"gamm_pdf": {
"prefix": "gamm_pdf",
"body": "${1:f = }gamm_pdf(${2:x}, ${3:a})$0",
"description": "function f = gamm_pdf (x, a)" 
},
"gamm_rnd": {
"prefix": "gamm_rnd",
"body": "${1:x = }gamm_rnd(${2:n}, ${3:a})$0",
"description": "function x = gamm_rnd(n,a)" 
},
"hypg_cdf": {
"prefix": "hypg_cdf",
"body": "${1:p = }hypg_cdf(${2:k}, ${3:n}, ${4:K}, ${5:N})$0",
"description": "function  p = hypg_cdf(k,n,K,N)" 
},
"hypg_d": {
"prefix": "hypg_d",
"body": "hypg_d$0",
"description": "hypg_d" 
},
"hypg_inv": {
"prefix": "hypg_inv",
"body": "${1:k = }hypg_inv(${2:p}, ${3:n}, ${4:K}, ${5:N})$0",
"description": "function  k = hypg_inv(p,n,K,N)" 
},
"hypg_pdf": {
"prefix": "hypg_pdf",
"body": "${1:p = }hypg_pdf(${2:k}, ${3:n}, ${4:K}, ${5:N})$0",
"description": "function  p = hypg_pdf(k,n,K,N)" 
},
"hypg_rnd": {
"prefix": "hypg_rnd",
"body": "${1:x = }hypg_rnd(${2:num}, ${3:n}, ${4:K}, ${5:N})$0",
"description": "function  x = hypg_rnd(num,n,K,N)" 
},
"is_scalar": {
"prefix": "is_scalar",
"body": "${1:ret = }is_scalar(${2:x})$0",
"description": "function ret = is_scalar(x)" 
},
"logn_cdf": {
"prefix": "logn_cdf",
"body": "${1:cdf = }logn_cdf(${2:x}, ${3:a}, ${4:v})$0",
"description": "function cdf = logn_cdf (x, a, v)" 
},
"logn_d": {
"prefix": "logn_d",
"body": "logn_d$0",
"description": "logn_d" 
},
"logn_inv": {
"prefix": "logn_inv",
"body": "${1:linv = }logn_inv(${2:x}, ${3:a}, ${4:v})$0",
"description": "function linv = logn_inv (x, a, v)" 
},
"logn_pdf": {
"prefix": "logn_pdf",
"body": "${1:pdf = }logn_pdf(${2:x}, ${3:a}, ${4:v})$0",
"description": "function pdf = logn_pdf (x, a, v)" 
},
"logn_rnd": {
"prefix": "logn_rnd",
"body": "${1:r = }logn_rnd(${2:mu}, ${3:sigma}, ${4:m}, ${5:n})$0",
"description": "function r = logn_rnd(mu,sigma,m,n);" 
},
"logt_cdf": {
"prefix": "logt_cdf",
"body": "${1:cdf = }logt_cdf(${2:x})$0",
"description": "function cdf = logt_cdf (x)" 
},
"logt_d": {
"prefix": "logt_d",
"body": "logt_d$0",
"description": "logt_d" 
},
"logt_inv": {
"prefix": "logt_inv",
"body": "${1:inv = }logt_inv(${2:x})$0",
"description": "function inv = logt_inv (x)" 
},
"logt_pdf": {
"prefix": "logt_pdf",
"body": "${1:pdf = }logt_pdf(${2:x})$0",
"description": "function pdf = logt_pdf (x)" 
},
"logt_rnd": {
"prefix": "logt_rnd",
"body": "${1:rnd = }logt_rnd(${2:r}, ${3:c})$0",
"description": "function rnd = logt_rnd (r, c)" 
},
"norm_cdf": {
"prefix": "norm_cdf",
"body": "${1:cdf = }norm_cdf(${2:x}, ${3:m}, ${4:v})$0",
"description": "function cdf = norm_cdf (x, m, v)" 
},
"norm_crnd": {
"prefix": "norm_crnd",
"body": "${1:y = }norm_crnd(${2:n}, ${3:epsilon}, ${4:sigma})$0",
"description": "function y = norm_crnd(n,epsilon,sigma)" 
},
"norm_inv": {
"prefix": "norm_inv",
"body": "${1:invp = }norm_inv(${2:x}, ${3:m}, ${4:v})$0",
"description": "function invp = norm_inv(x, m, v)" 
},
"norm_pdf": {
"prefix": "norm_pdf",
"body": "${1:pdf = }norm_pdf(${2:x}, ${3:m}, ${4:v})$0",
"description": "function pdf = norm_pdf (x, m, v)" 
},
"norm_prb": {
"prefix": "norm_prb",
"body": "${1:p = }norm_prb(${2:tratio})$0",
"description": "function p=norm_prb(tratio)" 
},
"norm_prbd": {
"prefix": "norm_prbd",
"body": "norm_prbd$0",
"description": "norm_prbd" 
},
"norm_rnd": {
"prefix": "norm_rnd",
"body": "${1:y = }norm_rnd(${2:sig})$0",
"description": "function y = norm_rnd(sig);" 
},
"normc_d": {
"prefix": "normc_d",
"body": "normc_d$0",
"description": "normc_d" 
},
"normlt_d": {
"prefix": "normlt_d",
"body": "normlt_d$0",
"description": "normlt_d" 
},
"normlt_inv": {
"prefix": "normlt_inv",
"body": "${1:result = }normlt_inv(${2:p}, ${3:mu}, ${4:sigma2}, ${5:left})$0",
"description": "function result = normlt_inv(p,mu,sigma2,left)" 
},
"normlt_rnd": {
"prefix": "normlt_rnd",
"body": "${1:result = }normlt_rnd(${2:mu}, ${3:sigma2}, ${4:left})$0",
"description": "function result = normlt_rnd(mu,sigma2,left)" 
},
"normrt_d": {
"prefix": "normrt_d",
"body": "normrt_d$0",
"description": "normrt_d" 
},
"normrt_inv": {
"prefix": "normrt_inv",
"body": "${1:result = }normrt_inv(${2:p}, ${3:mu}, ${4:sigma2}, ${5:right})$0",
"description": "function result = normrt_inv(p,mu,sigma2,right)" 
},
"normrt_rnd": {
"prefix": "normrt_rnd",
"body": "${1:result = }normrt_rnd(${2:mu}, ${3:sigma2}, ${4:right})$0",
"description": "function result = normrt_rnd(mu,sigma2,right)" 
},
"normt_d": {
"prefix": "normt_d",
"body": "normt_d$0",
"description": "normt_d" 
},
"normt_inv": {
"prefix": "normt_inv",
"body": "${1:result = }normt_inv(${2:p}, ${3:mu}, ${4:sigma2}, ${5:left}, ${6:right})$0",
"description": "function result = normt_inv(p,mu,sigma2,left,right)" 
},
"normt_rnd": {
"prefix": "normt_rnd",
"body": "${1:result = }normt_rnd(${2:mu}, ${3:sigma2}, ${4:left}, ${5:right})$0",
"description": "function result = normt_rnd(mu,sigma2,left,right)" 
},
"pois_cdf": {
"prefix": "pois_cdf",
"body": "${1:f = }pois_cdf(${2:x}, ${3:lambda})$0",
"description": "function f = pois_cdf(x,lambda)" 
},
"pois_d": {
"prefix": "pois_d",
"body": "pois_d$0",
"description": "pois_d" 
},
"pois_inv": {
"prefix": "pois_inv",
"body": "${1:pinv = }pois_inv(${2:x}, ${3:l})$0",
"description": "function pinv = pois_inv(x,l)" 
},
"pois_pdf": {
"prefix": "pois_pdf",
"body": "${1:pdf = }pois_pdf(${2:x}, ${3:l})$0",
"description": "function pdf = pois_pdf(x,l)" 
},
"pois_rnd": {
"prefix": "pois_rnd",
"body": "${1:y = }pois_rnd(${2:n}, ${3:lambda})$0",
"description": "function y = pois_rnd(n,lambda)" 
},
"quantile_V2": {
"prefix": "quantile_V2",
"body": "${1:q = }quantile(${2:x}, ${3:p}, ${4:method})$0",
"description": "function  q = quantile(x,p,method)" 
},
"stdn_cdf": {
"prefix": "stdn_cdf",
"body": "${1:cdf = }stdn_cdf(${2:x})$0",
"description": "function cdf = stdn_cdf(x)" 
},
"stdn_d": {
"prefix": "stdn_d",
"body": "stdn_d$0",
"description": "stdn_d" 
},
"stdn_inv": {
"prefix": "stdn_inv",
"body": "${1:ninv = }stdn_inv(${2:x})$0",
"description": "function ninv = stdn_inv (x)" 
},
"stdn_pdf": {
"prefix": "stdn_pdf",
"body": "${1:pdf = }stdn_pdf(${2:x})$0",
"description": "function pdf = stdn_pdf(x)" 
},
"tdis_cdf": {
"prefix": "tdis_cdf",
"body": "${1:F = }tdis_cdf(${2:x}, ${3:n})$0",
"description": "function F = tdis_cdf (x, n)" 
},
"tdis_d": {
"prefix": "tdis_d",
"body": "tdis_d$0",
"description": "tdis_d" 
},
"tdis_pdf": {
"prefix": "tdis_pdf",
"body": "${1:pdf = }tdis_pdf(${2:x}, ${3:n})$0",
"description": "function pdf = tdis_pdf(x, n)" 
},
"tdis_rnd": {
"prefix": "tdis_rnd",
"body": "${1:t = }tdis_rnd(${2:n}, ${3:df})$0",
"description": "function t = tdis_rnd (n,df)" 
},
"timing_tst": {
"prefix": "timing_tst",
"body": "timing_tst$0",
"description": "timing_tst" 
},
"trunc_d": {
"prefix": "trunc_d",
"body": "trunc_d$0",
"description": "trunc_d" 
},
"unif_d": {
"prefix": "unif_d",
"body": "unif_d$0",
"description": "unif_d" 
},
"unif_rnd": {
"prefix": "unif_rnd",
"body": "${1:rnd = }unif_rnd(${2:n}, ${3:a}, ${4:b})$0",
"description": "function rnd = unif_rnd (n,a,b)" 
},
"wish_d": {
"prefix": "wish_d",
"body": "wish_d$0",
"description": "wish_d" 
},
"wish_rnd": {
"prefix": "wish_rnd",
"body": "${1:w = }wish_rnd(${2:sigma}, ${3:v})$0",
"description": "function w = wish_rnd(sigma,v)" 
},
"INVGEN": {
"prefix": "INVGEN",
"body": "${1:quant = }INVGEN(${2:Fchapeau}, ${3:alpha})$0",
"description": "function quant=invgen(Fchapeau,alpha)" 
},
"Ilocal": {
"prefix": "Ilocal",
"body": "${1:ind = }Ilocal(${2:variable}, ${3:W})$0",
"description": "function [ind]=Ilocal(variable,W)" 
},
"Mds": {
"prefix": "Mds",
"body": "${1:[crd, stress, mapdist] = }Mds(${2:dist}, ${3:labels}, ${4:p}, ${5:restarts}, ${6:normflag}, ${7:noplot})$0",
"description": "function [crd,stress,mapdist] = mds(dist,labels,p,restarts,normflag,noplot)" 
},
"angleplotmap": {
"prefix": "angleplotmap",
"body": "${1:out = }angleplotmap(${2:long}, ${3:lat}, ${4:variable}, ${5:opt}, ${6:varargin})$0",
"description": "function [out]=angleplotmap(long,lat,variable,opt,varargin)" 
},
"angleplotmap_d": {
"prefix": "angleplotmap_d",
"body": "angleplotmap_d$0",
"description": "angleplotmap_d" 
},
"barmap": {
"prefix": "barmap",
"body": "${1:out = }barmap(${2:long}, ${3:lat}, ${4:variable}, ${5:varargin})$0",
"description": "function [out]=barmap(long,lat,variable,varargin)" 
},
"barmap_d": {
"prefix": "barmap_d",
"body": "barmap_d$0",
"description": "barmap_d" 
},
"boxplotmap": {
"prefix": "boxplotmap",
"body": "${1:out = }boxplotmap(${2:long}, ${3:lat}, ${4:variable}, ${5:varargin})$0",
"description": "function [out]=boxplotmap(long,lat,variable,varargin)" 
},
"boxplotmap_d": {
"prefix": "boxplotmap_d",
"body": "boxplotmap_d$0",
"description": "boxplotmap_d" 
},
"clustermap": {
"prefix": "clustermap",
"body": "${1:[out, out2] = }clustermap(${2:long}, ${3:lat}, ${4:dataset}, ${5:clustnum}, ${6:method}, ${7:varargin})$0",
"description": "function [out,out2]=clustermap(long,lat,dataset,clustnum,method,varargin)" 
},
"clustermap_d": {
"prefix": "clustermap_d",
"body": "clustermap_d$0",
"description": "clustermap_d" 
},
"condmean": {
"prefix": "condmean",
"body": "${1:mycond = }condmean(${2:y}, ${3:ytri}, ${4:bi}, ${5:bs})$0",
"description": "function mycond = condmean(y, ytri, bi, bs)" 
},
"contig": {
"prefix": "contig",
"body": "${1:W = }contig(${2:x}, ${3:y}, ${4:distance})$0",
"description": "function W=contig(x,y,distance)" 
},
"csppeda": {
"prefix": "csppeda",
"body": "${1:[as, bs, ppm] = }csppeda(${2:Z}, ${3:c}, ${4:half}, ${5:m})$0",
"description": "function [as,bs,ppm]=csppeda(Z,c,half,m)" 
},
"csppind": {
"prefix": "csppind",
"body": "${1:ppi = }csppind(${2:x}, ${3:a}, ${4:b}, ${5:n}, ${6:ck})$0",
"description": "function ppi = csppind(x,a,b,n,ck)" 
},
"csppstrtrem": {
"prefix": "csppstrtrem",
"body": "${1:X = }csppstrtrem(${2:Z}, ${3:a}, ${4:b})$0",
"description": "function X = csppstrtrem(Z,a,b)" 
},
"cvarpds": {
"prefix": "cvarpds",
"body": "${1:covar = }cvarpds(${2:y}, ${3:pds})$0",
"description": "function covar = cvarpds(y,pds)" 
},
"dblebarmap": {
"prefix": "dblebarmap",
"body": "${1:out = }dblebarmap(${2:long}, ${3:lat}, ${4:var1}, ${5:var2}, ${6:varargin})$0",
"description": "function [out]=dblebarmap(long,lat,var1,var2,varargin)" 
},
"dblebarmap_d": {
"prefix": "dblebarmap_d",
"body": "dblebarmap_d$0",
"description": "dblebarmap_d" 
},
"dbledensitymap": {
"prefix": "dbledensitymap",
"body": "${1:out = }dbledensitymap(${2:long}, ${3:lat}, ${4:var1}, ${5:var2}, ${6:a1}, ${7:a2}, ${8:varargin})$0",
"description": "function [out]=dbledensitymap(long,lat,var1,var2,a1,a2,varargin)" 
},
"dbledensitymap_d": {
"prefix": "dbledensitymap_d",
"body": "dbledensitymap_d$0",
"description": "dbledensitymap_d" 
},
"dblehistomap": {
"prefix": "dblehistomap",
"body": "${1:out = }dblehistomap(${2:long}, ${3:lat}, ${4:var1}, ${5:var2}, ${6:varargin})$0",
"description": "function [out]=dblehistomap(long,lat,var1,var2,varargin)" 
},
"densitymap": {
"prefix": "densitymap",
"body": "${1:out = }densitymap(${2:lat}, ${3:long}, ${4:variable}, ${5:alpha}, ${6:varargin})$0",
"description": "function [out]=densitymap(lat,long,variable,alpha,varargin)" 
},
"densitymap_d": {
"prefix": "densitymap_d",
"body": "densitymap_d$0",
"description": "densitymap_d" 
},
"driftmap": {
"prefix": "driftmap",
"body": "driftmap(${2:long}, ${3:lat}, ${4:variable}, ${5:nl}, ${6:nc}, ${7:interpol}, ${8:varargin})$0",
"description": "function driftmap(long,lat,variable,nl,nc,interpol,varargin)" 
},
"driftmap_d": {
"prefix": "driftmap_d",
"body": "driftmap_d$0",
"description": "driftmap_d" 
},
"eigen": {
"prefix": "eigen",
"body": "${1:[evects, evals] = }eigen(${2:A})$0",
"description": "function [evects,evals] = eigen(A)" 
},
"eucl": {
"prefix": "eucl",
"body": "${1:dists = }eucl(${2:crds1}, ${3:crds2})$0",
"description": "function dists = eucl(crds1,crds2)" 
},
"fastbinsmooth": {
"prefix": "fastbinsmooth",
"body": "${1:output = }fastbinsmooth(${2:data}, ${3:h}, ${4:range}, ${5:nxgrid}, ${6:iker}, ${7:kpar}, ${8:imethod}, ${9:endct})$0",
"description": "function output = fastbinsmooth(data,h,range,nxgrid,iker,kpar,imethod,endct)" 
},
"genpca": {
"prefix": "genpca",
"body": "${1:[inertia, casecoord, varcoord] = }genpca(${2:data}, ${3:varargin})$0",
"description": "function [inertia,casecoord,varcoord]=genpca(data,varargin)" 
},
"gini": {
"prefix": "gini",
"body": "${1:[f, F, g, G, GINI] = }gini(${2:variable})$0",
"description": "function [f,F,g,G,GINI]=gini(variable)" 
},
"ginimap": {
"prefix": "ginimap",
"body": "${1:out = }ginimap(${2:long}, ${3:lat}, ${4:variable}, ${5:varargin})$0",
"description": "function [out]=ginimap(long,lat,variable,varargin)" 
},
"ginimap_d": {
"prefix": "ginimap_d",
"body": "ginimap_d$0",
"description": "ginimap_d" 
},
"histobarmap": {
"prefix": "histobarmap",
"body": "${1:out = }histobarmap(${2:long}, ${3:lat}, ${4:var1}, ${5:var2}, ${6:varargin})$0",
"description": "function [out]=histobarmap(long,lat,var1,var2,varargin)" 
},
"histobarmap_d": {
"prefix": "histobarmap_d",
"body": "histobarmap_d$0",
"description": "histobarmap_d" 
},
"histomap": {
"prefix": "histomap",
"body": "${1:out = }histomap(${2:long}, ${3:lat}, ${4:variable}, ${5:varargin})$0",
"description": "function [out]=histomap(long,lat,variable,varargin)" 
},
"initkm2": {
"prefix": "initkm2",
"body": "${1:center_index = }initkm2(${2:distmat}, ${3:cluster_n}, ${4:method})$0",
"description": "function center_index = initkm2(distmat, cluster_n, method)" 
},
"kern_den": {
"prefix": "kern_den",
"body": "${1:s = }kern_den(${2:ech}, ${3:band}, ${4:eval})$0",
"description": "function s=kern_den(ech,band,eval)" 
},
"kern_re": {
"prefix": "kern_re",
"body": "${1:r = }kern_re(${2:ech_abs}, ${3:ech_ord}, ${4:band}, ${5:eval})$0",
"description": "function r = kern_re(ech_abs,ech_ord,band,eval)" 
},
"kmeans": {
"prefix": "kmeans",
"body": "${1:[center, U, distortion] = }kmeans(${2:dataSet}, ${3:clusterNum}, ${4:plotOpt})$0",
"description": "function [center, U, distortion] = kmeans(dataSet, clusterNum, plotOpt)" 
},
"kmeans2": {
"prefix": "kmeans2",
"body": "${1:[center_index, U, obj_fcn] = }kmeans2(${2:distmat}, ${3:cluster_n}, ${4:options})$0",
"description": "function [center_index, U, obj_fcn] = kmeans2(distmat, cluster_n, options)" 
},
"mdsfunc": {
"prefix": "mdsfunc",
"body": "${1:stress = }mdsfunc(${2:crd}, ${3:target_dist}, ${4:no_norm})$0",
"description": "function stress = mdsfunc(crd,target_dist,no_norm)" 
},
"mdsmap": {
"prefix": "mdsmap",
"body": "${1:out = }mdsmap(${2:long}, ${3:lat}, ${4:dataset}, ${5:varargin})$0",
"description": "function [out]=mdsmap(long,lat,dataset,varargin)" 
},
"metricclusters": {
"prefix": "metricclusters",
"body": "${1:out = }metricclusters(${2:data}, ${3:beta})$0",
"description": "function [out]=metricclusters(data,beta)" 
},
"metricoutliers": {
"prefix": "metricoutliers",
"body": "${1:out = }metricoutliers(${2:data}, ${3:beta})$0",
"description": "function [out]=metricoutliers(data,beta)" 
},
"moranplotmap": {
"prefix": "moranplotmap",
"body": "${1:[out1, out2] = }moranplotmap(${2:long}, ${3:lat}, ${4:variable}, ${5:mat}, ${6:flower}, ${7:varargin})$0",
"description": "function [out1,out2]=moranplotmap(long,lat,variable,mat,flower,varargin)" 
},
"moranplotmap_d": {
"prefix": "moranplotmap_d",
"body": "moranplotmap_d$0",
"description": "moranplotmap_d" 
},
"neighbormap": {
"prefix": "neighbormap",
"body": "${1:out = }neighbormap(${2:long}, ${3:lat}, ${4:variable}, ${5:W}, ${6:varargin})$0",
"description": "function [out]=neighbormap(long,lat,variable,W,varargin)" 
},
"neighbormap_d": {
"prefix": "neighbormap_d",
"body": "neighbormap_d$0",
"description": "neighbormap_d" 
},
"nonormMORAN": {
"prefix": "nonormMORAN",
"body": "${1:result = }nonormMORAN(${2:y}, ${3:x}, ${4:W})$0",
"description": "function result = nonormmoran(y,x,W);" 
},
"noy": {
"prefix": "noy",
"body": "${1:y = }noy(${2:x})$0",
"description": "function y = noy(x)" 
},
"numbcla": {
"prefix": "numbcla",
"body": "${1:[bclas1, bclas2] = }numbcla(${2:nobs}, ${3:nbcla})$0",
"description": "function [bclas1, bclas2] = numbcla(nobs,nbcla)" 
},
"pcamap": {
"prefix": "pcamap",
"body": "${1:[out, inertia, casecoord, varcoord] = }pcamap(${2:long}, ${3:lat}, ${4:data}, ${5:varargin})$0",
"description": "function [out,inertia,casecoord,varcoord]=pcamap(long,lat,data,varargin)" 
},
"pcoa": {
"prefix": "pcoa",
"body": "${1:[evects, evals] = }pcoa(${2:dist})$0",
"description": "function [evects,evals] = pcoa(dist)" 
},
"polyboxplotmap": {
"prefix": "polyboxplotmap",
"body": "${1:out = }polyboxplotmap(${2:long}, ${3:lat}, ${4:var1}, ${5:var2}, ${6:varargin})$0",
"description": "function [out]=polyboxplotmap(long,lat,var1,var2,varargin)" 
},
"polyboxplotmap_d": {
"prefix": "polyboxplotmap_d",
"body": "polyboxplotmap_d$0",
"description": "polyboxplotmap_d" 
},
"pprmap": {
"prefix": "pprmap",
"body": "${1:out = }pprmap(${2:long}, ${3:lat}, ${4:data}, ${5:varargin})$0",
"description": "function [out]=pprmap(long,lat,data,varargin)" 
},
"quant": {
"prefix": "quant",
"body": "${1:res = }quant(${2:var1}, ${3:var2}, ${4:pp}, ${5:alpha})$0",
"description": "function res=quant(var1,var2,pp,alpha)" 
},
"rotation": {
"prefix": "rotation",
"body": "${1:nellecoord = }rotation(${2:coord}, ${3:angle})$0",
"description": "function nellecoord=rotation(coord,angle)" 
},
"sarmap": {
"prefix": "sarmap",
"body": "${1:out = }sarmap(${2:long}, ${3:lat}, ${4:xinp}, ${5:yinp}, ${6:W}, ${7:varargin})$0",
"description": "function [out]=sarmap2(long,lat,xinp,yinp,W,varargin)" 
},
"sarmap_d": {
"prefix": "sarmap_d",
"body": "sarmap_d$0",
"description": "sarmap_d" 
},
"scatter3dmap": {
"prefix": "scatter3dmap",
"body": "${1:out = }scatter3dmap(${2:long}, ${3:lat}, ${4:var1}, ${5:var2}, ${6:var3}, ${7:varargin})$0",
"description": "function [out]=scatter3dmap(long,lat,var1,var2,var3,varargin)" 
},
"scatter3dmap_d": {
"prefix": "scatter3dmap_d",
"body": "scatter3dmap_d$0",
"description": "scatter3dmap_d" 
},
"scattermap": {
"prefix": "scattermap",
"body": "${1:out = }scattermap(${2:long}, ${3:lat}, ${4:var1}, ${5:var2}, ${6:opt}, ${7:varargin})$0",
"description": "function [out]=scattermap(long,lat,var1,var2,opt,varargin)" 
},
"scattermap_d": {
"prefix": "scattermap_d",
"body": "scattermap_d$0",
"description": "scattermap_d" 
},
"selectmap": {
"prefix": "selectmap",
"body": "${1:[out, vectx, vecty] = }selectmap(${2:lat}, ${3:long}, ${4:obs}, ${5:x}, ${6:y}, ${7:method})$0",
"description": "function [out,vectx,vecty]=selectmap(lat,long,obs,x,y,method)" 
},
"selectmapd": {
"prefix": "selectmapd",
"body": "${1:[out, vectx, vecty] = }selectmapd(${2:lat}, ${3:long}, ${4:obs}, ${5:x}, ${6:y}, ${7:method}, ${8:Hdem}, ${9:oui})$0",
"description": "function [out,vectx,vecty]=selectmapd(lat,long,obs,x,y,method,Hdem,oui)" 
},
"selectstat": {
"prefix": "selectstat",
"body": "${1:[out, varargout] = }selectstat(${2:method}, ${3:obs}, ${4:variable}, ${5:varargin})$0",
"description": "function [out,varargout]=selectstat(method,obs,variable,varargin)" 
},
"semmap": {
"prefix": "semmap",
"body": "${1:out = }semmap(${2:long}, ${3:lat}, ${4:xinp}, ${5:yinp}, ${6:W}, ${7:varargin})$0",
"description": "function [out]=semmap(long,lat,xinp,yinp,W,varargin)" 
},
"semmap_d": {
"prefix": "semmap_d",
"body": "semmap_d$0",
"description": "semmap_d" 
},
"setdens": {
"prefix": "setdens",
"body": "setdens$0",
"description": "setdens" 
},
"setdens2": {
"prefix": "setdens2",
"body": "setdens2$0",
"description": "setdens2" 
},
"setdens3": {
"prefix": "setdens3",
"body": "setdens3$0",
"description": "setdens3" 
},
"setdens4": {
"prefix": "setdens4",
"body": "setdens4$0",
"description": "setdens4" 
},
"setdens5": {
"prefix": "setdens5",
"body": "setdens5$0",
"description": "setdens5" 
},
"setdensq": {
"prefix": "setdensq",
"body": "setdensq$0",
"description": "setdensq" 
},
"setw": {
"prefix": "setw",
"body": "setw$0",
"description": "setw" 
},
"sirf": {
"prefix": "sirf",
"body": "${1:[xindex, beta, valp] = }sirf(${2:x}, ${3:y}, ${4:nbcla})$0",
"description": "function [xindex, beta, valp]= sirf(x,y,nbcla)" 
},
"sirmap": {
"prefix": "sirmap",
"body": "${1:[out, Rbar, tstat] = }sirmap(${2:long}, ${3:lat}, ${4:xinp}, ${5:yinp}, ${6:nbcla}, ${7:varargin})$0",
"description": "function [out,Rbar,tstat]=sirmap(long,lat,xinp,yinp,nbcla,varargin)" 
},
"sirmap_d": {
"prefix": "sirmap_d",
"body": "sirmap_d$0",
"description": "sirmap_d" 
},
"sqplot": {
"prefix": "sqplot",
"body": "${1:bounds = }sqplot(${2:x}, ${3:y}, ${4:buffer}, ${5:noadj})$0",
"description": "function bounds = sqplot(x,y,buffer,noadj)" 
},
"stepkm2": {
"prefix": "stepkm2",
"body": "${1:[center_index, obj_fcn, U] = }stepkm2(${2:center_index}, ${3:distmat})$0",
"description": "function [center_index, obj_fcn, U] = stepkm(center_index, distmat)" 
},
"tostr": {
"prefix": "tostr",
"body": "${1:textmat = }tostr(${2:A}, ${3:digits}, ${4:leftjust})$0",
"description": "function textmat = tostr(A,digits,leftjust)" 
},
"trilow": {
"prefix": "trilow",
"body": "${1:[c, i, j] = }trilow(${2:x})$0",
"description": "function [c,i,j] = trilow(x)" 
},
"variocloudmap": {
"prefix": "variocloudmap",
"body": "${1:out = }variocloudmap(${2:long}, ${3:lat}, ${4:variable}, ${5:robust}, ${6:opt}, ${7:varargin})$0",
"description": "function [out]=variocloudmap(long,lat,variable,robust,opt,varargin)" 
},
"variocloudmap_d": {
"prefix": "variocloudmap_d",
"body": "variocloudmap_d$0",
"description": "variocloudmap_d" 
},
"vecdist": {
"prefix": "vecdist",
"body": "${1:distmat = }vecdist(${2:mat1}, ${3:mat2})$0",
"description": "function distmat = vecdist(mat1, mat2)" 
},
"vprgen": {
"prefix": "vprgen",
"body": "${1:[v, d] = }vprgen(${2:a}, ${3:b})$0",
"description": "function [v, d] = vprgen(a,b)" 
},
"apm": {
"prefix": "apm",
"body": "${1:result = }apm(${2:results1}, ${3:results2})$0",
"description": "function result = apm(results1,results2)" 
},
"apm_d": {
"prefix": "apm_d",
"body": "apm_d$0",
"description": "apm_d" 
},
"coda": {
"prefix": "coda",
"body": "${1:result = }coda(${2:draws}, ${3:vnames}, ${4:info}, ${5:fid})$0",
"description": "function result = coda(draws,vnames,info,fid)" 
},
"coda_d": {
"prefix": "coda_d",
"body": "coda_d$0",
"description": "coda_d" 
},
"empquant": {
"prefix": "empquant",
"body": "${1:y = }empquant(${2:runs}, ${3:q})$0",
"description": "function y = empquant(runs,q)" 
},
"indtest": {
"prefix": "indtest",
"body": "${1:[g2, bic] = }indtest(${2:d}, ${3:n})$0",
"description": "function [g2, bic] = indtest(d,n)" 
},
"mcest": {
"prefix": "mcest",
"body": "${1:[alpha, beta] = }mcest(${2:d}, ${3:n})$0",
"description": "function [alpha, beta] = mcest(d,n)" 
},
"mctest": {
"prefix": "mctest",
"body": "${1:[g2, bic] = }mctest(${2:d}, ${3:n})$0",
"description": "function [g2, bic] = mctest2(d,n)" 
},
"momentg": {
"prefix": "momentg",
"body": "${1:results = }momentg(${2:draws})$0",
"description": "function results = momentg(draws)" 
},
"momentg_d": {
"prefix": "momentg_d",
"body": "momentg_d$0",
"description": "momentg_d" 
},
"nmin": {
"prefix": "nmin",
"body": "${1:nm = }nmin(${2:q}, ${3:r}, ${4:s})$0",
"description": "function nm = nmin(q,r,s)" 
},
"ppnd": {
"prefix": "ppnd",
"body": "${1:y = }ppnd(${2:p})$0",
"description": "function y = ppnd(p)" 
},
"prt_coda": {
"prefix": "prt_coda",
"body": "prt_coda(${2:results}, ${3:vnames}, ${4:fid})$0",
"description": "function prt_coda(results,vnames,fid)" 
},
"raftery": {
"prefix": "raftery",
"body": "${1:result = }raftery(${2:runs}, ${3:q}, ${4:r}, ${5:s})$0",
"description": "function  result = raftery(runs,q,r,s)" 
},
"raftery_d": {
"prefix": "raftery_d",
"body": "raftery_d$0",
"description": "raftery_d" 
},
"thin": {
"prefix": "thin",
"body": "${1:[x, y] = }thin(${2:run}, ${3:n}, ${4:kthin})$0",
"description": "function [x, y] = thin(run,n,kthin)" 
},
"histo": {
"prefix": "histo",
"body": "histo(${2:x}, ${3:N}, ${4:odd}, ${5:scale})$0",
"description": "function histo(x,N,odd,scale)" 
},
"k_pdf": {
"prefix": "k_pdf",
"body": "${1:gr = }k_pdf(${2:X}, ${3:type}, ${4:nb}, ${5:range}, ${6:bw})$0",
"description": "function gr=k_pdf(X,type,nb,range,bw)" 
},
"pairs_V2": {
"prefix": "pairs_V2",
"body": "pairs(${2:X}, ${3:vnames}, ${4:plotsymbol}, ${5:diagonal})$0",
"description": "function  pscatter(X,vnames,plotsymbol,diagonal)" 
},
"pairs_d": {
"prefix": "pairs_d",
"body": "pairs_d$0",
"description": "pairs_d" 
},
"plt_turns": {
"prefix": "plt_turns",
"body": "plt_turns(${2:results}, ${3:cstruc}, ${4:vname})$0",
"description": "function plt_turns(results,cstruc,vname)" 
},
"plt_turnsd": {
"prefix": "plt_turnsd",
"body": "plt_turnsd$0",
"description": "plt_turnsd" 
},
"pltdens_d": {
"prefix": "pltdens_d",
"body": "pltdens_d$0",
"description": "pltdens_d" 
},
"spyc": {
"prefix": "spyc",
"body": "spyc(${2:S}, ${3:marker}, ${4:markersize})$0",
"description": "function spyc(S,marker,markersize);" 
},
"tsplot_d": {
"prefix": "tsplot_d",
"body": "tsplot_d$0",
"description": "tsplot_d" 
},
"banana": {
"prefix": "banana",
"body": "${1:z = }banana(${2:parm}, ${3:flag})$0",
"description": "function z=banana(parm,flag)" 
},
"banana_d": {
"prefix": "banana_d",
"body": "banana_d$0",
"description": "banana_d" 
},
"dfp_min": {
"prefix": "dfp_min",
"body": "${1:result = }dfp_min(${2:f}, ${3:pin}, ${4:info}, ${5:varargin})$0",
"description": "function result = dfp_min(f,pin,info,varargin)" 
},
"dfp_mind": {
"prefix": "dfp_mind",
"body": "dfp_mind$0",
"description": "dfp_mind" 
},
"fdhess": {
"prefix": "fdhess",
"body": "${1:H = }fdhess(${2:f}, ${3:x}, ${4:varargin})$0",
"description": "function H = fdhess(f,x,varargin)" 
},
"fdjac": {
"prefix": "fdjac",
"body": "${1:fjac = }fdjac(${2:f}, ${3:x}, ${4:varargin})$0",
"description": "function fjac = fdjac(f,x,varargin)" 
},
"frpr_min": {
"prefix": "frpr_min",
"body": "${1:result = }frpr_min(${2:f}, ${3:pin}, ${4:info}, ${5:varargin})$0",
"description": "function result = frpr_min(f,pin,info,varargin)" 
},
"frpr_mind": {
"prefix": "frpr_mind",
"body": "frpr_mind$0",
"description": "frpr_mind" 
},
"gradnt": {
"prefix": "gradnt",
"body": "${1:g = }gradnt(${2:funfcn}, ${3:theta}, ${4:deltagrad}, ${5:varargin})$0",
"description": "function g = gradnt(funfcn,theta,deltagrad,varargin)" 
},
"gradt": {
"prefix": "gradt",
"body": "${1:grdd = }gradt(${2:funfcn}, ${3:x0}, ${4:varargin})$0",
"description": "function grdd = gradt(funfcn,x0,varargin)" 
},
"hessian": {
"prefix": "hessian",
"body": "${1:H = }hessian(${2:f}, ${3:x}, ${4:varargin})$0",
"description": "function H = hessian(f,x,varargin)" 
},
"hesszz": {
"prefix": "hesszz",
"body": "${1:stat = }hesszz(${2:b}, ${3:infoz}, ${4:stat}, ${5:varargin})$0",
"description": "function stat=hesszz(b,infoz,stat,varargin)" 
},
"linmin": {
"prefix": "linmin",
"body": "${1:[pout, fout] = }linmin(${2:pin}, ${3:xi}, ${4:tol}, ${5:f}, ${6:varargin})$0",
"description": "function [pout,fout] = linmin(pin,xi,tol,f,varargin)" 
},
"maxlik": {
"prefix": "maxlik",
"body": "${1:result = }maxlik(${2:func}, ${3:b}, ${4:info}, ${5:varargin})$0",
"description": "function result=maxlik(func,b,info,varargin)" 
},
"numzz": {
"prefix": "numzz",
"body": "${1:G = }numzz(${2:b}, ${3:infoz}, ${4:stat}, ${5:varargin})$0",
"description": "function  G=numzz(b,infoz,stat,varargin)" 
},
"optim1_d": {
"prefix": "optim1_d",
"body": "optim1_d$0",
"description": "optim1_d" 
},
"optim2_d": {
"prefix": "optim2_d",
"body": "optim2_d$0",
"description": "optim2_d" 
},
"optim3_d": {
"prefix": "optim3_d",
"body": "optim3_d$0",
"description": "optim3_d" 
},
"pow_min": {
"prefix": "pow_min",
"body": "${1:result = }pow_min(${2:f}, ${3:pin}, ${4:info}, ${5:varargin})$0",
"description": "function result = pow_min(f,pin,info,varargin)" 
},
"pow_mind": {
"prefix": "pow_mind",
"body": "pow_mind$0",
"description": "pow_mind" 
},
"to_like1": {
"prefix": "to_like1",
"body": "${1:like = }to_like1(${2:b}, ${3:y}, ${4:x})$0",
"description": "function like =  to_like1(b,y,x);" 
},
"to_like2": {
"prefix": "to_like2",
"body": "${1:like = }to_like2(${2:b}, ${3:y}, ${4:x})$0",
"description": "function like =  to_like2(b,y,x);" 
},
"to_liked": {
"prefix": "to_liked",
"body": "${1:like = }to_liked(${2:b}, ${3:y}, ${4:x})$0",
"description": "function like =  to_liked(b,y,x);" 
},
"tvp_beta": {
"prefix": "tvp_beta",
"body": "${1:[beta, ferror] = }tvp_beta(${2:parm}, ${3:y}, ${4:x})$0",
"description": "function [beta, ferror] =  tvp_beta(parm,y,x)" 
},
"tvp_like1": {
"prefix": "tvp_like1",
"body": "${1:lik = }tvp_like1(${2:parm}, ${3:y}, ${4:x})$0",
"description": "function lik = tvp_like(parm,y,x)" 
},
"tvp_like2": {
"prefix": "tvp_like2",
"body": "${1:lik = }tvp_like2(${2:parm}, ${3:y}, ${4:x})$0",
"description": "function lik = tvp_like2(parm,y,x)" 
},
"ar1_like": {
"prefix": "ar1_like",
"body": "${1:llike = }ar1_like(${2:param}, ${3:y}, ${4:x})$0",
"description": "function llike = ar1_like(param,y,x)" 
},
"ar_g": {
"prefix": "ar_g",
"body": "${1:results = }ar_g(${2:y}, ${3:nlag}, ${4:ndraw}, ${5:nomit}, ${6:prior}, ${7:start})$0",
"description": "function results = ar_g(y,nlag,ndraw,nomit,prior,start)" 
},
"ar_gd": {
"prefix": "ar_gd",
"body": "ar_gd$0",
"description": "ar_gd" 
},
"box_lik": {
"prefix": "box_lik",
"body": "${1:like = }box_lik(${2:lam}, ${3:y}, ${4:x}, ${5:model})$0",
"description": "function like = box_lik(lam,y,x,model);" 
},
"boxc_trans": {
"prefix": "boxc_trans",
"body": "${1:bdata = }boxc_trans(${2:x}, ${3:lam})$0",
"description": "function bdata = boxc_trans(x,lam)" 
},
"boxcox": {
"prefix": "boxcox",
"body": "${1:results = }boxcox(${2:y}, ${3:x}, ${4:lamlo}, ${5:lamup}, ${6:model}, ${7:foptions})$0",
"description": "function results = boxcox1(y,x,lamlo,lamup,model,foptions)" 
},
"boxcox_d": {
"prefix": "boxcox_d",
"body": "boxcox_d$0",
"description": "boxcox_d" 
},
"demo_reg": {
"prefix": "demo_reg",
"body": "demo_reg$0",
"description": "demo_reg" 
},
"felogit": {
"prefix": "felogit",
"body": "${1:results = }felogit(${2:y}, ${3:x}, ${4:ivec}, ${5:tvec}, ${6:beta0}, ${7:c0}, ${8:maxit}, ${9:tol})$0",
"description": "function results = felogit(y,x,ivec,tvec,beta0,c0,maxit,tol);" 
},
"felogit_demo": {
"prefix": "felogit_demo",
"body": "felogit_demo$0",
"description": "felogit_demo" 
},
"felogit_lik": {
"prefix": "felogit_lik",
"body": "${1:[P, lnL] = }felogit_lik(${2:y}, ${3:x}, ${4:b}, ${5:c}, ${6:d})$0",
"description": "function [P,lnL] = felogit_lik(y,x,b,c,d)" 
},
"garch_like": {
"prefix": "garch_like",
"body": "${1:llik = }garch_like(${2:parm}, ${3:y}, ${4:x})$0",
"description": "function llik = garch_like(parm,y,x)" 
},
"garch_sigt": {
"prefix": "garch_sigt",
"body": "${1:sigt = }garch_sigt(${2:parm}, ${3:y}, ${4:x})$0",
"description": "function sigt =  garch_sigt(parm,y,x)" 
},
"garch_trans": {
"prefix": "garch_trans",
"body": "${1:cc1 = }garch_trans(${2:cc0})$0",
"description": "function cc1 = garch_trans(cc0)" 
},
"ham_itrans": {
"prefix": "ham_itrans",
"body": "${1:c1 = }ham_itrans(${2:c0})$0",
"description": "function c1 = ham_itrans(c0);" 
},
"ham_like": {
"prefix": "ham_like",
"body": "${1:likv = }ham_like(${2:parm1}, ${3:y}, ${4:x}, ${5:nlag}, ${6:st_mat})$0",
"description": "function likv = ham_like(parm1,y,x,nlag,st_mat);" 
},
"ham_trans": {
"prefix": "ham_trans",
"body": "${1:c1 = }ham_trans(${2:c0})$0",
"description": "function c1 = ham_trans(c0);" 
},
"hwhite_d": {
"prefix": "hwhite_d",
"body": "hwhite_d$0",
"description": "hwhite_d" 
},
"ksmooth": {
"prefix": "ksmooth",
"body": "${1:pr_sm0 = }ksmooth(${2:parm}, ${3:pr_tt0}, ${4:pr_tl0})$0",
"description": "function pr_sm0 = ksmooth(parm,pr_tt0,pr_tl0)" 
},
"lad": {
"prefix": "lad",
"body": "${1:results = }lad(${2:y}, ${3:x}, ${4:maxit}, ${5:crit})$0",
"description": "function results = lad(y,x,maxit,crit)" 
},
"lad_d": {
"prefix": "lad_d",
"body": "lad_d$0",
"description": "lad_d" 
},
"lmtest_V2": {
"prefix": "lmtest_V2",
"body": "${1:[lmstat, lmprob, reslm] = }lmtest(${2:resultr}, ${3:xu})$0",
"description": "function [lmstat, lmprob, reslm] = lmtest(resultr,xu)" 
},
"lmtest_d": {
"prefix": "lmtest_d",
"body": "lmtest_d$0",
"description": "lmtest_d" 
},
"lo_like": {
"prefix": "lo_like",
"body": "${1:out = }lo_like(${2:b}, ${3:y}, ${4:x})$0",
"description": "function out = lo_like(b,y,x)" 
},
"logit_V1": {
"prefix": "logit_V1",
"body": "${1:result = }logit(${2:y}, ${3:x}, ${4:maxit}, ${5:tol})$0",
"description": "function result = logit(y,x,maxit,tol)" 
},
"logit_d": {
"prefix": "logit_d",
"body": "logit_d$0",
"description": "logit_d" 
},
"mlogit": {
"prefix": "mlogit",
"body": "${1:results = }mlogit(${2:y}, ${3:x}, ${4:beta}, ${5:theta})$0",
"description": "function results = mlogit(y,x,beta,theta)" 
},
"mlogit_d": {
"prefix": "mlogit_d",
"body": "mlogit_d$0",
"description": "mlogit_d" 
},
"mlogit_lik": {
"prefix": "mlogit_lik",
"body": "${1:[g, g1, p, dev] = }mlogit_lik(${2:y}, ${3:x}, ${4:beta}, ${5:z}, ${6:z1})$0",
"description": "function [g,g1,p,dev]=lik(y,x,beta,z,z1)" 
},
"multilogit": {
"prefix": "multilogit",
"body": "${1:results = }multilogit(${2:y}, ${3:x}, ${4:beta0}, ${5:maxit}, ${6:tol})$0",
"description": "function results = multilogit(y,x,beta0,maxit,tol);" 
},
"multilogit_demo": {
"prefix": "multilogit_demo",
"body": "multilogit_demo$0",
"description": "multilogit_demo" 
},
"multilogit_lik": {
"prefix": "multilogit_lik",
"body": "${1:[P, lnL] = }multilogit_lik(${2:y}, ${3:x}, ${4:beta}, ${5:d})$0",
"description": "function [P,lnL] = multilogit_lik(y,x,beta,d);" 
},
"nwest": {
"prefix": "nwest",
"body": "${1:results = }nwest(${2:y}, ${3:x}, ${4:nlag})$0",
"description": "function results=nwest(y,x,nlag)" 
},
"nwest_d": {
"prefix": "nwest_d",
"body": "nwest_d$0",
"description": "nwest_d" 
},
"ols - 副本": {
"prefix": "ols - 副本",
"body": "${1:results = }ols - 副本(${2:y}, ${3:x})$0",
"description": "function results=ols(y,x)" 
},
"olsSpatial": {
"prefix": "olsSpatial",
"body": "${1:results = }olsSpatial(${2:y}, ${3:x})$0",
"description": "function results=ols(y,x)" 
},
"ols_d": {
"prefix": "ols_d",
"body": "ols_d$0",
"description": "ols_d" 
},
"ols_g": {
"prefix": "ols_g",
"body": "${1:results = }ols_g(${2:y}, ${3:x}, ${4:ndraw}, ${5:nomit}, ${6:prior}, ${7:start})$0",
"description": "function results = ols_g(y,x,ndraw,nomit,prior,start)" 
},
"ols_gcbma": {
"prefix": "ols_gcbma",
"body": "${1:results = }ols_gcbma(${2:y}, ${3:x}, ${4:ndraw}, ${5:prior})$0",
"description": "function results = ols_gcbma(y,x,ndraw,prior)" 
},
"ols_gcbmad": {
"prefix": "ols_gcbmad",
"body": "ols_gcbmad$0",
"description": "ols_gcbmad" 
},
"ols_gd": {
"prefix": "ols_gd",
"body": "ols_gd$0",
"description": "ols_gd" 
},
"ols_gv": {
"prefix": "ols_gv",
"body": "${1:results = }ols_gv(${2:y}, ${3:x}, ${4:ndraw}, ${5:nomit}, ${6:prior})$0",
"description": "function results = ols_gv(y,x,ndraw,nomit,prior)" 
},
"ols_gvd": {
"prefix": "ols_gvd",
"body": "ols_gvd$0",
"description": "ols_gvd" 
},
"olsar1": {
"prefix": "olsar1",
"body": "${1:result = }olsar1(${2:y}, ${3:x})$0",
"description": "function result = olsar1(y,x)" 
},
"olsar1_d": {
"prefix": "olsar1_d",
"body": "olsar1_d$0",
"description": "olsar1_d" 
},
"olsc": {
"prefix": "olsc",
"body": "${1:result = }olsc(${2:y}, ${3:x})$0",
"description": "function result = olsc(y,x)" 
},
"olsc_d": {
"prefix": "olsc_d",
"body": "olsc_d$0",
"description": "olsc_d" 
},
"olse": {
"prefix": "olse",
"body": "${1:resid = }olse(${2:y}, ${3:x})$0",
"description": "function resid=olse(y,x)" 
},
"olslrw": {
"prefix": "olslrw",
"body": "${1:results = }olslrw(${2:y}, ${3:x})$0",
"description": "function results=ols(y,x)" 
},
"olsrs": {
"prefix": "olsrs",
"body": "${1:results = }olsrs(${2:y}, ${3:x}, ${4:R}, ${5:q})$0",
"description": "function results = olsrs(y,x,R,q)" 
},
"olsrs_d": {
"prefix": "olsrs_d",
"body": "olsrs_d$0",
"description": "olsrs_d" 
},
"olst": {
"prefix": "olst",
"body": "${1:results = }olst(${2:y}, ${3:x}, ${4:maxit}, ${5:crit})$0",
"description": "function results = olst(y,x,maxit,crit)" 
},
"olst_d": {
"prefix": "olst_d",
"body": "olst_d$0",
"description": "olst_d" 
},
"panel_d": {
"prefix": "panel_d",
"body": "panel_d$0",
"description": "panel_d" 
},
"pfixed": {
"prefix": "pfixed",
"body": "${1:results = }pfixed(${2:y}, ${3:index}, ${4:x})$0",
"description": "function results = pfixed(y,index,x)" 
},
"phaussman": {
"prefix": "phaussman",
"body": "phaussman(${2:result1}, ${3:result2}, ${4:fid})$0",
"description": "function phaussman(result1, result2,fid)" 
},
"plt_eqs": {
"prefix": "plt_eqs",
"body": "plt_eqs(${2:results}, ${3:vnames})$0",
"description": "function plt_eqs(results,vnames);" 
},
"plt_gibbs": {
"prefix": "plt_gibbs",
"body": "plt_gibbs(${2:results}, ${3:vnames})$0",
"description": "function plt_gibbs(results,vnames)" 
},
"plt_reg": {
"prefix": "plt_reg",
"body": "plt_reg(${2:results}, ${3:vnames})$0",
"description": "function plt_reg(results,vnames);" 
},
"plt_tvp": {
"prefix": "plt_tvp",
"body": "plt_tvp(${2:results}, ${3:vnames})$0",
"description": "function plt_tvp(results,vnames)" 
},
"ppooled": {
"prefix": "ppooled",
"body": "${1:results = }ppooled(${2:y}, ${3:x})$0",
"description": "function results = ppooled(y,x)" 
},
"pr_like": {
"prefix": "pr_like",
"body": "${1:like = }pr_like(${2:b}, ${3:y}, ${4:x})$0",
"description": "function like = pr_like(b,y,x)" 
},
"prandom": {
"prefix": "prandom",
"body": "${1:results = }prandom(${2:y}, ${3:index}, ${4:x})$0",
"description": "function results = prandom(y,index,x)" 
},
"probit": {
"prefix": "probit",
"body": "${1:result = }probit(${2:y}, ${3:x}, ${4:maxit}, ${5:tol})$0",
"description": "function result = probit(y,x,maxit,tol)" 
},
"probit_d": {
"prefix": "probit_d",
"body": "probit_d$0",
"description": "probit_d" 
},
"probit_g": {
"prefix": "probit_g",
"body": "${1:results = }probit_g(${2:y}, ${3:x}, ${4:ndraw}, ${5:nomit}, ${6:prior}, ${7:seed})$0",
"description": "function results =  probit_g(y,x,ndraw,nomit,prior,seed)" 
},
"probit_gd": {
"prefix": "probit_gd",
"body": "probit_gd$0",
"description": "probit_gd" 
},
"prt_bmao": {
"prefix": "prt_bmao",
"body": "prt_bmao(${2:results}, ${3:vnames}, ${4:fid})$0",
"description": "function prt_bmas(results,vnames,fid)" 
},
"prt_eqs": {
"prefix": "prt_eqs",
"body": "prt_eqs(${2:results}, ${3:vnames}, ${4:fid})$0",
"description": "function prt_eqs(results,vnames,fid)" 
},
"prt_felogit": {
"prefix": "prt_felogit",
"body": "prt_felogit(${2:results}, ${3:vnames}, ${4:fid})$0",
"description": "function prt_felogit(results,vnames,fid)" 
},
"prt_gibbs": {
"prefix": "prt_gibbs",
"body": "prt_gibbs(${2:results}, ${3:vnames}, ${4:fid})$0",
"description": "function prt_gibbs(results,vnames,fid)" 
},
"prt_multilogit": {
"prefix": "prt_multilogit",
"body": "prt_multilogit(${2:results}, ${3:vnames}, ${4:cnames}, ${5:fid})$0",
"description": "function prt_multilogit(results,vnames,cnames,fid)" 
},
"prt_panel": {
"prefix": "prt_panel",
"body": "prt_panel(${2:result}, ${3:vnames}, ${4:fid})$0",
"description": "function prt_panel(result,vnames,fid)" 
},
"prt_reg": {
"prefix": "prt_reg",
"body": "prt_reg(${2:results}, ${3:vnames}, ${4:fid})$0",
"description": "function prt_reg(results,vnames,fid)" 
},
"prt_swm": {
"prefix": "prt_swm",
"body": "prt_swm(${2:results}, ${3:vnames}, ${4:fid})$0",
"description": "function prt_swm(results,vnames,fid)" 
},
"prt_tvp": {
"prefix": "prt_tvp",
"body": "prt_tvp(${2:results}, ${3:vnames}, ${4:fid})$0",
"description": "function prt_tvp(results,vnames,fid)" 
},
"ridge": {
"prefix": "ridge",
"body": "${1:results = }ridge(${2:y}, ${3:x}, ${4:theta})$0",
"description": "function results = ridge(y,x,theta)" 
},
"ridge_d": {
"prefix": "ridge_d",
"body": "ridge_d$0",
"description": "ridge_d" 
},
"ridge_d2": {
"prefix": "ridge_d2",
"body": "ridge_d2$0",
"description": "ridge_d2" 
},
"robust": {
"prefix": "robust",
"body": "${1:results = }robust(${2:y}, ${3:x}, ${4:wfunc}, ${5:wparm})$0",
"description": "function results=robust(y,x,wfunc,wparm)" 
},
"robust_d": {
"prefix": "robust_d",
"body": "robust_d$0",
"description": "robust_d" 
},
"rtrace": {
"prefix": "rtrace",
"body": "rtrace(${2:y}, ${3:x}, ${4:thetamax}, ${5:divs}, ${6:vname})$0",
"description": "function rtrace(y,x,thetamax,divs,vname)" 
},
"sur": {
"prefix": "sur",
"body": "${1:result = }sur(${2:neqs}, ${3:y}, ${4:x}, ${5:iflag}, ${6:info})$0",
"description": "function result = sur(neqs,y,x,iflag,info)" 
},
"sur_d": {
"prefix": "sur_d",
"body": "sur_d$0",
"description": "sur_d" 
},
"switch_em": {
"prefix": "switch_em",
"body": "${1:results = }switch_em(${2:y}, ${3:x1}, ${4:x2}, ${5:x3}, ${6:b1}, ${7:b2}, ${8:b3}, ${9:crit}, ${10:maxit})$0",
"description": "function results = switch_em(y,x1,x2,x3,b1,b2,b3,crit,maxit)" 
},
"switch_emd": {
"prefix": "switch_emd",
"body": "switch_emd$0",
"description": "switch_emd" 
},
"theil": {
"prefix": "theil",
"body": "${1:results = }theil(${2:y}, ${3:x}, ${4:rvec}, ${5:rmat}, ${6:v})$0",
"description": "function results=theil(y,x,rvec,rmat,v)" 
},
"theil_d": {
"prefix": "theil_d",
"body": "theil_d$0",
"description": "theil_d" 
},
"thsls": {
"prefix": "thsls",
"body": "${1:result = }thsls(${2:neqs}, ${3:y}, ${4:Y}, ${5:X}, ${6:xall})$0",
"description": "function result = thsls(neqs,y,Y,X,xall)" 
},
"thsls_d": {
"prefix": "thsls_d",
"body": "thsls_d$0",
"description": "thsls_d" 
},
"to_llike": {
"prefix": "to_llike",
"body": "${1:like = }to_llike(${2:b}, ${3:y}, ${4:x}, ${5:a})$0",
"description": "function like =  to_llike(b,y,x,a)" 
},
"to_rlike": {
"prefix": "to_rlike",
"body": "${1:like = }to_rlike(${2:b}, ${3:y}, ${4:x}, ${5:a})$0",
"description": "function like =  to_rlike(b,y,x,a);" 
},
"tobit": {
"prefix": "tobit",
"body": "${1:results = }tobit(${2:y}, ${3:x}, ${4:info})$0",
"description": "function results = tobit(y,x,info)" 
},
"tobit_d": {
"prefix": "tobit_d",
"body": "tobit_d$0",
"description": "tobit_d" 
},
"tobit_d2": {
"prefix": "tobit_d2",
"body": "tobit_d2$0",
"description": "tobit_d2" 
},
"tobit_g": {
"prefix": "tobit_g",
"body": "${1:results = }tobit_g(${2:y}, ${3:x}, ${4:ndraw}, ${5:nomit}, ${6:prior}, ${7:start})$0",
"description": "function results =  tobit_g(y,x,ndraw,nomit,prior,start)" 
},
"tobit_gd": {
"prefix": "tobit_gd",
"body": "tobit_gd$0",
"description": "tobit_gd" 
},
"tobit_gd2": {
"prefix": "tobit_gd2",
"body": "tobit_gd2$0",
"description": "tobit_gd2" 
},
"tsls": {
"prefix": "tsls",
"body": "${1:results = }tsls(${2:y}, ${3:y1}, ${4:x1}, ${5:xall})$0",
"description": "function results=tsls(y,y1,x1,xall)" 
},
"tsls_d": {
"prefix": "tsls_d",
"body": "tsls_d$0",
"description": "tsls_d" 
},
"tvp": {
"prefix": "tvp",
"body": "${1:result = }tvp(${2:y}, ${3:x}, ${4:parm}, ${5:info})$0",
"description": "function result = tvp(y,x,parm,info)" 
},
"tvp_d": {
"prefix": "tvp_d",
"body": "tvp_d$0",
"description": "tvp_d" 
},
"tvp_garch": {
"prefix": "tvp_garch",
"body": "${1:result = }tvp_garch(${2:y}, ${3:x}, ${4:parm}, ${5:info})$0",
"description": "function result = tvp_garch(y,x,parm,info)" 
},
"tvp_garch_like": {
"prefix": "tvp_garch_like",
"body": "${1:llik = }tvp_garch_like(${2:parm}, ${3:y}, ${4:x}, ${5:start}, ${6:priorb0}, ${7:priorv0})$0",
"description": "function llik = tvp_garch_like(parm,y,x,start,priorb0,priorv0)" 
},
"tvp_garchd": {
"prefix": "tvp_garchd",
"body": "tvp_garchd$0",
"description": "tvp_garchd" 
},
"tvp_like": {
"prefix": "tvp_like",
"body": "${1:lik = }tvp_like(${2:parm}, ${3:y}, ${4:x}, ${5:start}, ${6:priorb0}, ${7:priorv0})$0",
"description": "function lik = tvp_like(parm,y,x,start,priorb0,priorv0)" 
},
"tvp_markov": {
"prefix": "tvp_markov",
"body": "${1:result = }tvp_markov(${2:y}, ${3:x}, ${4:parm}, ${5:info})$0",
"description": "function result = tvp_markov(y,x,parm,info)" 
},
"tvp_markov_lik": {
"prefix": "tvp_markov_lik",
"body": "${1:like = }tvp_markov_lik(${2:parm}, ${3:y}, ${4:x}, ${5:start}, ${6:b0}, ${7:v0})$0",
"description": "function like = tvp_markov_lik(parm,y,x,start,b0,v0)" 
},
"tvp_markovd": {
"prefix": "tvp_markovd",
"body": "tvp_markovd$0",
"description": "tvp_markovd" 
},
"tvp_markovd2": {
"prefix": "tvp_markovd2",
"body": "tvp_markovd2$0",
"description": "tvp_markovd2" 
},
"tvp_zglike": {
"prefix": "tvp_zglike",
"body": "${1:lik = }tvp_zglike(${2:parm}, ${3:y}, ${4:x}, ${5:start}, ${6:priorb0}, ${7:priorv0})$0",
"description": "function lik = tvp_zglike(parm,y,x,start,priorb0,priorv0)" 
},
"waldf": {
"prefix": "waldf",
"body": "${1:[fstat, fprb] = }waldf(${2:resultr}, ${3:resultu})$0",
"description": "function [fstat, fprb] = waldf(resultr,resultu)" 
},
"waldf_d": {
"prefix": "waldf_d",
"body": "waldf_d$0",
"description": "waldf_d" 
},
"bcasetti": {
"prefix": "bcasetti",
"body": "${1:results = }bcasetti(${2:y}, ${3:x}, ${4:xc}, ${5:yc}, ${6:ndraw}, ${7:nomit}, ${8:option})$0",
"description": "function results=bcasetti(y,x,xc,yc,ndraw,nomit,option)" 
},
"bcasetti_d": {
"prefix": "bcasetti_d",
"body": "bcasetti_d$0",
"description": "bcasetti_d" 
},
"casetti": {
"prefix": "casetti",
"body": "${1:results = }casetti(${2:y}, ${3:x}, ${4:xc}, ${5:yc}, ${6:option})$0",
"description": "function results=casetti(y,x,xc,yc,option)" 
},
"casetti_d": {
"prefix": "casetti_d",
"body": "casetti_d$0",
"description": "casetti_d" 
},
"darp": {
"prefix": "darp",
"body": "${1:results = }darp(${2:y}, ${3:x}, ${4:xc}, ${5:yc}, ${6:option})$0",
"description": "function results=darp(y,x,xc,yc,option)" 
},
"darp_d": {
"prefix": "darp_d",
"body": "darp_d$0",
"description": "darp_d" 
},
"darp_lik1": {
"prefix": "darp_lik1",
"body": "${1:llike = }darp_lik1(${2:parm}, ${3:y}, ${4:x}, ${5:xc}, ${6:yc})$0",
"description": "function llike = darp_lik1(parm,y,x,xc,yc)" 
},
"darp_lik2": {
"prefix": "darp_lik2",
"body": "${1:llike = }darp_lik2(${2:parm}, ${3:y}, ${4:x}, ${5:d})$0",
"description": "function llike = darp_lik2(parm,y,x,d)" 
},
"prt_cas": {
"prefix": "prt_cas",
"body": "prt_cas(${2:results}, ${3:vnames}, ${4:fid})$0",
"description": "function prt_cas(results,vnames,fid)" 
},
"f2_far": {
"prefix": "f2_far",
"body": "${1:llike = }f2_far(${2:parm}, ${3:y}, ${4:W}, ${5:detval})$0",
"description": "function llike = f2_far(parm,y,W,detval)" 
},
"f_far": {
"prefix": "f_far",
"body": "${1:llike = }f_far(${2:rho}, ${3:y}, ${4:W}, ${5:detval})$0",
"description": "function llike = f_far(rho,y,W,detval)" 
},
"far": {
"prefix": "far",
"body": "${1:results = }far(${2:y}, ${3:W}, ${4:info})$0",
"description": "function results = far(y,W,info)" 
},
"far_d": {
"prefix": "far_d",
"body": "far_d$0",
"description": "far_d" 
},
"far_d2": {
"prefix": "far_d2",
"body": "far_d2$0",
"description": "far_d2" 
},
"far_g": {
"prefix": "far_g",
"body": "${1:results = }far_g(${2:y}, ${3:W}, ${4:ndraw}, ${5:nomit}, ${6:prior})$0",
"description": "function results = far_g(y,W,ndraw,nomit,prior)" 
},
"far_gd": {
"prefix": "far_gd",
"body": "far_gd$0",
"description": "far_gd" 
},
"far_gd2": {
"prefix": "far_gd2",
"body": "far_gd2$0",
"description": "far_gd2" 
},
"far_gd3": {
"prefix": "far_gd3",
"body": "far_gd3$0",
"description": "far_gd3" 
},
"far_timing": {
"prefix": "far_timing",
"body": "far_timing$0",
"description": "far_timing" 
},
"plt_far": {
"prefix": "plt_far",
"body": "plt_far(${2:results}, ${3:vnames})$0",
"description": "function plt_far(results,vnames)" 
},
"prt_far": {
"prefix": "prt_far",
"body": "prt_far(${2:results}, ${3:vnames}, ${4:fid})$0",
"description": "function prt_far(results,vnames,fid)" 
},
"nllsrho_minz": {
"prefix": "nllsrho_minz",
"body": "${1:e = }nllsrho_minz(${2:lvec}, ${3:infoz}, ${4:stat}, ${5:Gn}, ${6:Gn2})$0",
"description": "function e=nllsrho_minz(lvec,infoz,stat,Gn,Gn2)" 
},
"nllsrho_minz2": {
"prefix": "nllsrho_minz2",
"body": "${1:e = }nllsrho_minz2(${2:rhovec}, ${3:infoz}, ${4:stat}, ${5:Gn}, ${6:Gn2})$0",
"description": "function e=nllsrho_minz2(rhovec,infoz,stat,Gn,Gn2)" 
},
"sac_gmm": {
"prefix": "sac_gmm",
"body": "${1:results = }sac_gmm(${2:y}, ${3:x}, ${4:W}, ${5:M}, ${6:options})$0",
"description": "function results=sac_gmm(y,x,W,M,options)" 
},
"sac_gmmd": {
"prefix": "sac_gmmd",
"body": "sac_gmmd$0",
"description": "sac_gmmd" 
},
"sac_gmmd2": {
"prefix": "sac_gmmd2",
"body": "sac_gmmd2$0",
"description": "sac_gmmd2" 
},
"sar_gmm": {
"prefix": "sar_gmm",
"body": "${1:results = }sar_gmm(${2:y}, ${3:x}, ${4:W})$0",
"description": "function results=sar_gmm(y,x,W)" 
},
"sar_gmmd": {
"prefix": "sar_gmmd",
"body": "sar_gmmd$0",
"description": "sar_gmmd" 
},
"sar_gmmd2": {
"prefix": "sar_gmmd2",
"body": "sar_gmmd2$0",
"description": "sar_gmmd2" 
},
"sar_gmmd3": {
"prefix": "sar_gmmd3",
"body": "sar_gmmd3$0",
"description": "sar_gmmd3" 
},
"sar_mcarlo": {
"prefix": "sar_mcarlo",
"body": "sar_mcarlo$0",
"description": "sar_mcarlo" 
},
"sem2_gmm": {
"prefix": "sem2_gmm",
"body": "${1:results = }sem2_gmm(${2:y}, ${3:x}, ${4:W1}, ${5:W2}, ${6:options})$0",
"description": "function results=sem2_gmm(y,x,W1,W2,options)" 
},
"sem2_gmmd": {
"prefix": "sem2_gmmd",
"body": "sem2_gmmd$0",
"description": "sem2_gmmd" 
},
"sem_gmm": {
"prefix": "sem_gmm",
"body": "${1:results = }sem_gmm(${2:y}, ${3:x}, ${4:W}, ${5:options})$0",
"description": "function results=sem_gmm(y,x,W,options)" 
},
"sem_gmmd": {
"prefix": "sem_gmmd",
"body": "sem_gmmd$0",
"description": "sem_gmmd" 
},
"sem_gmmd2": {
"prefix": "sem_gmmd2",
"body": "sem_gmmd2$0",
"description": "sem_gmmd2" 
},
"sem_gmmd3": {
"prefix": "sem_gmmd3",
"body": "sem_gmmd3$0",
"description": "sem_gmmd3" 
},
"sem_gmmd4": {
"prefix": "sem_gmmd4",
"body": "sem_gmmd4$0",
"description": "sem_gmmd4" 
},
"sem_mcarlo": {
"prefix": "sem_mcarlo",
"body": "sem_mcarlo$0",
"description": "sem_mcarlo" 
},
"sem_monte1": {
"prefix": "sem_monte1",
"body": "sem_monte1$0",
"description": "sem_monte1" 
},
"sem_monte2": {
"prefix": "sem_monte2",
"body": "sem_monte2$0",
"description": "sem_monte2" 
},
"bgwr": {
"prefix": "bgwr",
"body": "${1:results = }bgwr(${2:y}, ${3:x}, ${4:east}, ${5:north}, ${6:ndraw}, ${7:nomit}, ${8:prior})$0",
"description": "function results = bgwr(y,x,east,north,ndraw,nomit,prior);" 
},
"bgwr_d": {
"prefix": "bgwr_d",
"body": "bgwr_d$0",
"description": "bgwr_d" 
},
"bgwr_d2": {
"prefix": "bgwr_d2",
"body": "bgwr_d2$0",
"description": "bgwr_d2" 
},
"bgwrv": {
"prefix": "bgwrv",
"body": "${1:results = }bgwrv(${2:y}, ${3:x}, ${4:east}, ${5:north}, ${6:ndraw}, ${7:nomit}, ${8:info})$0",
"description": "function results = bgwrv(y,x,east,north,ndraw,nomit,info);" 
},
"bgwrv_d": {
"prefix": "bgwrv_d",
"body": "bgwrv_d$0",
"description": "bgwrv_d" 
},
"gwr": {
"prefix": "gwr",
"body": "${1:result = }gwr(${2:y}, ${3:x}, ${4:east}, ${5:north}, ${6:info})$0",
"description": "function result = gwr(y,x,east,north,info);" 
},
"gwr_d": {
"prefix": "gwr_d",
"body": "gwr_d$0",
"description": "gwr_d" 
},
"gwr_g": {
"prefix": "gwr_g",
"body": "${1:results = }gwr_g(${2:y}, ${3:x}, ${4:ndraw}, ${5:nomit}, ${6:prior})$0",
"description": "function results = gwr_g(y,x,ndraw,nomit,prior)" 
},
"gwr_logit": {
"prefix": "gwr_logit",
"body": "${1:result = }gwr_logit(${2:y}, ${3:x}, ${4:east}, ${5:north}, ${6:info})$0",
"description": "function result = gwr_logit(y,x,east,north,info);" 
},
"gwr_logitd": {
"prefix": "gwr_logitd",
"body": "gwr_logitd$0",
"description": "gwr_logitd" 
},
"gwr_probit": {
"prefix": "gwr_probit",
"body": "${1:result = }gwr_probit(${2:y}, ${3:x}, ${4:east}, ${5:north}, ${6:info})$0",
"description": "function result = gwr_probit(y,x,east,north,info);" 
},
"gwr_probitd": {
"prefix": "gwr_probitd",
"body": "gwr_probitd$0",
"description": "gwr_probitd" 
},
"gwrw": {
"prefix": "gwrw",
"body": "${1:wt = }gwrw(${2:xc}, ${3:yc}, ${4:band}, ${5:type})$0",
"description": "function wt = gwrw(xc,yc,band,type)" 
},
"gwrw_d": {
"prefix": "gwrw_d",
"body": "gwrw_d$0",
"description": "gwrw_d" 
},
"prt_gwr": {
"prefix": "prt_gwr",
"body": "prt_gwr(${2:results}, ${3:vnames}, ${4:fid})$0",
"description": "function prt_gwr(results,vnames,fid)" 
},
"scoref": {
"prefix": "scoref",
"body": "${1:score = }scoref(${2:bdwt}, ${3:y}, ${4:x}, ${5:east}, ${6:north}, ${7:flag})$0",
"description": "function score = scoref(bdwt,y,x,east,north,flag)" 
},
"scoref_log": {
"prefix": "scoref_log",
"body": "${1:score = }scoref_log(${2:bdwt}, ${3:y}, ${4:x}, ${5:east}, ${6:north})$0",
"description": "function score = scoref_log(bdwt,y,x,east,north)" 
},
"scoref_prob": {
"prefix": "scoref_prob",
"body": "${1:score = }scoref_prob(${2:bdwt}, ${3:y}, ${4:x}, ${5:east}, ${6:north})$0",
"description": "function score = scoref_prob(bdwt,y,x,east,north)" 
},
"scoreq": {
"prefix": "scoreq",
"body": "${1:q = }scoreq(${2:qmin}, ${3:qmax}, ${4:y}, ${5:x}, ${6:east}, ${7:north})$0",
"description": "function q = scoreq(qmin,qmax,y,x,east,north)" 
},
"lndet_d": {
"prefix": "lndet_d",
"body": "lndet_d$0",
"description": "lndet_d" 
},
"lndet_d2": {
"prefix": "lndet_d2",
"body": "lndet_d2$0",
"description": "lndet_d2" 
},
"lndetfull": {
"prefix": "lndetfull",
"body": "${1:out = }lndetfull(${2:W}, ${3:lmin}, ${4:lmax})$0",
"description": "function out=lndetfull(W,lmin,lmax)" 
},
"lndetint": {
"prefix": "lndetint",
"body": "${1:out = }lndetint(${2:wsw}, ${3:rmin}, ${4:rmax})$0",
"description": "function out=lndetint(wsw,rmin,rmax)" 
},
"lndetmc": {
"prefix": "lndetmc",
"body": "${1:out = }lndetmc(${2:order}, ${3:iter}, ${4:wsw}, ${5:rmin}, ${6:rmax})$0",
"description": "function out=lndetmc(order,iter,wsw,rmin,rmax)" 
},
"mess": {
"prefix": "mess",
"body": "${1:result = }mess(${2:y}, ${3:x}, ${4:options})$0",
"description": "function result = mess(y,x,options)" 
},
"mess_d": {
"prefix": "mess_d",
"body": "mess_d$0",
"description": "mess_d" 
},
"mess_d2": {
"prefix": "mess_d2",
"body": "mess_d2$0",
"description": "mess_d2" 
},
"mess_g": {
"prefix": "mess_g",
"body": "${1:results = }mess_g(${2:y}, ${3:x}, ${4:options}, ${5:ndraw}, ${6:nomit}, ${7:prior}, ${8:start})$0",
"description": "function results = mess_g(y,x,options,ndraw,nomit,prior,start)" 
},
"mess_g1": {
"prefix": "mess_g1",
"body": "${1:results = }mess_g1(${2:y}, ${3:x}, ${4:options}, ${5:ndraw}, ${6:nomit}, ${7:prior}, ${8:start})$0",
"description": "function results = mess_g1(y,x,options,ndraw,nomit,prior,start)" 
},
"mess_g1d": {
"prefix": "mess_g1d",
"body": "mess_g1d$0",
"description": "mess_g1d" 
},
"mess_g1d2": {
"prefix": "mess_g1d2",
"body": "mess_g1d2$0",
"description": "mess_g1d2" 
},
"mess_g2": {
"prefix": "mess_g2",
"body": "${1:results = }mess_g2(${2:y}, ${3:x}, ${4:options}, ${5:ndraw}, ${6:nomit}, ${7:prior}, ${8:start})$0",
"description": "function results = mess_g2(y,x,options,ndraw,nomit,prior,start)" 
},
"mess_g2d": {
"prefix": "mess_g2d",
"body": "mess_g2d$0",
"description": "mess_g2d" 
},
"mess_g2d2": {
"prefix": "mess_g2d2",
"body": "mess_g2d2$0",
"description": "mess_g2d2" 
},
"mess_g3": {
"prefix": "mess_g3",
"body": "${1:results = }mess_g3(${2:y}, ${3:x}, ${4:options}, ${5:ndraw}, ${6:nomit}, ${7:prior}, ${8:start})$0",
"description": "function results = mess_g3(y,x,options,ndraw,nomit,prior,start)" 
},
"mess_g3d": {
"prefix": "mess_g3d",
"body": "mess_g3d$0",
"description": "mess_g3d" 
},
"mess_g3d2": {
"prefix": "mess_g3d2",
"body": "mess_g3d2$0",
"description": "mess_g3d2" 
},
"mess_gd": {
"prefix": "mess_gd",
"body": "mess_gd$0",
"description": "mess_gd" 
},
"mess_gd2": {
"prefix": "mess_gd2",
"body": "mess_gd2$0",
"description": "mess_gd2" 
},
"mess_like": {
"prefix": "mess_like",
"body": "${1:out = }mess_like(${2:parm}, ${3:ys}, ${4:xs}, ${5:ymat})$0",
"description": "function out = mess_like(parm,ys,xs,ymat);" 
},
"messv_g3": {
"prefix": "messv_g3",
"body": "${1:results = }messv_g3(${2:y}, ${3:x}, ${4:options}, ${5:ndraw}, ${6:nomit}, ${7:prior}, ${8:start})$0",
"description": "function results = messv_g3(y,x,options,ndraw,nomit,prior,start)" 
},
"messv_g3d": {
"prefix": "messv_g3d",
"body": "messv_g3d$0",
"description": "messv_g3d" 
},
"messv_g3d2": {
"prefix": "messv_g3d2",
"body": "messv_g3d2$0",
"description": "messv_g3d2" 
},
"prt_mess": {
"prefix": "prt_mess",
"body": "prt_mess(${2:results}, ${3:vnames}, ${4:fid})$0",
"description": "function prt_mess(results,vnames,fid)" 
},
"demosarfe": {
"prefix": "demosarfe",
"body": "demosarfe$0",
"description": "demosarfe" 
},
"demosemfe": {
"prefix": "demosemfe",
"body": "demosemfe$0",
"description": "demosemfe" 
},
"f2_sarpanel": {
"prefix": "f2_sarpanel",
"body": "${1:llike = }f2_sarpanel(${2:parm}, ${3:y}, ${4:x}, ${5:W}, ${6:detval}, ${7:T})$0",
"description": "function llike = f2_sarpanel(parm,y,x,W,detval,T)" 
},
"f2_sempanel": {
"prefix": "f2_sempanel",
"body": "${1:llike = }f2_sempanel(${2:parm}, ${3:y}, ${4:x}, ${5:W}, ${6:detval}, ${7:T})$0",
"description": "function llike = f2_sempanel(parm,y,x,W,detval,T)" 
},
"f_sarpanel": {
"prefix": "f_sarpanel",
"body": "${1:llike = }f_sarpanel(${2:rho}, ${3:detval}, ${4:epe0}, ${5:eped}, ${6:epe0d}, ${7:n}, ${8:T})$0",
"description": "function llike = f_sarpanel(rho,detval,epe0,eped,epe0d,n,T)" 
},
"f_sempanel": {
"prefix": "f_sempanel",
"body": "${1:lik = }f_sempanel(${2:rho}, ${3:eD}, ${4:W}, ${5:detval}, ${6:T})$0",
"description": "function lik = f_sempanel(rho,eD,W,detval,T)" 
},
"prt_sp": {
"prefix": "prt_sp",
"body": "prt_sp(${2:results}, ${3:vnames}, ${4:fid})$0",
"description": "function prt_sp(results,vnames,fid)" 
},
"sar_panel": {
"prefix": "sar_panel",
"body": "${1:results = }sar_panel(${2:y}, ${3:x}, ${4:W}, ${5:T}, ${6:info})$0",
"description": "function results = sar_panel(y,x,W,T,info)" 
},
"sem_panel": {
"prefix": "sem_panel",
"body": "${1:results = }sem_panel(${2:y}, ${3:x}, ${4:W}, ${5:T}, ${6:info})$0",
"description": "function results = sem_panel(y,x,W,T,info)" 
},
"f2_sac": {
"prefix": "f2_sac",
"body": "${1:llike = }f2_sac(${2:parm}, ${3:y}, ${4:x}, ${5:W1}, ${6:W2}, ${7:det1}, ${8:det2})$0",
"description": "function llike = f2_sac(parm,y,x,W1,W2,det1,det2)" 
},
"f_sac": {
"prefix": "f_sac",
"body": "${1:llike = }f_sac(${2:parm}, ${3:y}, ${4:x}, ${5:W1}, ${6:W2}, ${7:det1}, ${8:det2})$0",
"description": "function llike = f_sac(parm,y,x,W1,W2,det1,det2)" 
},
"prt_sac": {
"prefix": "prt_sac",
"body": "prt_sac(${2:results}, ${3:vnames}, ${4:fid})$0",
"description": "function prt_sac(results,vnames,fid)" 
},
"sac": {
"prefix": "sac",
"body": "${1:results = }sac(${2:y}, ${3:x}, ${4:W1}, ${5:W2}, ${6:info})$0",
"description": "function results = sac(y,x,W1,W2,info)" 
},
"sac_d": {
"prefix": "sac_d",
"body": "sac_d$0",
"description": "sac_d" 
},
"sac_d2": {
"prefix": "sac_d2",
"body": "sac_d2$0",
"description": "sac_d2" 
},
"sac_d3": {
"prefix": "sac_d3",
"body": "sac_d3$0",
"description": "sac_d3" 
},
"beta_prior": {
"prefix": "beta_prior",
"body": "${1:out = }beta_prior(${2:rvec}, ${3:a1}, ${4:a2})$0",
"description": "function out = beta_prior(rvec,a1,a2)" 
},
"compare_weights2": {
"prefix": "compare_weights2",
"body": "compare_weights2$0",
"description": "compare_weights2" 
},
"f2_sar": {
"prefix": "f2_sar",
"body": "${1:llike = }f2_sar(${2:parm}, ${3:y}, ${4:x}, ${5:W}, ${6:detval})$0",
"description": "function llike = f2_sar(parm,y,x,W,detval)" 
},
"f_sar": {
"prefix": "f_sar",
"body": "${1:llike = }f_sar(${2:rho}, ${3:detval}, ${4:epe0}, ${5:eped}, ${6:epe0d}, ${7:n})$0",
"description": "function llike = f_sar(rho,detval,epe0,eped,epe0d,n)" 
},
"plt_sar": {
"prefix": "plt_sar",
"body": "plt_sar(${2:results}, ${3:vnames})$0",
"description": "function plt_sar(results,vnames)" 
},
"prt_bmas": {
"prefix": "prt_bmas",
"body": "prt_bmas(${2:results}, ${3:vnames}, ${4:fid})$0",
"description": "function prt_bmas(results,vnames,fid)" 
},
"prt_sar": {
"prefix": "prt_sar",
"body": "prt_sar(${2:results}, ${3:vnames}, ${4:fid})$0",
"description": "function prt_sar(results,vnames,fid)" 
},
"sar": {
"prefix": "sar",
"body": "${1:results = }sar(${2:y}, ${3:x}, ${4:W}, ${5:info})$0",
"description": "function results = sar(y,x,W,info)" 
},
"sar_c": {
"prefix": "sar_c",
"body": "${1:results = }sar_c(${2:y}, ${3:x}, ${4:W}, ${5:prior})$0",
"description": "function results = sar_c(y,x,W,prior)" 
},
"sar_d": {
"prefix": "sar_d",
"body": "sar_d$0",
"description": "sar_d" 
},
"sar_d2": {
"prefix": "sar_d2",
"body": "sar_d2$0",
"description": "sar_d2" 
},
"sar_d3": {
"prefix": "sar_d3",
"body": "sar_d3$0",
"description": "sar_d3" 
},
"sar_g": {
"prefix": "sar_g",
"body": "${1:results = }sar_g(${2:y}, ${3:x}, ${4:W}, ${5:ndraw}, ${6:nomit}, ${7:prior})$0",
"description": "function results = sar_g(y,x,W,ndraw,nomit,prior)" 
},
"sar_gcbma": {
"prefix": "sar_gcbma",
"body": "${1:results = }sar_gcbma(${2:y}, ${3:x}, ${4:W}, ${5:ndraw}, ${6:prior})$0",
"description": "function results = sar_gcbma(y,x,W,ndraw,prior)" 
},
"sar_gd": {
"prefix": "sar_gd",
"body": "sar_gd$0",
"description": "sar_gd" 
},
"sar_gd2": {
"prefix": "sar_gd2",
"body": "sar_gd2$0",
"description": "sar_gd2" 
},
"sar_gd3": {
"prefix": "sar_gd3",
"body": "sar_gd3$0",
"description": "sar_gd3" 
},
"sar_gd4": {
"prefix": "sar_gd4",
"body": "sar_gd4$0",
"description": "sar_gd4" 
},
"sar_gv": {
"prefix": "sar_gv",
"body": "${1:results = }sar_gv(${2:y}, ${3:x}, ${4:W}, ${5:ndraw}, ${6:nomit}, ${7:prior})$0",
"description": "function results = sar_gv(y,x,W,ndraw,nomit,prior)" 
},
"sar_gvd": {
"prefix": "sar_gvd",
"body": "sar_gvd$0",
"description": "sar_gvd" 
},
"sar_timing": {
"prefix": "sar_timing",
"body": "sar_timing$0",
"description": "sar_timing" 
},
"sarp_g": {
"prefix": "sarp_g",
"body": "${1:results = }sarp_g(${2:y}, ${3:x}, ${4:W}, ${5:ndraw}, ${6:nomit}, ${7:prior})$0",
"description": "function results = sarp_g(y,x,W,ndraw,nomit,prior)" 
},
"sarp_gd": {
"prefix": "sarp_gd",
"body": "sarp_gd$0",
"description": "sarp_gd" 
},
"sarp_gd2": {
"prefix": "sarp_gd2",
"body": "sarp_gd2$0",
"description": "sarp_gd2" 
},
"sarp_gd3": {
"prefix": "sarp_gd3",
"body": "sarp_gd3$0",
"description": "sarp_gd3" 
},
"sart_g": {
"prefix": "sart_g",
"body": "${1:results = }sart_g(${2:y}, ${3:x}, ${4:W}, ${5:ndraw}, ${6:nomit}, ${7:prior})$0",
"description": "function results = sart_g(y,x,W,ndraw,nomit,prior)" 
},
"sart_gd": {
"prefix": "sart_gd",
"body": "sart_gd$0",
"description": "sart_gd" 
},
"sart_gd2": {
"prefix": "sart_gd2",
"body": "sart_gd2$0",
"description": "sart_gd2" 
},
"f_sdm": {
"prefix": "f_sdm",
"body": "${1:llike = }f_sdm(${2:rho}, ${3:y}, ${4:x}, ${5:W}, ${6:detval})$0",
"description": "function llike = f_sdm(rho,y,x,W,detval)" 
},
"plt_sdm": {
"prefix": "plt_sdm",
"body": "plt_sdm(${2:results}, ${3:vnames})$0",
"description": "function plt_sdm(results,vnames)" 
},
"prt_sdm": {
"prefix": "prt_sdm",
"body": "prt_sdm(${2:results}, ${3:vnames}, ${4:fid})$0",
"description": "function prt_sdm(results,vnames,fid)" 
},
"sdm": {
"prefix": "sdm",
"body": "${1:results = }sdm(${2:y}, ${3:x}, ${4:W}, ${5:info})$0",
"description": "function results = sdm(y,x,W,info)" 
},
"sdm_d": {
"prefix": "sdm_d",
"body": "sdm_d$0",
"description": "sdm_d" 
},
"sdm_d2": {
"prefix": "sdm_d2",
"body": "sdm_d2$0",
"description": "sdm_d2" 
},
"sdm_g": {
"prefix": "sdm_g",
"body": "${1:results = }sdm_g(${2:y}, ${3:x}, ${4:W}, ${5:ndraw}, ${6:nomit}, ${7:prior})$0",
"description": "function results = sdm_g(y,x,W,ndraw,nomit,prior)" 
},
"sdm_gd": {
"prefix": "sdm_gd",
"body": "sdm_gd$0",
"description": "sdm_gd" 
},
"sdm_gd2": {
"prefix": "sdm_gd2",
"body": "sdm_gd2$0",
"description": "sdm_gd2" 
},
"sdmp_g": {
"prefix": "sdmp_g",
"body": "${1:results = }sdmp_g(${2:y}, ${3:x}, ${4:W}, ${5:ndraw}, ${6:nomit}, ${7:prior})$0",
"description": "function results = sdmp_g(y,x,W,ndraw,nomit,prior)" 
},
"sdmp_gd": {
"prefix": "sdmp_gd",
"body": "sdmp_gd$0",
"description": "sdmp_gd" 
},
"sdmp_gd2": {
"prefix": "sdmp_gd2",
"body": "sdmp_gd2$0",
"description": "sdmp_gd2" 
},
"sdmt_g": {
"prefix": "sdmt_g",
"body": "${1:results = }sdmt_g(${2:y}, ${3:x}, ${4:W}, ${5:ndraw}, ${6:nomit}, ${7:prior})$0",
"description": "function results = sdmt_g(y,x,W,ndraw,nomit,prior)" 
},
"sdmt_gd": {
"prefix": "sdmt_gd",
"body": "sdmt_gd$0",
"description": "sdmt_gd" 
},
"sdmt_gd2": {
"prefix": "sdmt_gd2",
"body": "sdmt_gd2$0",
"description": "sdmt_gd2" 
},
"f2_sem": {
"prefix": "f2_sem",
"body": "${1:llike = }f2_sem(${2:parm}, ${3:y}, ${4:x}, ${5:W}, ${6:detval})$0",
"description": "function llike = f2_sem(parm,y,x,W,detval);" 
},
"f_sem": {
"prefix": "f_sem",
"body": "${1:lik = }f_sem(${2:rho}, ${3:e}, ${4:W}, ${5:detval})$0",
"description": "function lik = f_sem(rho,e,W,detval)" 
},
"prt_sem": {
"prefix": "prt_sem",
"body": "prt_sem(${2:results}, ${3:vnames}, ${4:fid})$0",
"description": "function prt_sem(results,vnames,fid)" 
},
"sem": {
"prefix": "sem",
"body": "${1:results = }sem(${2:y}, ${3:x}, ${4:W}, ${5:info})$0",
"description": "function results = sem(y,x,W,info)" 
},
"sem_d": {
"prefix": "sem_d",
"body": "sem_d$0",
"description": "sem_d" 
},
"sem_d2": {
"prefix": "sem_d2",
"body": "sem_d2$0",
"description": "sem_d2" 
},
"sem_g": {
"prefix": "sem_g",
"body": "${1:results = }sem_g(${2:y}, ${3:x}, ${4:W}, ${5:ndraw}, ${6:nomit}, ${7:prior})$0",
"description": "function results = sem_g(y,x,W,ndraw,nomit,prior)" 
},
"sem_gd": {
"prefix": "sem_gd",
"body": "sem_gd$0",
"description": "sem_gd" 
},
"sem_gd2": {
"prefix": "sem_gd2",
"body": "sem_gd2$0",
"description": "sem_gd2" 
},
"sem_timing": {
"prefix": "sem_timing",
"body": "sem_timing$0",
"description": "sem_timing" 
},
"semp_g": {
"prefix": "semp_g",
"body": "${1:results = }semp_g(${2:y}, ${3:x}, ${4:W}, ${5:ndraw}, ${6:nomit}, ${7:prior})$0",
"description": "function results = sem_g(y,x,W,ndraw,nomit,prior)" 
},
"semp_gd": {
"prefix": "semp_gd",
"body": "semp_gd$0",
"description": "semp_gd" 
},
"semp_gd2": {
"prefix": "semp_gd2",
"body": "semp_gd2$0",
"description": "semp_gd2" 
},
"test_bayes": {
"prefix": "test_bayes",
"body": "test_bayes$0",
"description": "test_bayes" 
},
"test_bayes2": {
"prefix": "test_bayes2",
"body": "test_bayes2$0",
"description": "test_bayes2" 
},
"test_bayes3": {
"prefix": "test_bayes3",
"body": "test_bayes3$0",
"description": "test_bayes3" 
},
"test_bayes4": {
"prefix": "test_bayes4",
"body": "test_bayes4$0",
"description": "test_bayes4" 
},
"test_bayes5": {
"prefix": "test_bayes5",
"body": "test_bayes5$0",
"description": "test_bayes5" 
},
"test_maxlik": {
"prefix": "test_maxlik",
"body": "test_maxlik$0",
"description": "test_maxlik" 
},
"prt_semip": {
"prefix": "prt_semip",
"body": "prt_semip(${2:results}, ${3:vnames}, ${4:fid})$0",
"description": "function prt_semip(results,vnames,fid)" 
},
"semip_g": {
"prefix": "semip_g",
"body": "${1:results = }semip_g(${2:y}, ${3:x}, ${4:W}, ${5:m}, ${6:mobs}, ${7:ndraw}, ${8:nomit}, ${9:prior})$0",
"description": "function results = semip_g(y,x,W,m,mobs,ndraw,nomit,prior)" 
},
"semip_gc": {
"prefix": "semip_gc",
"body": "${1:results = }semip_gc(${2:y}, ${3:x}, ${4:W}, ${5:m}, ${6:mobs}, ${7:ndraw}, ${8:nomit}, ${9:prior})$0",
"description": "function results = semip_gc(y,x,W,m,mobs,ndraw,nomit,prior)" 
},
"semip_gcd": {
"prefix": "semip_gcd",
"body": "semip_gcd$0",
"description": "semip_gcd" 
},
"semip_gcd2": {
"prefix": "semip_gcd2",
"body": "semip_gcd2$0",
"description": "semip_gcd2" 
},
"semip_gd": {
"prefix": "semip_gd",
"body": "semip_gd$0",
"description": "semip_gd" 
},
"semip_gd2": {
"prefix": "semip_gd2",
"body": "semip_gd2$0",
"description": "semip_gd2" 
},
"lmerror": {
"prefix": "lmerror",
"body": "${1:result = }lmerror(${2:y}, ${3:x}, ${4:W})$0",
"description": "function result = lmerror(y,x,W);" 
},
"lmerror_d": {
"prefix": "lmerror_d",
"body": "lmerror_d$0",
"description": "lmerror_d" 
},
"lmsar": {
"prefix": "lmsar",
"body": "${1:result = }lmsar(${2:y}, ${3:x}, ${4:W1}, ${5:W2}, ${6:lmin}, ${7:lmax})$0",
"description": "function result = lmsar(y,x,W1,W2,lmin,lmax);" 
},
"lmsar_d": {
"prefix": "lmsar_d",
"body": "lmsar_d$0",
"description": "lmsar_d" 
},
"lratios": {
"prefix": "lratios",
"body": "${1:result = }lratios(${2:y}, ${3:x}, ${4:W}, ${5:res})$0",
"description": "function result = lratios(y,x,W,res);" 
},
"lratios_d": {
"prefix": "lratios_d",
"body": "lratios_d$0",
"description": "lratios_d" 
},
"moran": {
"prefix": "moran",
"body": "${1:result = }moran(${2:y}, ${3:x}, ${4:W})$0",
"description": "function result = moran(y,x,W);" 
},
"moran_d": {
"prefix": "moran_d",
"body": "moran_d$0",
"description": "moran_d" 
},
"plt_spat": {
"prefix": "plt_spat",
"body": "plt_spat(${2:results}, ${3:vnames})$0",
"description": "function plt_spat(results,vnames)" 
},
"prt_spat": {
"prefix": "prt_spat",
"body": "prt_spat(${2:results}, ${3:vnames}, ${4:fid})$0",
"description": "function prt_spat(results,vnames,fid)" 
},
"walds": {
"prefix": "walds",
"body": "${1:result = }walds(${2:y}, ${3:x}, ${4:W})$0",
"description": "function result = walds(y,x,W);" 
},
"walds_d": {
"prefix": "walds_d",
"body": "walds_d$0",
"description": "walds_d" 
},
"distance": {
"prefix": "distance",
"body": "${1:D = }distance(${2:xc}, ${3:yc})$0",
"description": "function D = distance(xc,yc)" 
},
"fdelw2": {
"prefix": "fdelw2",
"body": "${1:[wswdel, wwsdel, wmatdel] = }fdelw2(${2:xcoord}, ${3:ycoord})$0",
"description": "function [wswdel,wwsdel,wmatdel]=fdelw2(xcoord,ycoord)" 
},
"find_neighbors": {
"prefix": "find_neighbors",
"body": "${1:nnlist = }find_neighbors(${2:xc}, ${3:yc}, ${4:m})$0",
"description": "function nnlist = find_neighbors(xc,yc,m)" 
},
"find_neighborsd": {
"prefix": "find_neighborsd",
"body": "find_neighborsd$0",
"description": "find_neighborsd" 
},
"find_neighborsd2": {
"prefix": "find_neighborsd2",
"body": "find_neighborsd2$0",
"description": "find_neighborsd2" 
},
"find_nn": {
"prefix": "find_nn",
"body": "${1:nnlist = }find_nn(${2:xc}, ${3:yc}, ${4:m}, ${5:order})$0",
"description": "function nnlist = find_nn(xc,yc,m,order)" 
},
"find_nnd": {
"prefix": "find_nnd",
"body": "find_nnd$0",
"description": "find_nnd" 
},
"find_nnd2": {
"prefix": "find_nnd2",
"body": "find_nnd2$0",
"description": "find_nnd2" 
},
"fneighbors2": {
"prefix": "fneighbors2",
"body": "${1:nnlist = }fneighbors2(${2:d}, ${3:xcoord}, ${4:ycoord}, ${5:nnmax}, ${6:delorder})$0",
"description": "function nnlist = fneighbors2(d, xcoord, ycoord, nnmax, delorder)" 
},
"make_neighborsw": {
"prefix": "make_neighborsw",
"body": "${1:W = }make_neighborsw(${2:xc}, ${3:yc}, ${4:m})$0",
"description": "function W = make_neighborsw(xc,yc,m)" 
},
"make_neighborswd": {
"prefix": "make_neighborswd",
"body": "make_neighborswd$0",
"description": "make_neighborswd" 
},
"make_neighborswd2": {
"prefix": "make_neighborswd2",
"body": "make_neighborswd2$0",
"description": "make_neighborswd2" 
},
"make_nnw": {
"prefix": "make_nnw",
"body": "${1:W = }make_nnw(${2:xc}, ${3:yc}, ${4:m}, ${5:order})$0",
"description": "function W = make_nnw(xc,yc,m,order)" 
},
"make_nnwd": {
"prefix": "make_nnwd",
"body": "make_nnwd$0",
"description": "make_nnwd" 
},
"make_nnwd2": {
"prefix": "make_nnwd2",
"body": "make_nnwd2$0",
"description": "make_nnwd2" 
},
"normw": {
"prefix": "normw",
"body": "${1:W = }normw(${2:W})$0",
"description": "function W = normw(W)" 
},
"normw_d": {
"prefix": "normw_d",
"body": "normw_d$0",
"description": "normw_d" 
},
"normxy": {
"prefix": "normxy",
"body": "${1:[teast, tnorth] = }normxy(${2:east}, ${3:north})$0",
"description": "function [teast,tnorth] = normxy(east,north)" 
},
"pdweight": {
"prefix": "pdweight",
"body": "${1:g = }pdweight(${2:xcoord}, ${3:ycoord}, ${4:lower}, ${5:upper}, ${6:RowStdOpt})$0",
"description": "function g=pdweight(xcoord,ycoord,lower,upper,RowStdOpt);" 
},
"slag": {
"prefix": "slag",
"body": "${1:WW = }slag(${2:W}, ${3:p})$0",
"description": "function WW = slag(W,p)" 
},
"slag_d": {
"prefix": "slag_d",
"body": "slag_d$0",
"description": "slag_d" 
},
"xy2cont": {
"prefix": "xy2cont",
"body": "${1:[wswdel, wwsdel, wmatdel] = }xy2cont(${2:xc}, ${3:yc})$0",
"description": "function [wswdel,wwsdel,wmatdel]=xy2cont(xc,yc)" 
},
"xy2cont_d": {
"prefix": "xy2cont_d",
"body": "xy2cont_d$0",
"description": "xy2cont_d" 
},
"xy2cont_d2": {
"prefix": "xy2cont_d2",
"body": "xy2cont_d2$0",
"description": "xy2cont_d2" 
},
"xy2cont_d3": {
"prefix": "xy2cont_d3",
"body": "xy2cont_d3$0",
"description": "xy2cont_d3" 
},
"BFL_D": {
"prefix": "BFL_D",
"body": "BFL_D$0",
"description": "BFL_D" 
},
"Denton_uni": {
"prefix": "Denton_uni",
"body": "${1:res = }Denton_uni(${2:Y}, ${3:x}, ${4:ta}, ${5:d}, ${6:s})$0",
"description": "function res=denton_uni(Y,x,ta,d,s);" 
},
"aggreg": {
"prefix": "aggreg",
"body": "${1:C = }aggreg(${2:op1}, ${3:N}, ${4:s})$0",
"description": "function [C]=aggreg(op1,N,s)" 
},
"aggreg_test": {
"prefix": "aggreg_test",
"body": "${1:delta = }aggreg_test(${2:Y}, ${3:y}, ${4:ta}, ${5:s}, ${6:lim})$0",
"description": "function delta=aggreg_test(Y,y,ta,s,lim);" 
},
"aggreg_v": {
"prefix": "aggreg_v",
"body": "${1:c = }aggreg_v(${2:op1}, ${3:s})$0",
"description": "function [c]=aggreg_v(op1,s)" 
},
"bal": {
"prefix": "bal",
"body": "${1:yb = }bal(${2:y}, ${3:z})$0",
"description": "function yb = bal(y,z);" 
},
"bfl": {
"prefix": "bfl",
"body": "${1:res = }bfl(${2:Y}, ${3:ta}, ${4:d}, ${5:s})$0",
"description": "function res=bfl(Y,ta,d,s);" 
},
"calT": {
"prefix": "calT",
"body": "${1:T = }calT(${2:rex}, ${3:s}, ${4:n})$0",
"description": "function T = calT(rex,s,n);" 
},
"chowlin_V2": {
"prefix": "chowlin_V2",
"body": "${1:res = }chowlin(${2:Y}, ${3:x}, ${4:ta}, ${5:s}, ${6:type})$0",
"description": "function res=chowlin(Y,x,ta,s,type)" 
},
"chowlin_fix": {
"prefix": "chowlin_fix",
"body": "${1:res = }chowlin_fix(${2:Y}, ${3:x}, ${4:ta}, ${5:s}, ${6:type}, ${7:rho})$0",
"description": "function res=chowlin_fix(Y,x,ta,s,type,rho)" 
},
"conta": {
"prefix": "conta",
"body": "${1:r = }conta(${2:aux}, ${3:f})$0",
"description": "function r=conta(aux,f);" 
},
"denton_V2": {
"prefix": "denton_V2",
"body": "${1:res = }denton(${2:Y}, ${3:x}, ${4:z}, ${5:ta}, ${6:s}, ${7:d})$0",
"description": "function res = denton(Y,x,z,ta,s,d);" 
},
"denton_uni_prop_V2": {
"prefix": "denton_uni_prop_V2",
"body": "${1:res = }denton_uni_prop(${2:Y}, ${3:x}, ${4:ta}, ${5:d}, ${6:s})$0",
"description": "function res=denton_uni_prop(Y,x,ta,d,s);" 
},
"desvec": {
"prefix": "desvec",
"body": "${1:Z = }desvec(${2:Zv}, ${3:M})$0",
"description": "function Z = desvec(Zv,M);" 
},
"dif": {
"prefix": "dif",
"body": "${1:D = }dif(${2:d}, ${3:n})$0",
"description": "function [D]=dif(d,n);" 
},
"difonzo": {
"prefix": "difonzo",
"body": "${1:res = }difonzo(${2:Y}, ${3:x}, ${4:z}, ${5:ta}, ${6:s}, ${7:type}, ${8:f})$0",
"description": "function res = difonzo(Y,x,z,ta,s,type,f);" 
},
"fernandez": {
"prefix": "fernandez",
"body": "${1:res = }fernandez(${2:Y}, ${3:x}, ${4:ta}, ${5:s})$0",
"description": "function res=fernandez(Y,x,ta,s)" 
},
"guerrero": {
"prefix": "guerrero",
"body": "${1:res = }guerrero(${2:Y}, ${3:x}, ${4:ta}, ${5:s}, ${6:rexw}, ${7:rexd})$0",
"description": "function res=guerrero(Y,x,ta,s,rexw,rexd);" 
},
"inter_xls": {
"prefix": "inter_xls",
"body": "${1:y = }inter_xls(${2:Y}, ${3:x}, ${4:ta}, ${5:s}, ${6:type}, ${7:ip}, ${8:d}, ${9:flax1}, ${10:flax2}, ${11:file_name})$0",
"description": "function y = inter_xls(Y,x,ta,s,type,ip,d,flax1,flax2,file_name);" 
},
"inter_xls_d": {
"prefix": "inter_xls_d",
"body": "inter_xls_d$0",
"description": "inter_xls_d" 
},
"litterman_V2": {
"prefix": "litterman_V2",
"body": "${1:res = }litterman(${2:Y}, ${3:x}, ${4:ta}, ${5:s}, ${6:type})$0",
"description": "function res=litterman(Y,x,ta,s,type)" 
},
"litterman_fix": {
"prefix": "litterman_fix",
"body": "${1:res = }litterman_fix(${2:Y}, ${3:x}, ${4:ta}, ${5:s}, ${6:type}, ${7:mu})$0",
"description": "function res=litterman_fix(Y,x,ta,s,type,mu)" 
},
"minter_xls": {
"prefix": "minter_xls",
"body": "${1:y = }minter_xls(${2:Y}, ${3:x}, ${4:z}, ${5:ta}, ${6:s}, ${7:f}, ${8:type}, ${9:d}, ${10:flax1}, ${11:flax2})$0",
"description": "function y = minter_xls(Y,x,z,ta,s,f,type,d,flax1,flax2);" 
},
"movingsum": {
"prefix": "movingsum",
"body": "${1:S = }movingsum(${2:h}, ${3:n})$0",
"description": "function [S]=movingsum(h,n);" 
},
"mtasa": {
"prefix": "mtasa",
"body": "${1:gZ = }mtasa(${2:Z}, ${3:s})$0",
"description": "function gZ = mtasa(Z,s);" 
},
"mtd_plot": {
"prefix": "mtd_plot",
"body": "mtd_plot(${2:res}, ${3:z})$0",
"description": "function []=mtd_plot(res,z)" 
},
"mtd_print": {
"prefix": "mtd_print",
"body": "mtd_print(${2:res}, ${3:file_sal})$0",
"description": "function []=mtd_print(res,file_sal)" 
},
"numpar": {
"prefix": "numpar",
"body": "${1:r = }numpar(${2:rex})$0",
"description": "function r=numpar(rex);" 
},
"rossi": {
"prefix": "rossi",
"body": "${1:res = }rossi(${2:Y}, ${3:x}, ${4:z}, ${5:ta}, ${6:s}, ${7:type})$0",
"description": "function res = rossi(Y,x,z,ta,s,type);" 
},
"ssc": {
"prefix": "ssc",
"body": "${1:res = }ssc(${2:Y}, ${3:x}, ${4:ta}, ${5:s}, ${6:type})$0",
"description": "function res=ssc(Y,x,ta,s,type)" 
},
"ssc_fix": {
"prefix": "ssc_fix",
"body": "${1:res = }ssc_fix(${2:Y}, ${3:x}, ${4:ta}, ${5:s}, ${6:type}, ${7:phi})$0",
"description": "function res=ssc_fix(Y,x,ta,s,type,phi)" 
},
"sw": {
"prefix": "sw",
"body": "${1:res = }sw(${2:Y}, ${3:ta}, ${4:d}, ${5:s}, ${6:v})$0",
"description": "function res = sw(Y,ta,d,s,v);" 
},
"tasa_V2": {
"prefix": "tasa_V2",
"body": "${1:gz = }tasa(${2:z}, ${3:s})$0",
"description": "function gz = tasa(z,s);" 
},
"td_print": {
"prefix": "td_print",
"body": "td_print(${2:res}, ${3:file_sal}, ${4:op1})$0",
"description": "function []=td_print(res,file_sal,op1)" 
},
"td_print_G": {
"prefix": "td_print_G",
"body": "td_print_G(${2:res}, ${3:file_sal}, ${4:op1})$0",
"description": "function []=td_print_G(res,file_sal,op1)" 
},
"temporal_agg": {
"prefix": "temporal_agg",
"body": "${1:y = }temporal_agg(${2:z}, ${3:op1}, ${4:s})$0",
"description": "function [y]=temporal_agg(z,op1,s)" 
},
"vdp": {
"prefix": "vdp",
"body": "${1:z = }vdp(${2:y}, ${3:sigma}, ${4:A})$0",
"description": "function z = vdp(y,sigma,A);" 
},
"ucsd_garch_demo": {
"prefix": "ucsd_garch_demo",
"body": "ucsd_garch_demo$0",
"description": "ucsd_garch_demo" 
},
"block_bootstrap_V2": {
"prefix": "block_bootstrap_V2",
"body": "${1:[bsdata, indexes] = }block_bootstrap(${2:data}, ${3:w}, ${4:B})$0",
"description": "function [bsdata, indexes]=block_bootstrap(data,w,B);" 
},
"bsds_V2": {
"prefix": "bsds_V2",
"body": "${1:[c, u, l] = }bsds(${2:bench}, ${3:models}, ${4:B}, ${5:w}, ${6:boot})$0",
"description": "function [c,u,l]=bsds(bench,models,B,w,boot)" 
},
"bsds_studentized": {
"prefix": "bsds_studentized",
"body": "${1:[c, u, l] = }bsds_studentized(${2:bench}, ${3:models}, ${4:B}, ${5:w}, ${6:boot})$0",
"description": "function [c,u,l]=bsds_studentized(bench,models,B,w,boot)" 
},
"cont_bootstrap": {
"prefix": "cont_bootstrap",
"body": "${1:[bsdata, indexes] = }cont_bootstrap(${2:data}, ${3:w}, ${4:B})$0",
"description": "function [bsdata, indexes]=cont_bootstrap(data,w,B);" 
},
"stationary_bootstrap_V2": {
"prefix": "stationary_bootstrap_V2",
"body": "${1:[bsdata, indexes] = }stationary_bootstrap(${2:data}, ${3:w}, ${4:B})$0",
"description": "function [bsdata, indexes]=stationary_bootstrap(data,w,B);" 
},
"exppowcdf": {
"prefix": "exppowcdf",
"body": "${1:cdf = }exppowcdf(${2:x}, ${3:nu})$0",
"description": "function cdf = exppowcdf(x,nu)" 
},
"exppowpdf": {
"prefix": "exppowpdf",
"body": "${1:prob = }exppowpdf(${2:x}, ${3:nu})$0",
"description": "function prob = exppowpdf(x,nu)" 
},
"exppowrnd": {
"prefix": "exppowrnd",
"body": "${1:random = }exppowrnd(${2:x}, ${3:nu})$0",
"description": "function random = exppowrnd(x,nu)" 
},
"gedcdf_V2": {
"prefix": "gedcdf_V2",
"body": "${1:cdf = }gedcdf(${2:x}, ${3:nu})$0",
"description": "function cdf = gedcdf(x,nu)" 
},
"gedinv_V2": {
"prefix": "gedinv_V2",
"body": "${1:num = }gedinv(${2:x}, ${3:nu})$0",
"description": "function num = gedinv(x,nu)" 
},
"gedpdf_V2": {
"prefix": "gedpdf_V2",
"body": "${1:prob = }gedpdf(${2:x}, ${3:nu})$0",
"description": "function prob = gedpdf(x,nu)" 
},
"gedrnd_V2": {
"prefix": "gedrnd_V2",
"body": "${1:random = }gedrnd(${2:n}, ${3:nu})$0",
"description": "function random = gedrnd(n,nu)" 
},
"skewtdis_cdf": {
"prefix": "skewtdis_cdf",
"body": "${1:cdf = }skewtdis_cdf(${2:x}, ${3:nu}, ${4:lambda})$0",
"description": "function cdf = skewtdis_cdf(x, nu, lambda)" 
},
"skewtdis_inv": {
"prefix": "skewtdis_inv",
"body": "${1:inv = }skewtdis_inv(${2:u}, ${3:nu}, ${4:lambda})$0",
"description": "function inv = skewtdis_inv(u, nu, lambda)" 
},
"skewtdis_pdf": {
"prefix": "skewtdis_pdf",
"body": "${1:pdf = }skewtdis_pdf(${2:x}, ${3:nu}, ${4:lambda})$0",
"description": "function pdf = skewtdis_pdf(x, nu, lambda)" 
},
"skewtdis_rnd": {
"prefix": "skewtdis_rnd",
"body": "${1:out1 = }skewtdis_rnd(${2:nu}, ${3:lambda}, ${4:T}, ${5:state})$0",
"description": "function out1 = skewtdis_rnd(nu,lambda,T,state)" 
},
"stdtdis_cdf": {
"prefix": "stdtdis_cdf",
"body": "${1:F = }stdtdis_cdf(${2:x}, ${3:n})$0",
"description": "function F = stdtdis_cdf (x, n)" 
},
"stdtdis_pdf": {
"prefix": "stdtdis_pdf",
"body": "${1:pdf = }stdtdis_pdf(${2:x}, ${3:n})$0",
"description": "function pdf = stdtdis_pdf(x, n)" 
},
"stdtdis_rnd": {
"prefix": "stdtdis_rnd",
"body": "${1:t = }stdtdis_rnd(${2:n}, ${3:df})$0",
"description": "function t = stdtdis_rnd(n,df)" 
},
"armaxfilter_V2": {
"prefix": "armaxfilter_V2",
"body": "${1:[parameters, errors, LLF, SEregression, stderrors, robustSE, scores, likelihoods] = }armaxfilter(${2:y}, ${3:constant}, ${4:ar}, ${5:ma}, ${6:x}, ${7:options})$0",
"description": "function [parameters, errors, LLF , SEregression,stderrors, robustSE,   scores, likelihoods]=armaxfilter(y,constant,ar,ma,x,options)" 
},
"armaxfilter_likelihood_V2": {
"prefix": "armaxfilter_likelihood_V2",
"body": "${1:[LLF, errors, likelihoods] = }armaxfilter_likelihood(${2:parameters}, ${3:regressand}, ${4:regressors}, ${5:ar}, ${6:ma}, ${7:tau})$0",
"description": "function [LLF, errors, likelihoods] = armaxfilter_likelihood(parameters , regressand , regressors, ar , ma, tau)" 
},
"armaxsimulate": {
"prefix": "armaxsimulate",
"body": "${1:y = }armaxsimulate(${2:T}, ${3:ar}, ${4:ma}, ${5:const}, ${6:ARparams}, ${7:MAparams}, ${8:Xparams}, ${9:X})$0",
"description": "function y=armaxsimulate(T,ar,ma,const,ARparams,MAparams,Xparams,X);" 
},
"egarch_V2": {
"prefix": "egarch_V2",
"body": "${1:[parameters, likelihood, stderrors, robustSE, ht, scores] = }egarch(${2:data}, ${3:p}, ${4:o}, ${5:q}, ${6:errors}, ${7:options}, ${8:startingvals})$0",
"description": "function [parameters, likelihood, stderrors, robustSE, ht, scores]=egarch(data,p,o,q,errors, options, startingvals);" 
},
"egarchEstLikelihood": {
"prefix": "egarchEstLikelihood",
"body": "${1:[LLF, h, likelihoods] = }egarchEstLikelihood(${2:parameters}, ${3:data}, ${4:p}, ${5:o}, ${6:q}, ${7:T}, ${8:stdEstimate}, ${9:errortype})$0",
"description": "function [LLF, h, likelihoods]= egarchlikelihood(parameters,data,p,o,q,T,stdEstimate,errortype);" 
},
"egarchX": {
"prefix": "egarchX",
"body": "${1:[parameters, likelihood, stderrors, robustSE, ht, scores] = }egarchX(${2:data}, ${3:p}, ${4:o}, ${5:q}, ${6:errors}, ${7:X}, ${8:options}, ${9:startingvals})$0",
"description": "function [parameters, likelihood, stderrors, robustSE, ht, scores]=egarchX(data,p,o,q,errors, X,options, startingvals);" 
},
"egarchXEstLikelihood": {
"prefix": "egarchXEstLikelihood",
"body": "${1:[LLF, h, likelihoods] = }egarchXEstLikelihood(${2:parameters}, ${3:data}, ${4:p}, ${5:o}, ${6:q}, ${7:T}, ${8:X}, ${9:stdEstimate}, ${10:errortype})$0",
"description": "function [LLF, h, likelihoods]= egarchXestlikelihood(parameters,data,p,o,q,T,X,stdEstimate,errortype);" 
},
"egarchXLikelihood": {
"prefix": "egarchXLikelihood",
"body": "${1:[LLF, h, likelihoods] = }egarchXLikelihood(${2:parameters}, ${3:data}, ${4:p}, ${5:o}, ${6:q}, ${7:T}, ${8:X}, ${9:stdEstimate}, ${10:errortype})$0",
"description": "function [LLF, h, likelihoods]= egarchXlikelihood(parameters,data,p,o,q,T,X,stdEstimate,errortype);" 
},
"egarchXcore": {
"prefix": "egarchXcore",
"body": "${1:h = }egarchXcore(${2:data}, ${3:parameters}, ${4:stdEstimate}, ${5:p}, ${6:o}, ${7:q}, ${8:m}, ${9:T}, ${10:X})$0",
"description": "function h=egarchcore(data, parameters, stdEstimate,p, o, q ,m , T,X);" 
},
"egarchcore": {
"prefix": "egarchcore",
"body": "${1:h = }egarchcore(${2:data}, ${3:parameters}, ${4:stdEstimate}, ${5:p}, ${6:o}, ${7:q}, ${8:m}, ${9:T})$0",
"description": "function h=egarchcore(data, parameters, stdEstimate,p, o, q ,m , T);" 
},
"egarchlikelihood": {
"prefix": "egarchlikelihood",
"body": "${1:[LLF, h, likelihoods] = }egarchlikelihood(${2:parameters}, ${3:data}, ${4:p}, ${5:o}, ${6:q}, ${7:T}, ${8:stdEstimate}, ${9:errortype})$0",
"description": "function [LLF, h, likelihoods]= egarchlikelihood(parameters,data,p,o,q,T,stdEstimate,errortype);" 
},
"egarchsimulate": {
"prefix": "egarchsimulate",
"body": "${1:[simulatedata, H] = }egarchsimulate(${2:t}, ${3:parameters}, ${4:p}, ${5:q}, ${6:errors})$0",
"description": "function [simulatedata, H] = egarchsimulate(t,parameters,p,q, errors)" 
},
"fattailed_garch": {
"prefix": "fattailed_garch",
"body": "${1:[parameters, likelihood, stderrors, robustSE, ht, scores] = }fattailed_garch(${2:data}, ${3:p}, ${4:q}, ${5:errors}, ${6:startingvals}, ${7:options})$0",
"description": "function [parameters, likelihood, stderrors, robustSE, ht, scores] = fattailed_garch(data , p , q , errors, startingvals, options)" 
},
"fattailed_garch2": {
"prefix": "fattailed_garch2",
"body": "${1:[parameters, likelihood] = }fattailed_garch2(${2:data}, ${3:p}, ${4:q}, ${5:breakpt}, ${6:startingvals}, ${7:options})$0",
"description": "function [parameters, likelihood] = fattailed_garch2(data , p , q , breakpt , startingvals, options)" 
},
"fattailed_garchlikelihood": {
"prefix": "fattailed_garchlikelihood",
"body": "${1:[LLF, h, likelihoods] = }fattailed_garchlikelihood(${2:parameters}, ${3:data}, ${4:p}, ${5:q}, ${6:errortype}, ${7:stdEstimate}, ${8:T})$0",
"description": "function [LLF, h, likelihoods] = fattailed_garchlikelihood(parameters , data , p , q, errortype, stdEstimate, T)" 
},
"fattailed_garchlikelihood2": {
"prefix": "fattailed_garchlikelihood2",
"body": "${1:[LLF, h, likelihoods] = }fattailed_garchlikelihood2(${2:parameters}, ${3:data}, ${4:p}, ${5:q}, ${6:errortype}, ${7:stdEstimate}, ${8:stdEstimate2}, ${9:T}, ${10:breakpt})$0",
"description": "function [LLF, h, likelihoods] = fattailed_garchlikelihood(parameters , data , p , q, errortype, stdEstimate, stdEstimate2, T, breakpt)" 
},
"fattailed_garchsimulate": {
"prefix": "fattailed_garchsimulate",
"body": "${1:[simulatedata, H] = }fattailed_garchsimulate(${2:parameters}, ${3:p}, ${4:q}, ${5:t}, ${6:errors})$0",
"description": "function [simulatedata, H] = fattailed_garchsimulate(parameters,p,q,t,errors)" 
},
"garchcore": {
"prefix": "garchcore",
"body": "${1:h = }garchcore(${2:data}, ${3:parameters}, ${4:stdEstimate}, ${5:p}, ${6:q}, ${7:m}, ${8:T})$0",
"description": "function h=garchcore(data,parameters,stdEstimate,p,q,m,T);" 
},
"garchcore2": {
"prefix": "garchcore2",
"body": "${1:h = }garchcore2(${2:data}, ${3:parameters}, ${4:stdEstimate}, ${5:stdEstimate2}, ${6:p}, ${7:q}, ${8:m}, ${9:T}, ${10:breakpt})$0",
"description": "function h=garchcore2(data,parameters,stdEstimate,stdEstimate2,p,q,m,T,breakpt);" 
},
"garcheviewscon": {
"prefix": "garcheviewscon",
"body": "${1:[c, ceq] = }garcheviewscon(${2:parameters}, ${3:data}, ${4:p}, ${5:q}, ${6:m}, ${7:stdEstimate})$0",
"description": "function [c, ceq]=garcheviewscon(parameters , data , p , q,  m, stdEstimate);" 
},
"garcheviewslikelihood": {
"prefix": "garcheviewslikelihood",
"body": "${1:[LLF, grad, hessian, h, scores, robustse] = }garcheviewslikelihood(${2:parameters}, ${3:data}, ${4:p}, ${5:q}, ${6:m}, ${7:stdEstimate})$0",
"description": "function [LLF, grad, hessian, h, scores, robustse] = garchlikelihood(parameters , data , p , q,  m, stdEstimate)" 
},
"garcheviewssimulate": {
"prefix": "garcheviewssimulate",
"body": "${1:[simulatedata, H] = }garcheviewssimulate(${2:t}, ${3:parameters}, ${4:p}, ${5:q})$0",
"description": "function [simulatedata, H] = garchsimulate(t,parameters,p,q)" 
},
"garchgrad": {
"prefix": "garchgrad",
"body": "${1:[d, e, f] = }garchgrad(${2:garchp}, ${3:p}, ${4:q}, ${5:data}, ${6:h}, ${7:m}, ${8:T}, ${9:stdEstimate})$0",
"description": "function [d,e,f]=garchgrad(garchp,p,q,data,h,m,T,stdEstimate)" 
},
"garchinmean": {
"prefix": "garchinmean",
"body": "${1:[parameters, LLF, ht, errors, SEregression, stderrors, robustSE, scores, likelihoods] = }garchinmean(${2:data}, ${3:ar}, ${4:ma}, ${5:p}, ${6:q}, ${7:options})$0",
"description": "function [parameters, LLF, ht, errors, SEregression, stderrors, robustSE, scores, likelihoods] = garchinmean(data,ar,ma,p,q, options)" 
},
"garchinmeancore": {
"prefix": "garchinmeancore",
"body": "${1:[e, h, SSE] = }garchinmeancore(${2:regressand}, ${3:he}, ${4:stdEstimate}, ${5:map}, ${6:garchconst}, ${7:garchimp}, ${8:archp}, ${9:garchp}, ${10:m}, ${11:ma}, ${12:p}, ${13:q}, ${14:T})$0",
"description": "function [e,h,SSE]=garchinmeancore(regressand,he,stdEstimate,map,garchconst,garchimp,archp,garchp,m,ma,p,q,T);" 
},
"garchinmeanlikelihood": {
"prefix": "garchinmeanlikelihood",
"body": "${1:[LLF, errors, likelihoods, h] = }garchinmeanlikelihood(${2:parameters}, ${3:regressand}, ${4:regressors}, ${5:ar}, ${6:ma}, ${7:p}, ${8:q}, ${9:m}, ${10:T}, ${11:stdEstimate})$0",
"description": "function [LLF, errors, likelihoods, h] = garchinmeanlikelihood(parameters , regressand , regressors, ar , ma, p , q, m ,T, stdEstimate)" 
},
"garchinmeansimulate": {
"prefix": "garchinmeansimulate",
"body": "${1:[y, e, h] = }garchinmeansimulate(${2:T}, ${3:ar}, ${4:ma}, ${5:const}, ${6:arparams}, ${7:maparams}, ${8:gimparam}, ${9:p}, ${10:q}, ${11:garchconst}, ${12:archparams}, ${13:garchparams})$0",
"description": "function [y,e,h]=garchinmeansimulate(T,ar,ma,const,arparams,maparams,gimparam,p,q,garchconst,archparams,garchparams);" 
},
"garchlikelihood": {
"prefix": "garchlikelihood",
"body": "${1:[LLF, grad, hessian, h, scores, robustse] = }garchlikelihood(${2:parameters}, ${3:data}, ${4:p}, ${5:q}, ${6:m}, ${7:stdEstimate})$0",
"description": "function [LLF, grad, hessian, h, scores, robustse] = garchlikelihood(parameters , data , p , q,  m, stdEstimate)" 
},
"garchpq": {
"prefix": "garchpq",
"body": "${1:[parameters, likelihood, ht, stderrors, robustSE, scores, grad] = }garchpq(${2:data}, ${3:p}, ${4:q}, ${5:startingvals}, ${6:options})$0",
"description": "function [parameters, likelihood, ht, stderrors, robustSE, scores, grad] = garchpq(data , p , q , startingvals, options)" 
},
"garchpq_eviews": {
"prefix": "garchpq_eviews",
"body": "${1:[parameters, likelihood, ht, stderrors, robustSE, scores, grad] = }garchpq_eviews(${2:data}, ${3:p}, ${4:q}, ${5:startingvals}, ${6:options})$0",
"description": "function [parameters, likelihood, ht, stderrors, robustSE, scores, grad] = garchpq(data , p , q , startingvals, options)" 
},
"garchsimulate": {
"prefix": "garchsimulate",
"body": "${1:[simulatedata, H] = }garchsimulate(${2:t}, ${3:parameters}, ${4:p}, ${5:q})$0",
"description": "function [simulatedata, H] = garchsimulate(t,parameters,p,q)" 
},
"lagmatrix - 副本": {
"prefix": "lagmatrix - 副本",
"body": "${1:[Y, X] = }lagmatrix - 副本(${2:y}, ${3:p}, ${4:c})$0",
"description": "function [Y, X] = lagmatrix(y,p,c)" 
},
"lagmatrix_lrw": {
"prefix": "lagmatrix_lrw",
"body": "${1:[Y, X] = }lagmatrix_lrw(${2:y}, ${3:p}, ${4:c})$0",
"description": "function [Y, X] = lagmatrix(y,p,c)" 
},
"mafilter": {
"prefix": "mafilter",
"body": "${1:[parameters, SEregression, errors, LLF, stderrors, robustSE, scores, likelihoods] = }mafilter(${2:y}, ${3:constant}, ${4:ma}, ${5:x}, ${6:options})$0",
"description": "function [parameters,  SEregression, errors, LLF, stderrors, robustSE, scores, likelihoods]=armaxfilter(y,constant,ma,x,options)" 
},
"maxcore": {
"prefix": "maxcore",
"body": "${1:[e, E] = }maxcore(${2:regressand}, ${3:parameters}, ${4:ma}, ${5:tau})$0",
"description": "function [e,E]=maxcore(regressand,parameters,ma,tau);" 
},
"maxfilter_likelihood": {
"prefix": "maxfilter_likelihood",
"body": "${1:[LLF, errors, likelihoods] = }maxfilter_likelihood(${2:parameters}, ${3:regressand}, ${4:regressors}, ${5:ma})$0",
"description": "function [LLF, errors, likelihoods] = armaxfilter_likelihood(parameters , regressand , regressors, ma)" 
},
"multi_garch_constraints": {
"prefix": "multi_garch_constraints",
"body": "${1:[sumA, sumB, startingvalues, LB, UB, garchtype] = }multi_garch_constraints(${2:startingvalues}, ${3:p}, ${4:o}, ${5:q}, ${6:data}, ${7:type})$0",
"description": "function [sumA, sumB, startingvalues, LB, UB, garchtype]=multi_garch_constraints( startingvalues, p,o, q, data, type)" 
},
"multi_garch_paramsetup": {
"prefix": "multi_garch_paramsetup",
"body": "${1:[lambda, nu, b, garchtype, indicator] = }multi_garch_paramsetup(${2:type})$0",
"description": "function [lambda, nu, b, garchtype, indicator]=multi_garch_paramsetup(type);" 
},
"multigarch": {
"prefix": "multigarch",
"body": "${1:[parameters, likelihood, stderrors, robustSE, ht, scores] = }multigarch(${2:data}, ${3:p}, ${4:o}, ${5:q}, ${6:type}, ${7:errors}, ${8:options}, ${9:startingvals})$0",
"description": "function [parameters, likelihood, stderrors, robustSE, ht, scores]=multigarch(data,p,o,q,type,errors,options,startingvals)" 
},
"multigarchSimulate": {
"prefix": "multigarchSimulate",
"body": "${1:[data, h] = }multigarchSimulate(${2:T}, ${3:parameters}, ${4:p}, ${5:o}, ${6:q}, ${7:type}, ${8:errors}, ${9:nu2})$0",
"description": "function [data,h]=multigarchsimulate(T,parameters,p,o,q,type,errors,nu2)" 
},
"multigarch_likelihood": {
"prefix": "multigarch_likelihood",
"body": "${1:[LLF, Ht, likelihoods] = }multigarch_likelihood(${2:parameters}, ${3:data}, ${4:p}, ${5:o}, ${6:q}, ${7:garchtype}, ${8:errortype}, ${9:stdEstimate})$0",
"description": "function [LLF,Ht, likelihoods] = multigarch_likelihood(parameters,data,p,o,q,garchtype, errortype, stdEstimate)" 
},
"multigarchcore": {
"prefix": "multigarchcore",
"body": "${1:h = }multigarchcore(${2:datamb}, ${3:dataneg}, ${4:parameters}, ${5:nu}, ${6:lambda}, ${7:b}, ${8:p}, ${9:o}, ${10:q}, ${11:m}, ${12:T}, ${13:stdEstimate})$0",
"description": "function h=multigarchcore(datamb,dataneg,parameters,nu,lambda,b,p,o,q,m,T,stdEstimate);" 
},
"skewt_garch": {
"prefix": "skewt_garch",
"body": "${1:[parameters, likelihood, stderrors, robustSE, ht, scores] = }skewt_garch(${2:data}, ${3:p}, ${4:q}, ${5:startingvals}, ${6:options})$0",
"description": "function [parameters, likelihood, stderrors, robustSE, ht, scores] = skewt_garch(data , p , q , startingvals, options)" 
},
"skewt_garchlikelihood": {
"prefix": "skewt_garchlikelihood",
"body": "${1:[LLF, h, likelihoods] = }skewt_garchlikelihood(${2:parameters}, ${3:data}, ${4:p}, ${5:q}, ${6:m}, ${7:stdEstimate})$0",
"description": "function [LLF, h, likelihoods] = skewt_garchlikelihood(parameters , data , p , q, m, stdEstimate)" 
},
"skewtdis_LL": {
"prefix": "skewtdis_LL",
"body": "${1:[LL, likelihoods] = }skewtdis_LL(${2:theta}, ${3:x})$0",
"description": "function [LL, likelihoods] = skewtdis_LL(theta, x)" 
},
"tarch_V2": {
"prefix": "tarch_V2",
"body": "${1:[parameters, likelihood, ht, stderrors, robustSE, scores] = }tarch(${2:data}, ${3:p}, ${4:o}, ${5:q}, ${6:type}, ${7:startingvals}, ${8:options})$0",
"description": "function [parameters, likelihood, ht, stderrors, robustSE,  scores] = tarch(data , p , o, q , type, startingvals, options)" 
},
"tarchlikelihood": {
"prefix": "tarchlikelihood",
"body": "${1:[LLF, h, likelihoods] = }tarchlikelihood(${2:parameters}, ${3:data}, ${4:p}, ${5:o}, ${6:q}, ${7:m}, ${8:stdEstimate}, ${9:type})$0",
"description": "function [LLF, h, likelihoods] = tarchlikelihood(parameters , data , p, o, q,  m, stdEstimate, type)" 
},
"cosinus": {
"prefix": "cosinus",
"body": "${1:heights = }cosinus(${2:data}, ${3:center}, ${4:bw})$0",
"description": "function heights=cosinus(data,center,bw);" 
},
"epanechnikov": {
"prefix": "epanechnikov",
"body": "${1:heights = }epanechnikov(${2:data}, ${3:center}, ${4:bw})$0",
"description": "function heights=epanechnikov(data,center,bw);" 
},
"kern_dens_contour": {
"prefix": "kern_dens_contour",
"body": "${1:h = }kern_dens_contour(${2:returns}, ${3:bw}, ${4:nodes}, ${5:range}, ${6:points}, ${7:kern})$0",
"description": "function [h]=kern_dens_countour(returns,bw,nodes,range,points,kern)" 
},
"kern_dens_plot": {
"prefix": "kern_dens_plot",
"body": "${1:h = }kern_dens_plot(${2:returns}, ${3:bw}, ${4:nodes}, ${5:range}, ${6:kern})$0",
"description": "function h=kern_dens_plot(returns,bw,nodes,range,kern)" 
},
"kern_dens_plot2": {
"prefix": "kern_dens_plot2",
"body": "${1:h = }kern_dens_plot2(${2:returns}, ${3:bw}, ${4:nodes}, ${5:range}, ${6:kern})$0",
"description": "function [h]=kern_dens_plot2(returns,bw,nodes,range,kern)" 
},
"normal_V3": {
"prefix": "normal_V3",
"body": "${1:heights = }normal(${2:data}, ${3:center}, ${4:bw})$0",
"description": "function heights=normal(data,center,bw);" 
},
"quartic": {
"prefix": "quartic",
"body": "${1:heights = }quartic(${2:data}, ${3:center}, ${4:bw})$0",
"description": "function heights=quartic(data,center,bw);" 
},
"triangular": {
"prefix": "triangular",
"body": "${1:heights = }triangular(${2:data}, ${3:center}, ${4:bw})$0",
"description": "function heights=triangular(data,center,bw);" 
},
"triweight": {
"prefix": "triweight",
"body": "${1:heights = }triweight(${2:data}, ${3:center}, ${4:bw})$0",
"description": "function heights=triweight(data,center,bw);" 
},
"uniform_V3": {
"prefix": "uniform_V3",
"body": "${1:heights = }uniform(${2:data}, ${3:center}, ${4:bw})$0",
"description": "function heights=uniform(data,center,bw);" 
},
"ivech_V2": {
"prefix": "ivech_V2",
"body": "${1:transformeddata = }ivech(${2:data})$0",
"description": "function transformeddata=ivech(data)" 
},
"o_mvgarch_V2": {
"prefix": "o_mvgarch_V2",
"body": "${1:[parameters, Ht, stdresid, stderrors, A, B, weights, principalcomponets, cumR2] = }o_mvgarch(${2:data}, ${3:numfactors}, ${4:archP}, ${5:garchQ})$0",
"description": "function [parameters, Ht,  stdresid, stderrors, A, B, weights, principalcomponets, cumR2]=o_mvgarch(data, numfactors,archP,garchQ);" 
},
"pca_V2": {
"prefix": "pca_V2",
"body": "${1:[weights, principalcomponets, eigenvalues, explainedvariance, cumR2] = }pca(${2:data}, ${3:type})$0",
"description": "function [weights, principalcomponets, eigenvalues,explainedvariance, cumR2]=pca(data,type);" 
},
"vech_V2": {
"prefix": "vech_V2",
"body": "${1:trandformeddata = }vech(${2:x})$0",
"description": "function trandformeddata=vech(x)" 
},
"diagonal_bekk_mvgarch": {
"prefix": "diagonal_bekk_mvgarch",
"body": "${1:[parameters, loglikelihood, Ht, likelihoods, stdresid, stderrors, A, B, scores] = }diagonal_bekk_mvgarch(${2:data}, ${3:p}, ${4:q}, ${5:BEKKoptions})$0",
"description": "function [parameters, loglikelihood, Ht, likelihoods, stdresid, stderrors, A, B, scores] = diagonal_bekk_mvgarch(data,p,q,BEKKoptions);" 
},
"diagonal_bekk_mvgarch_likelihood": {
"prefix": "diagonal_bekk_mvgarch_likelihood",
"body": "${1:[LLF, likelihoods, Ht] = }diagonal_bekk_mvgarch_likelihood(${2:parameters}, ${3:errors}, ${4:p}, ${5:q}, ${6:k}, ${7:k2}, ${8:t})$0",
"description": "function [LLF,likelihoods,Ht]=diagonal_bekk_likelihood(parameters,errors,p,q,k,k2,t);" 
},
"diagonal_bekk_simulate": {
"prefix": "diagonal_bekk_simulate",
"body": "${1:[data, Ht] = }diagonal_bekk_simulate(${2:t}, ${3:k}, ${4:parameters}, ${5:p}, ${6:q})$0",
"description": "function [data, Ht] = diagonal_bekk_simulate(t,k,parameters,p,q);" 
},
"full_bekk_mvgarch": {
"prefix": "full_bekk_mvgarch",
"body": "${1:[parameters, loglikelihood, Ht, likelihoods, stdresid, stderrors, A, B, scores] = }full_bekk_mvgarch(${2:data}, ${3:p}, ${4:q}, ${5:BEKKoptions})$0",
"description": "function [parameters, loglikelihood, Ht, likelihoods, stdresid, stderrors, A, B, scores]  = full_bekk_mvgarch(data,p,q, BEKKoptions);" 
},
"full_bekk_mvgarch_likelihood": {
"prefix": "full_bekk_mvgarch_likelihood",
"body": "${1:[LLF, likelihoods, Ht] = }full_bekk_mvgarch_likelihood(${2:parameters}, ${3:errors}, ${4:p}, ${5:q}, ${6:k}, ${7:k2}, ${8:t})$0",
"description": "function [LLF,likelihoods,Ht]=diagonal_bekk_likelihood(parameters,errors,p,q,k,k2,t);" 
},
"full_bekk_simulate": {
"prefix": "full_bekk_simulate",
"body": "${1:[data, Ht] = }full_bekk_simulate(${2:t}, ${3:k}, ${4:parameters}, ${5:p}, ${6:q})$0",
"description": "function [data, Ht] = full_bekk_simulate(t,k,parameters,p,q);" 
},
"scalar_bekk_mvgarch": {
"prefix": "scalar_bekk_mvgarch",
"body": "${1:[parameters, loglikelihood, Ht, likelihoods, stdresid, stderrors, A, B, scores] = }scalar_bekk_mvgarch(${2:data}, ${3:p}, ${4:q}, ${5:BEKKoptions})$0",
"description": "function [parameters, loglikelihood, Ht, likelihoods, stdresid, stderrors, A, B, scores] = scalar_bekk_mvgarch(data,p,q,BEKKoptions);" 
},
"scalar_bekk_mvgarch_likelihood": {
"prefix": "scalar_bekk_mvgarch_likelihood",
"body": "${1:[LLF, likelihoods, Ht] = }scalar_bekk_mvgarch_likelihood(${2:parameters}, ${3:errors}, ${4:p}, ${5:q}, ${6:k}, ${7:k2}, ${8:t})$0",
"description": "function [LLF,likelihoods,Ht]=scalar_bekk_likelihood(parameters,errors,p,q,k,k2,t);" 
},
"scalar_bekk_simulate": {
"prefix": "scalar_bekk_simulate",
"body": "${1:[data, Ht] = }scalar_bekk_simulate(${2:t}, ${3:k}, ${4:parameters}, ${5:p}, ${6:q})$0",
"description": "function [data, Ht] = scalar_bekk_simulate(t,k,parameters,p,q);" 
},
"Idcc_mvgarch": {
"prefix": "Idcc_mvgarch",
"body": "${1:[parameters, loglikelihood, Ht, likelihoods, stdresid, stderrors, A, B, jointscores] = }Idcc_mvgarch(${2:data}, ${3:archP}, ${4:garchQ}, ${5:starter})$0",
"description": "function [parameters, loglikelihood, Ht, likelihoods, stdresid, stderrors, A,B, jointscores]=Idcc_mvgarch(data,archP,garchQ,starter)" 
},
"Idcc_mvgarch_full_likelihood": {
"prefix": "Idcc_mvgarch_full_likelihood",
"body": "${1:[logL, Rt, likelihoods] = }Idcc_mvgarch_full_likelihood(${2:parameters}, ${3:data}, ${4:archP}, ${5:garchQ})$0",
"description": "function [logL, Rt, likelihoods]=Idcc_garch_full_likelihood(parameters, data, archP,garchQ)" 
},
"Idcc_mvgarch_likelihood": {
"prefix": "Idcc_mvgarch_likelihood",
"body": "${1:[logL, Rt, likelihoods] = }Idcc_mvgarch_likelihood(${2:params}, ${3:stdresid})$0",
"description": "function [logL, Rt, likelihoods]=Idcc_mvgarch_likelihood(params, stdresid)" 
},
"cc_ivech": {
"prefix": "cc_ivech",
"body": "${1:Correlation = }cc_ivech(${2:parameters}, ${3:numseries})$0",
"description": "function Correlation=ccivech(parameters,numseries)" 
},
"cc_mvgarch": {
"prefix": "cc_mvgarch",
"body": "${1:[parameters, loglikelihood, R, Ht, likelihoods, stdresid, unistdresid, hmat, stderrors, A, B, jointscores] = }cc_mvgarch(${2:data}, ${3:archP}, ${4:garchQ})$0",
"description": "function [parameters, loglikelihood, R ,Ht, likelihoods, stdresid, unistdresid, hmat, stderrors, A, B, jointscores]=cc_mvgarch(data,archP,garchQ)" 
},
"cc_mvgarch_full_likelihood": {
"prefix": "cc_mvgarch_full_likelihood",
"body": "${1:[logL, likelihoods] = }cc_mvgarch_full_likelihood(${2:parameters}, ${3:data}, ${4:archP}, ${5:garchQ})$0",
"description": "function [logL, likelihoods]=cc_mvgarch_full_likelihood(parameters, data, archP,garchQ);" 
},
"cc_mvgarch_simulate": {
"prefix": "cc_mvgarch_simulate",
"body": "${1:[finaldata, Ht, state] = }cc_mvgarch_simulate(${2:k}, ${3:t}, ${4:CorrMat}, ${5:garchparameters}, ${6:archP}, ${7:garchQ}, ${8:state})$0",
"description": "function [finaldata,Ht,state]=cc_mvgarch_simulate(k,t,CorrMat,garchparameters,archP,garchQ,state);" 
},
"dcc_hessian": {
"prefix": "dcc_hessian",
"body": "${1:H = }dcc_hessian(${2:f}, ${3:x}, ${4:N}, ${5:varargin})$0",
"description": "function H = dcc_hessian(f,x,N,varargin)" 
},
"dcc_mvgarch": {
"prefix": "dcc_mvgarch",
"body": "${1:[parameters, loglikelihood, Ht, Qt, stdresid, likelihoods, stderrors, A, B, jointscores] = }dcc_mvgarch(${2:data}, ${3:dccP}, ${4:dccQ}, ${5:archP}, ${6:garchQ})$0",
"description": "function [parameters, loglikelihood, Ht, Qt,  stdresid, likelihoods, stderrors, A,B, jointscores]=dcc_mvgarch(data,dccP,dccQ,archP,garchQ)" 
},
"dcc_mvgarch_full_likelihood": {
"prefix": "dcc_mvgarch_full_likelihood",
"body": "${1:[logL, Rt, likelihoods, Qt] = }dcc_mvgarch_full_likelihood(${2:parameters}, ${3:data}, ${4:archP}, ${5:garchQ}, ${6:dccP}, ${7:dccQ})$0",
"description": "function [logL, Rt, likelihoods, Qt]=dcc_garch_full_likelihood(parameters, data, archP,garchQ,dccP,dccQ)" 
},
"dcc_mvgarch_likelihood": {
"prefix": "dcc_mvgarch_likelihood",
"body": "${1:[logL, Rt, likelihoods, Qt] = }dcc_mvgarch_likelihood(${2:params}, ${3:stdresid}, ${4:P}, ${5:Q})$0",
"description": "function [logL, Rt, likelihoods, Qt]=dcc_mvgarch_likelihood(params, stdresid, P, Q)" 
},
"dcc_mvgarch_test": {
"prefix": "dcc_mvgarch_test",
"body": "${1:[pval, stat] = }dcc_mvgarch_test(${2:data}, ${3:archP}, ${4:garchQ}, ${5:nlags})$0",
"description": "function [pval, stat]=dcc_mvgarch_test(data,archP,garchQ,nlags);" 
},
"dcc_simulate": {
"prefix": "dcc_simulate",
"body": "${1:[finaldata, Ht, state, Rt, Qt] = }dcc_simulate(${2:k}, ${3:t}, ${4:CorrMat}, ${5:garchparameters}, ${6:archP}, ${7:garchQ}, ${8:dccparameters}, ${9:dccP}, ${10:dccQ}, ${11:state})$0",
"description": "function [finaldata,Ht,state,Rt, Qt]=dcc_simulate(k,t,CorrMat,garchparameters,archP,garchQ,dccparameters,dccP,dccQ,state);" 
},
"dcc_univariate_simulate": {
"prefix": "dcc_univariate_simulate",
"body": "${1:[simulatedata, H] = }dcc_univariate_simulate(${2:parameters}, ${3:p}, ${4:q}, ${5:data})$0",
"description": "function [simulatedata, H] = dcc_univariate_simulate(parameters,p,q,data)" 
},
"diagonal_bekk_T_est_likelihood": {
"prefix": "diagonal_bekk_T_est_likelihood",
"body": "${1:[LLF, likelihoods, Ht] = }diagonal_bekk_T_est_likelihood(${2:parameters}, ${3:errors}, ${4:p}, ${5:q}, ${6:k}, ${7:k2}, ${8:t})$0",
"description": "function [LLF,likelihoods,Ht]=diagonal_bekk_likelihood(parameters,errors,p,q,k,k2,t);" 
},
"diagonal_bekk_T_likelihood": {
"prefix": "diagonal_bekk_T_likelihood",
"body": "${1:[LLF, likelihoods, Ht] = }diagonal_bekk_T_likelihood(${2:parameters}, ${3:errors}, ${4:p}, ${5:q}, ${6:k}, ${7:k2}, ${8:t})$0",
"description": "function [LLF,likelihoods,Ht]=diagonal_bekk_likelihood(parameters,errors,p,q,k,k2,t);" 
},
"diagonal_bekk_T_mvgarch": {
"prefix": "diagonal_bekk_T_mvgarch",
"body": "${1:[parameters, loglikelihood, Ht, likelihoods, stdresid, stderrors, A, B, scores] = }diagonal_bekk_T_mvgarch(${2:data}, ${3:p}, ${4:q}, ${5:BEKKoptions})$0",
"description": "function [parameters, loglikelihood, Ht, likelihoods, stdresid, stderrors, A, B, scores] = diagonal_bekk_T_mvgarch(data,p,q,BEKKoptions);" 
},
"full_bekk_T_est_likelihood": {
"prefix": "full_bekk_T_est_likelihood",
"body": "${1:[LLF, likelihoods, Ht] = }full_bekk_T_est_likelihood(${2:parameters}, ${3:errors}, ${4:p}, ${5:q}, ${6:k}, ${7:k2}, ${8:t})$0",
"description": "function [LLF,likelihoods,Ht]=diagonal_bekk_likelihood(parameters,errors,p,q,k,k2,t);" 
},
"full_bekk_T_likelihood": {
"prefix": "full_bekk_T_likelihood",
"body": "${1:[LLF, likelihoods, Ht] = }full_bekk_T_likelihood(${2:parameters}, ${3:errors}, ${4:p}, ${5:q}, ${6:k}, ${7:k2}, ${8:t})$0",
"description": "function [LLF,likelihoods,Ht]=diagonal_bekk_likelihood(parameters,errors,p,q,k,k2,t);" 
},
"full_bekk_T_mvgarch": {
"prefix": "full_bekk_T_mvgarch",
"body": "${1:[parameters, loglikelihood, Ht, likelihoods, stdresid, stderrors, A, B, scores] = }full_bekk_T_mvgarch(${2:data}, ${3:p}, ${4:q}, ${5:BEKKoptions})$0",
"description": "function [parameters, loglikelihood, Ht, likelihoods, stdresid, stderrors, A, B, scores]  = full_bekk_T_mvgarch(data,p,q, BEKKoptions);" 
},
"scalar_bekk_T_est_likelihood": {
"prefix": "scalar_bekk_T_est_likelihood",
"body": "${1:[LLF, likelihoods, Ht] = }scalar_bekk_T_est_likelihood(${2:parameters}, ${3:errors}, ${4:p}, ${5:q}, ${6:k}, ${7:k2}, ${8:t})$0",
"description": "function [LLF,likelihoods,Ht]=scalar_bekk_T_mvgarch_likelihood(parameters,errors,p,q,k,k2,t);" 
},
"scalar_bekk_T_likelihood": {
"prefix": "scalar_bekk_T_likelihood",
"body": "${1:[LLF, likelihoods, Ht] = }scalar_bekk_T_likelihood(${2:parameters}, ${3:errors}, ${4:p}, ${5:q}, ${6:k}, ${7:k2}, ${8:t})$0",
"description": "function [LLF,likelihoods,Ht]=scalar_bekk_T_mvgarch_likelihood(parameters,errors,p,q,k,k2,t);" 
},
"scalar_bekk_T_mvgarch": {
"prefix": "scalar_bekk_T_mvgarch",
"body": "${1:[parameters, loglikelihood, Ht, likelihoods, stdresid, stderrors, A, B, scores] = }scalar_bekk_T_mvgarch(${2:data}, ${3:p}, ${4:q}, ${5:BEKKoptions})$0",
"description": "function [parameters, loglikelihood, Ht, likelihoods, stdresid, stderrors, A, B, scores] = scalar_bekk_T_mvgarch(data,p,q,BEKKoptions);" 
},
"berkowitz_V2": {
"prefix": "berkowitz_V2",
"body": "${1:[statistic, pvalue, transformed_x, H] = }berkowitz(${2:x}, ${3:size}, ${4:type}, ${5:dist}, ${6:varargin})$0",
"description": "function [statistic, pvalue, transformed_x, H]=berkowitz(x,size,type,dist,varargin)" 
},
"jarquebera_V2": {
"prefix": "jarquebera_V2",
"body": "${1:results = }jarquebera(${2:data}, ${3:k}, ${4:alpha})$0",
"description": "function results = jarquebera(data, k, alpha)" 
},
"kolmogorov_V2": {
"prefix": "kolmogorov_V2",
"body": "${1:[statistic, pvalue, H] = }kolmogorov(${2:x}, ${3:size}, ${4:dist}, ${5:varargin})$0",
"description": "function [statistic, pvalue, H]=kolmorgorov(x,size,dist,varargin)" 
},
"kscritical": {
"prefix": "kscritical",
"body": "${1:crit = }kscritical(${2:n}, ${3:pvalue})$0",
"description": "function crit=kscritical(n,pvalue);" 
},
"lilliefors": {
"prefix": "lilliefors",
"body": "${1:[stat, critval, H] = }lilliefors(${2:x}, ${3:testsize})$0",
"description": "function [stat, critval, H]=lilliefors(x,testsize);" 
},
"ljq2": {
"prefix": "ljq2",
"body": "${1:results = }ljq2(${2:residuals}, ${3:q})$0",
"description": "function results = ljq2(residuals,q)" 
},
"lmtest1_V2": {
"prefix": "lmtest1_V2",
"body": "${1:results = }lmtest1(${2:data}, ${3:q})$0",
"description": "function results = lmtest1(data,q)" 
},
"lmtest2": {
"prefix": "lmtest2",
"body": "${1:results = }lmtest2(${2:stdresid}, ${3:q})$0",
"description": "function results = lmtest2(stdresid,q)" 
},
"shapirofrancia": {
"prefix": "shapirofrancia",
"body": "${1:[statistic, pval, H] = }shapirofrancia(${2:x}, ${3:tails}, ${4:probability})$0",
"description": "function [statistic, pval, H] = shapirofrancia(x,tails,probability)" 
},
"shapirowilks": {
"prefix": "shapirowilks",
"body": "${1:[statistic, pval, H] = }shapirowilks(${2:x}, ${3:tails}, ${4:probability})$0",
"description": "function [statistic, pval, H] = shapirowilks(x,tails,probability)" 
},
"accumulate": {
"prefix": "accumulate",
"body": "${1:result = }accumulate(${2:x})$0",
"description": "function result = accumulate(x)" 
},
"blockdiag_V1": {
"prefix": "blockdiag_V1",
"body": "${1:M = }blockdiag(${2:varargin})$0",
"description": "function M=blockdiag(varargin)" 
},
"cal_d": {
"prefix": "cal_d",
"body": "cal_d$0",
"description": "cal_d" 
},
"ccorr1": {
"prefix": "ccorr1",
"body": "${1:[cmat, mvec, svec] = }ccorr1(${2:x})$0",
"description": "function [cmat,mvec,svec] = ccorr1(x)" 
},
"ccorr2": {
"prefix": "ccorr2",
"body": "${1:[cmat, mvec, svec] = }ccorr2(${2:x})$0",
"description": "function [cmat,mvec,svec] = ccorr2(x)" 
},
"cols_V2": {
"prefix": "cols_V2",
"body": "${1:c = }cols(${2:x})$0",
"description": "function c = cols(x)" 
},
"crlag": {
"prefix": "crlag",
"body": "${1:y = }crlag(${2:x}, ${3:n})$0",
"description": "function y = crlag(x,n)" 
},
"cumprodc": {
"prefix": "cumprodc",
"body": "${1:m = }cumprodc(${2:x})$0",
"description": "function m=cumprodc(x);" 
},
"cumsumc": {
"prefix": "cumsumc",
"body": "${1:m = }cumsumc(${2:x})$0",
"description": "function m=cumsumc(x);" 
},
"delif": {
"prefix": "delif",
"body": "${1:x = }delif(${2:y}, ${3:cond})$0",
"description": "function x=delif(y,cond)" 
},
"diagrv": {
"prefix": "diagrv",
"body": "${1:y = }diagrv(${2:x}, ${3:v})$0",
"description": "function y = diagrv(x,v)" 
},
"dmult": {
"prefix": "dmult",
"body": "${1:M = }dmult(${2:A}, ${3:B})$0",
"description": "function M = dmult(A,B)" 
},
"find_big": {
"prefix": "find_big",
"body": "${1:index = }find_big(${2:x}, ${3:number})$0",
"description": "function index = find_big(x,number)" 
},
"find_bigd": {
"prefix": "find_bigd",
"body": "find_bigd$0",
"description": "find_bigd" 
},
"findnear": {
"prefix": "findnear",
"body": "${1:[value, position] = }findnear(${2:A}, ${3:b})$0",
"description": "function [value,position] = findnear(A,b)" 
},
"fturns": {
"prefix": "fturns",
"body": "${1:result = }fturns(${2:y}, ${3:in})$0",
"description": "function result = fturns(y,in)" 
},
"fturns_d": {
"prefix": "fturns_d",
"body": "fturns_d$0",
"description": "fturns_d" 
},
"growthr": {
"prefix": "growthr",
"body": "${1:grwth = }growthr(${2:x}, ${3:freq})$0",
"description": "function grwth = growthr(x,freq)" 
},
"hpdi_V2": {
"prefix": "hpdi_V2",
"body": "${1:bounds = }hpdi(${2:adraw}, ${3:hperc})$0",
"description": "function bounds = hpdi(adraw,hperc)" 
},
"ical": {
"prefix": "ical",
"body": "${1:obs = }ical(${2:year}, ${3:period}, ${4:cstructure})$0",
"description": "function obs = ical(year,period,cstructure)" 
},
"ical_d": {
"prefix": "ical_d",
"body": "ical_d$0",
"description": "ical_d" 
},
"indexcat": {
"prefix": "indexcat",
"body": "${1:x = }indexcat(${2:y}, ${3:val})$0",
"description": "function x=indexcat(y,val);" 
},
"indicator": {
"prefix": "indicator",
"body": "${1:ind = }indicator(${2:x}, ${3:setto0})$0",
"description": "function ind = indicator(x,setto0)" 
},
"invccorr": {
"prefix": "invccorr",
"body": "${1:COEF = }invccorr(${2:COEF}, ${3:MVEC}, ${4:SVEC})$0",
"description": "function [COEF] = invccorr(COEF,MVEC,SVEC)" 
},
"invpd": {
"prefix": "invpd",
"body": "${1:xinv = }invpd(${2:x})$0",
"description": "function  xinv = invpd(x);" 
},
"invpd_d": {
"prefix": "invpd_d",
"body": "invpd_d$0",
"description": "invpd_d" 
},
"isposdef_V2": {
"prefix": "isposdef_V2",
"body": "${1:ans = }isposdef(${2:a})$0",
"description": "function ans = isposdef(a)" 
},
"kernel_n": {
"prefix": "kernel_n",
"body": "${1:[y, x] = }kernel_n(${2:u}, ${3:ngrid}, ${4:h})$0",
"description": "function [y, x] = kernel_n(u,ngrid,h)" 
},
"lag": {
"prefix": "lag",
"body": "${1:z = }lag(${2:x}, ${3:n}, ${4:v})$0",
"description": "function z = lag(x,n,v)" 
},
"levels": {
"prefix": "levels",
"body": "${1:f = }levels(${2:nlevels}, ${3:nreps}, ${4:length})$0",
"description": "function f = levels(nlevels,nreps,length)" 
},
"lprint": {
"prefix": "lprint",
"body": "lprint(${2:y}, ${3:info})$0",
"description": "function lprint(y,info)" 
},
"lprint_d": {
"prefix": "lprint_d",
"body": "lprint_d$0",
"description": "lprint_d" 
},
"make_contents": {
"prefix": "make_contents",
"body": "make_contents$0",
"description": "make_contents" 
},
"matadd": {
"prefix": "matadd",
"body": "${1:out = }matadd(${2:x}, ${3:y})$0",
"description": "function out = matadd(x,y)" 
},
"matdiv": {
"prefix": "matdiv",
"body": "${1:out = }matdiv(${2:x}, ${3:y})$0",
"description": "function out = matdiv(x,y)" 
},
"matmul": {
"prefix": "matmul",
"body": "${1:out = }matmul(${2:x}, ${3:y})$0",
"description": "function out = matmul(x,y)" 
},
"matsub": {
"prefix": "matsub",
"body": "${1:out = }matsub(${2:x}, ${3:y})$0",
"description": "function out = matsub(x,y)" 
},
"modchol": {
"prefix": "modchol",
"body": "${1:[l, d] = }modchol(${2:A})$0",
"description": "function [l,d]=modchol(A)" 
},
"mth2qtr": {
"prefix": "mth2qtr",
"body": "${1:yqtr = }mth2qtr(${2:ymth}, ${3:flag})$0",
"description": "function yqtr = mth2qtr(ymth,flag)" 
},
"nclag": {
"prefix": "nclag",
"body": "${1:xlag = }nclag(${2:x}, ${3:lag1}, ${4:n})$0",
"description": "function xlag = nclag(x,lag1,n)" 
},
"plt": {
"prefix": "plt",
"body": "plt(${2:results}, ${3:vnames}, ${4:arg3})$0",
"description": "function plt(results,vnames,arg3)" 
},
"prodc": {
"prefix": "prodc",
"body": "${1:m = }prodc(${2:x})$0",
"description": "function m=prodc(x);" 
},
"prt": {
"prefix": "prt",
"body": "prt(${2:results}, ${3:vnames}, ${4:fid})$0",
"description": "function prt(results,vnames,fid)" 
},
"prt_reg1": {
"prefix": "prt_reg1",
"body": "prt_reg1(${2:results}, ${3:vnames}, ${4:fid})$0",
"description": "function prt_reg(results,vnames,fid)" 
},
"qtr2yr": {
"prefix": "qtr2yr",
"body": "${1:yyr = }qtr2yr(${2:yqtr}, ${3:flag})$0",
"description": "function yyr = qtr2yr(yqtr,flag)" 
},
"recserar": {
"prefix": "recserar",
"body": "${1:result = }recserar(${2:x}, ${3:y0}, ${4:a})$0",
"description": "function result = recserar(x,y0,a)" 
},
"recsercp": {
"prefix": "recsercp",
"body": "${1:result = }recsercp(${2:x}, ${3:z})$0",
"description": "function result = recsercp(x,z)" 
},
"roundoff": {
"prefix": "roundoff",
"body": "${1:y = }roundoff(${2:number}, ${3:decimal_places})$0",
"description": "function y = roundoff(number,decimal_places)" 
},
"rows_V2": {
"prefix": "rows_V2",
"body": "${1:r = }rows(${2:x})$0",
"description": "function r = rows(x)" 
},
"sacf_V2": {
"prefix": "sacf_V2",
"body": "${1:[rho, bigY] = }sacf(${2:y}, ${3:m}, ${4:gflag})$0",
"description": "function [rho,bigY] = mysacf(y,m,gflag)" 
},
"sacf_d": {
"prefix": "sacf_d",
"body": "sacf_d$0",
"description": "sacf_d" 
},
"sdiff": {
"prefix": "sdiff",
"body": "${1:xlag = }sdiff(${2:x}, ${3:freq})$0",
"description": "function xlag = sdiff(x,freq)" 
},
"sdummy": {
"prefix": "sdummy",
"body": "${1:y = }sdummy(${2:nobs}, ${3:freq})$0",
"description": "function y = sdummy(nobs,freq)" 
},
"selif": {
"prefix": "selif",
"body": "${1:x = }selif(${2:y}, ${3:cond})$0",
"description": "function x=selif(y,cond);" 
},
"seqa": {
"prefix": "seqa",
"body": "${1:seq = }seqa(${2:a}, ${3:b}, ${4:c})$0",
"description": "function seq=seqa(a,b,c);" 
},
"seqm": {
"prefix": "seqm",
"body": "${1:seq = }seqm(${2:a}, ${3:b}, ${4:c})$0",
"description": "function seq=seqm(a,b,c);" 
},
"shist": {
"prefix": "shist",
"body": "shist(${2:x}, ${3:n})$0",
"description": "function shist(x,n)" 
},
"spacf_V2": {
"prefix": "spacf_V2",
"body": "${1:x = }spacf(${2:y}, ${3:m})$0",
"description": "function x = spacf(y,m)" 
},
"spacf_d": {
"prefix": "spacf_d",
"body": "spacf_d$0",
"description": "spacf_d" 
},
"stdc": {
"prefix": "stdc",
"body": "${1:m = }stdc(${2:x})$0",
"description": "function m=stdc(x);" 
},
"sumc": {
"prefix": "sumc",
"body": "${1:m = }sumc(${2:x})$0",
"description": "function m=sumc(x)" 
},
"tally": {
"prefix": "tally",
"body": "${1:out = }tally(${2:x})$0",
"description": "function out = tally(x)" 
},
"tdiff": {
"prefix": "tdiff",
"body": "${1:dmat = }tdiff(${2:x}, ${3:k})$0",
"description": "function dmat = tdiff(x,k)" 
},
"trimc": {
"prefix": "trimc",
"body": "${1:z = }trimc(${2:x}, ${3:n1}, ${4:n2})$0",
"description": "function z = trimc(x,n1,n2)" 
},
"tsdate": {
"prefix": "tsdate",
"body": "${1:out = }tsdate(${2:beg_yr}, ${3:beg_mth}, ${4:freq}, ${5:nobs})$0",
"description": "function [out] = tsdate(beg_yr,beg_mth,freq,nobs)" 
},
"tsdate_d": {
"prefix": "tsdate_d",
"body": "tsdate_d$0",
"description": "tsdate_d" 
},
"tsprint": {
"prefix": "tsprint",
"body": "tsprint(${2:y}, ${3:cstruc}, ${4:varargin})$0",
"description": "function tsprint(y,cstruc,varargin)" 
},
"tsprint_d": {
"prefix": "tsprint_d",
"body": "tsprint_d$0",
"description": "tsprint_d" 
},
"unsort": {
"prefix": "unsort",
"body": "${1:out = }unsort(${2:xsorted}, ${3:xindex})$0",
"description": "function out = unsort(xsorted,xindex)" 
},
"unsort_d": {
"prefix": "unsort_d",
"body": "unsort_d$0",
"description": "unsort_d" 
},
"util_d": {
"prefix": "util_d",
"body": "util_d$0",
"description": "util_d" 
},
"vecr": {
"prefix": "vecr",
"body": "${1:v = }vecr(${2:x})$0",
"description": "function v = vecr(x)" 
},
"vprob": {
"prefix": "vprob",
"body": "${1:val = }vprob(${2:ev}, ${3:he})$0",
"description": "function val = vprob(ev,he)" 
},
"xdiagonal": {
"prefix": "xdiagonal",
"body": "${1:A = }xdiagonal(${2:x})$0",
"description": "function A = xdiagonal(x)" 
},
"yvector": {
"prefix": "yvector",
"body": "${1:B = }yvector(${2:y})$0",
"description": "function B = yvector(y)" 
},
"ar": {
"prefix": "ar",
"body": "${1:results = }ar(${2:y}, ${3:nlag}, ${4:info})$0",
"description": "function results = ar(y,nlag,info)" 
},
"arf_V2": {
"prefix": "arf_V2",
"body": "${1:ylevf = }arf(${2:y}, ${3:nlag}, ${4:nfor}, ${5:begf}, ${6:transf})$0",
"description": "function ylevf = arf(y,nlag,nfor,begf,transf);" 
},
"arf_d": {
"prefix": "arf_d",
"body": "arf_d$0",
"description": "arf_d" 
},
"becm": {
"prefix": "becm",
"body": "${1:results = }becm(${2:y}, ${3:nlag}, ${4:tight}, ${5:weight}, ${6:decay}, ${7:r})$0",
"description": "function results = becm(y,nlag,tight,weight,decay,r)" 
},
"becm_d": {
"prefix": "becm_d",
"body": "becm_d$0",
"description": "becm_d" 
},
"becm_g": {
"prefix": "becm_g",
"body": "${1:results = }becm_g(${2:y}, ${3:nlag}, ${4:prior}, ${5:ndraw}, ${6:nomit}, ${7:r})$0",
"description": "function results = becm_g(y,nlag,prior,ndraw,nomit,r)" 
},
"becm_gd": {
"prefix": "becm_gd",
"body": "becm_gd$0",
"description": "becm_gd" 
},
"becmf": {
"prefix": "becmf",
"body": "${1:ylevf = }becmf(${2:y}, ${3:nlag}, ${4:nfor}, ${5:begf}, ${6:tight}, ${7:weight}, ${8:decay}, ${9:r})$0",
"description": "function ylevf = becmf(y,nlag,nfor,begf,tight,weight,decay,r);" 
},
"becmf_d": {
"prefix": "becmf_d",
"body": "becmf_d$0",
"description": "becmf_d" 
},
"becmf_g": {
"prefix": "becmf_g",
"body": "${1:ylevf = }becmf_g(${2:y}, ${3:nlag}, ${4:nfor}, ${5:begf}, ${6:prior}, ${7:ndraw}, ${8:nomit}, ${9:r})$0",
"description": "function ylevf = becmf_g(y,nlag,nfor,begf,prior,ndraw,nomit,r);" 
},
"becmf_gd": {
"prefix": "becmf_gd",
"body": "becmf_gd$0",
"description": "becmf_gd" 
},
"bvar": {
"prefix": "bvar",
"body": "${1:result = }bvar(${2:x}, ${3:nlag}, ${4:tight}, ${5:weight}, ${6:decay}, ${7:xx})$0",
"description": "function result = bvar(x,nlag,tight,weight,decay,xx);" 
},
"bvar_d": {
"prefix": "bvar_d",
"body": "bvar_d$0",
"description": "bvar_d" 
},
"bvar_g": {
"prefix": "bvar_g",
"body": "${1:result = }bvar_g(${2:x}, ${3:nlag}, ${4:ndraw}, ${5:nomit}, ${6:prior}, ${7:xx})$0",
"description": "function result = bvar_g(x,nlag,ndraw,nomit,prior,xx);" 
},
"bvar_gd": {
"prefix": "bvar_gd",
"body": "bvar_gd$0",
"description": "bvar_gd" 
},
"bvarf": {
"prefix": "bvarf",
"body": "${1:ylevf = }bvarf(${2:y}, ${3:nlag}, ${4:nfor}, ${5:begf}, ${6:tight}, ${7:weight}, ${8:decay}, ${9:x}, ${10:transf})$0",
"description": "function ylevf = bvarf(y,nlag,nfor,begf,tight,weight,decay,x,transf);" 
},
"bvarf_d": {
"prefix": "bvarf_d",
"body": "bvarf_d$0",
"description": "bvarf_d" 
},
"bvarf_g": {
"prefix": "bvarf_g",
"body": "${1:ylevf = }bvarf_g(${2:y}, ${3:nlag}, ${4:nfor}, ${5:begf}, ${6:prior}, ${7:ndraw}, ${8:nomit}, ${9:x}, ${10:transf})$0",
"description": "function ylevf = bvarf_g(y,nlag,nfor,begf,prior,ndraw,nomit,x,transf);" 
},
"bvarf_gd": {
"prefix": "bvarf_gd",
"body": "bvarf_gd$0",
"description": "bvarf_gd" 
},
"commutation": {
"prefix": "commutation",
"body": "${1:K = }commutation(${2:m}, ${3:n})$0",
"description": "function K=commutation(m,n)" 
},
"ecm": {
"prefix": "ecm",
"body": "${1:results = }ecm(${2:y}, ${3:nlag}, ${4:r})$0",
"description": "function results = ecm(y,nlag,r)" 
},
"ecm_d": {
"prefix": "ecm_d",
"body": "ecm_d$0",
"description": "ecm_d" 
},
"ecmf": {
"prefix": "ecmf",
"body": "${1:ylevf = }ecmf(${2:y}, ${3:nlag}, ${4:nfor}, ${5:begf}, ${6:r})$0",
"description": "function ylevf = ecmf(y,nlag,nfor,begf,r);" 
},
"ecmf_d": {
"prefix": "ecmf_d",
"body": "ecmf_d$0",
"description": "ecmf_d" 
},
"irf": {
"prefix": "irf",
"body": "${1:[out1, out2] = }irf(${2:results}, ${3:S}, ${4:odum}, ${5:Vnames})$0",
"description": "function [out1,out2]=irf(results,S,odum,Vnames)" 
},
"irf_d": {
"prefix": "irf_d",
"body": "irf_d$0",
"description": "irf_d" 
},
"irf_d2": {
"prefix": "irf_d2",
"body": "irf_d2$0",
"description": "irf_d2" 
},
"pftest": {
"prefix": "pftest",
"body": "pftest(${2:result}, ${3:vnames}, ${4:fid})$0",
"description": "function pftest(result,vnames,fid);" 
},
"pftest_d": {
"prefix": "pftest_d",
"body": "pftest_d$0",
"description": "pftest_d" 
},
"pgranger": {
"prefix": "pgranger",
"body": "pgranger(${2:result}, ${3:varargin})$0",
"description": "function pgranger(result,varargin)" 
},
"plt_var": {
"prefix": "plt_var",
"body": "plt_var(${2:results}, ${3:vnames})$0",
"description": "function plt_var(results,vnames);" 
},
"plt_varg": {
"prefix": "plt_varg",
"body": "plt_varg(${2:results}, ${3:vnames})$0",
"description": "function plt_varg(results,vnames)" 
},
"prt_var": {
"prefix": "prt_var",
"body": "prt_var(${2:result}, ${3:vnames}, ${4:fid})$0",
"description": "function prt_var(result,vnames,fid)" 
},
"prt_varg": {
"prefix": "prt_varg",
"body": "prt_varg(${2:result}, ${3:vnames}, ${4:fid})$0",
"description": "function prt_varg(result,vnames,fid)" 
},
"recm": {
"prefix": "recm",
"body": "${1:results = }recm(${2:y}, ${3:nlag}, ${4:w}, ${5:freq}, ${6:sig}, ${7:tau}, ${8:theta}, ${9:r})$0",
"description": "function results = recm(y,nlag,w,freq,sig,tau,theta,r)" 
},
"recm_d": {
"prefix": "recm_d",
"body": "recm_d$0",
"description": "recm_d" 
},
"recm_g": {
"prefix": "recm_g",
"body": "${1:results = }recm_g(${2:y}, ${3:nlag}, ${4:prior}, ${5:ndraw}, ${6:nomit}, ${7:r})$0",
"description": "function results = recm_g(y,nlag,prior,ndraw,nomit,r)" 
},
"recm_gd": {
"prefix": "recm_gd",
"body": "recm_gd$0",
"description": "recm_gd" 
},
"recmf": {
"prefix": "recmf",
"body": "${1:ylevf = }recmf(${2:y}, ${3:nlag}, ${4:w}, ${5:freq}, ${6:nfor}, ${7:begf}, ${8:sig}, ${9:tau}, ${10:theta}, ${11:r})$0",
"description": "function ylevf = recmf(y,nlag,w,freq,nfor,begf,sig,tau,theta,r);" 
},
"recmf_d": {
"prefix": "recmf_d",
"body": "recmf_d$0",
"description": "recmf_d" 
},
"recmf_g": {
"prefix": "recmf_g",
"body": "${1:ylevf = }recmf_g(${2:y}, ${3:nlag}, ${4:nfor}, ${5:begf}, ${6:prior}, ${7:ndraw}, ${8:nomit}, ${9:r})$0",
"description": "function ylevf = recmf_g(y,nlag,nfor,begf,prior,ndraw,nomit,r)" 
},
"recmf_gd": {
"prefix": "recmf_gd",
"body": "recmf_gd$0",
"description": "recmf_gd" 
},
"rvar_V2": {
"prefix": "rvar_V2",
"body": "${1:results = }rvar(${2:y}, ${3:nlag}, ${4:w}, ${5:freq}, ${6:sig}, ${7:tau}, ${8:theta}, ${9:x})$0",
"description": "function results = rvar(y,nlag,w,freq,sig,tau,theta,x);" 
},
"rvar_d": {
"prefix": "rvar_d",
"body": "rvar_d$0",
"description": "rvar_d" 
},
"rvar_g": {
"prefix": "rvar_g",
"body": "${1:results = }rvar_g(${2:y}, ${3:nlag}, ${4:prior}, ${5:ndraw}, ${6:nomit}, ${7:x})$0",
"description": "function results = rvar_g(y,nlag,prior,ndraw,nomit,x);" 
},
"rvar_gd": {
"prefix": "rvar_gd",
"body": "rvar_gd$0",
"description": "rvar_gd" 
},
"rvarb": {
"prefix": "rvarb",
"body": "${1:bmat = }rvarb(${2:y}, ${3:nlag}, ${4:w}, ${5:freq}, ${6:sig}, ${7:tau}, ${8:theta}, ${9:x})$0",
"description": "function bmat = rvarb(y,nlag,w,freq,sig,tau,theta,x);" 
},
"rvarf": {
"prefix": "rvarf",
"body": "${1:ylevf = }rvarf(${2:y}, ${3:nlag}, ${4:w}, ${5:freq}, ${6:nfor}, ${7:begf}, ${8:sig}, ${9:tau}, ${10:theta}, ${11:x})$0",
"description": "function ylevf = rvarf(y,nlag,w,freq,nfor,begf,sig,tau,theta,x);" 
},
"rvarf_d": {
"prefix": "rvarf_d",
"body": "rvarf_d$0",
"description": "rvarf_d" 
},
"rvarf_g": {
"prefix": "rvarf_g",
"body": "${1:ylevf = }rvarf_g(${2:y}, ${3:nlag}, ${4:nfor}, ${5:begf}, ${6:prior}, ${7:ndraw}, ${8:nomit}, ${9:x})$0",
"description": "function ylevf = rvarf_g(y,nlag,nfor,begf,prior,ndraw,nomit,x);" 
},
"rvarf_gd": {
"prefix": "rvarf_gd",
"body": "rvarf_gd$0",
"description": "rvarf_gd" 
},
"scstd": {
"prefix": "scstd",
"body": "${1:scale = }scstd(${2:y}, ${3:nobs}, ${4:nlag})$0",
"description": "function scale = scstd(y,nobs,nlag)" 
},
"stvar": {
"prefix": "stvar",
"body": "${1:results = }stvar(${2:y}, ${3:param}, ${4:x})$0",
"description": "function results = stvar(y, param, x)" 
},
"stvar_d": {
"prefix": "stvar_d",
"body": "stvar_d$0",
"description": "stvar_d" 
},
"svar_V2": {
"prefix": "svar_V2",
"body": "${1:[a, b, a_se, b_se] = }svar(${2:results}, ${3:sa}, ${4:sb}, ${5:da}, ${6:db}, ${7:afree}, ${8:bfree})$0",
"description": "function [a,b,a_se,b_se]=svar(results,sa,sb,da,db,afree,bfree)" 
},
"svar_d": {
"prefix": "svar_d",
"body": "svar_d$0",
"description": "svar_d" 
},
"theil_g": {
"prefix": "theil_g",
"body": "${1:results = }theil_g(${2:y}, ${3:x}, ${4:prior}, ${5:ndraw}, ${6:nomit})$0",
"description": "function results = theil_g(y,x,prior,ndraw,nomit)" 
},
"theilbf": {
"prefix": "theilbf",
"body": "${1:result = }theilbf(${2:xpy}, ${3:xpx}, ${4:nlag}, ${5:neqs}, ${6:eqn}, ${7:theta}, ${8:weight}, ${9:decay}, ${10:scale2}, ${11:scale}, ${12:nx})$0",
"description": "function result = theilbf(xpy,xpx,nlag,neqs,eqn,theta,weight,decay,scale2,scale,nx)" 
},
"theilbv": {
"prefix": "theilbv",
"body": "${1:result = }theilbv(${2:y}, ${3:x}, ${4:nlag}, ${5:neqs}, ${6:eqn}, ${7:theta}, ${8:weight}, ${9:decay}, ${10:scale2}, ${11:scale}, ${12:nx})$0",
"description": "function result = theilbv(y,x,nlag,neqs,eqn,theta,weight,decay,scale2,scale,nx)" 
},
"var_resid": {
"prefix": "var_resid",
"body": "${1:resid = }var_resid(${2:y}, ${3:nlag}, ${4:x})$0",
"description": "function resid = var_resid(y,nlag,x)" 
},
"vare": {
"prefix": "vare",
"body": "${1:results = }vare(${2:y}, ${3:nlag}, ${4:x})$0",
"description": "function results = vare(y,nlag,x)" 
},
"vare_d": {
"prefix": "vare_d",
"body": "vare_d$0",
"description": "vare_d" 
},
"varf": {
"prefix": "varf",
"body": "${1:ylevf = }varf(${2:y}, ${3:nlag}, ${4:nfor}, ${5:begf}, ${6:x}, ${7:transf})$0",
"description": "function ylevf = varf(y,nlag,nfor,begf,x,transf);" 
},
"varf_d": {
"prefix": "varf_d",
"body": "varf_d$0",
"description": "varf_d" 
},
"estout": {
"prefix": "estout",
"body": "${1:TRes = }estout(${2:varargin})$0",
"description": "function TRes = estout(varargin)" 
},
"estoutFixedEffect": {
"prefix": "estoutFixedEffect",
"body": "${1:ResTable = }estoutFixedEffect(${2:lme}, ${3:varargin})$0",
"description": "function ResTable = estoutFixedEffect(lme,varargin)" 
},
"estoutLinear": {
"prefix": "estoutLinear",
"body": "${1:[ResTable, ResOutreg] = }estoutLinear(${2:lme}, ${3:varargin})$0",
"description": "function [ResTable,ResOutreg] = estoutLinear(lme,varargin)" 
},
"estoutRandomEffect": {
"prefix": "estoutRandomEffect",
"body": "${1:ResTable = }estoutRandomEffect(${2:lme}, ${3:varargin})$0",
"description": "function ResTable = estoutRandomEffect(lme,varargin)" 
},
"pvalue2star": {
"prefix": "pvalue2star",
"body": "${1:xstr = }pvalue2star(${2:xs})$0",
"description": "function xstr = pvalue2star(xs)" 
},
"strcatrobustOutreg": {
"prefix": "strcatrobustOutreg",
"body": "${1:B = }strcatrobustOutreg(${2:varargin})$0",
"description": "function B = strcatrobustOutreg(varargin)" 
},
"AKDEST1D": {
"prefix": "AKDEST1D",
"body": "${1:[y, h, hl] = }AKDEST1D(${2:x}, ${3:A}, ${4:k}, ${5:h})$0",
"description": "function [y,h,hl]=akdest1d(x,A,k,h)" 
},
"AKDEST2D": {
"prefix": "AKDEST2D",
"body": "${1:[z, h] = }AKDEST2D(${2:x}, ${3:y}, ${4:A}, ${5:k}, ${6:h})$0",
"description": "function [z,h]=akdest2d(x,y,A,k,h)" 
},
"BCV2": {
"prefix": "BCV2",
"body": "${1:z = }BCV2(${2:A}, ${3:h1}, ${4:h2})$0",
"description": "function z=bcv2(A,h1,h2)" 
},
"BKDEST1D": {
"prefix": "BKDEST1D",
"body": "${1:y = }BKDEST1D(${2:x}, ${3:A}, ${4:h})$0",
"description": "function y=bkdest1d(x,A,h)" 
},
"CBIWE": {
"prefix": "CBIWE",
"body": "${1:z = }CBIWE(${2:x}, ${3:y})$0",
"description": "function z=cbiwe(x,y)" 
},
"CEPAN": {
"prefix": "CEPAN",
"body": "${1:z = }CEPAN(${2:x})$0",
"description": "function z=cepan(x)" 
},
"CLAPL": {
"prefix": "CLAPL",
"body": "${1:z = }CLAPL(${2:x})$0",
"description": "function z=clapl(x)" 
},
"CLOGI": {
"prefix": "CLOGI",
"body": "${1:z = }CLOGI(${2:x})$0",
"description": "function z=clogi(x)" 
},
"CNORM": {
"prefix": "CNORM",
"body": "${1:z = }CNORM(${2:x}, ${3:y})$0",
"description": "function z=cnorm(x,y)" 
},
"COLORMEN": {
"prefix": "COLORMEN",
"body": "COLORMEN$0",
"description": "COLORMEN" 
},
"CONT75": {
"prefix": "CONT75",
"body": "${1:r = }CONT75(${2:x}, ${3:y}, ${4:A}, ${5:k}, ${6:sym}, ${7:h})$0",
"description": "function r=cont75(x,y,A,k,sym,h)" 
},
"CRECT": {
"prefix": "CRECT",
"body": "${1:z = }CRECT(${2:x}, ${3:y})$0",
"description": "function z=crect(x,y)" 
},
"CROSSVAL": {
"prefix": "CROSSVAL",
"body": "${1:c = }CROSSVAL(${2:A}, ${3:k}, ${4:h1}, ${5:h2})$0",
"description": "function c=crossval(A,k,h1,h2)" 
},
"CTRIA": {
"prefix": "CTRIA",
"body": "${1:z = }CTRIA(${2:x}, ${3:y})$0",
"description": "function z=ctria(x,y)" 
},
"CTRIW": {
"prefix": "CTRIW",
"body": "${1:z = }CTRIW(${2:x}, ${3:y})$0",
"description": "function z=ctriw(x,y)" 
},
"DENS3D": {
"prefix": "DENS3D",
"body": "${1:m = }DENS3D(${2:x}, ${3:y}, ${4:z}, ${5:n}, ${6:r})$0",
"description": "function m=dens3d(x,y,z,n,r)" 
},
"DENSITY": {
"prefix": "DENSITY",
"body": "${1:m = }DENSITY(${2:x}, ${3:y}, ${4:v}, ${5:s}, ${6:f})$0",
"description": "function m=density(x,y,v,s,f);" 
},
"DERIV": {
"prefix": "DERIV",
"body": "${1:[y4, y6, y8, y10] = }DERIV(${2:t}, ${3:k})$0",
"description": "function [y4,y6,y8,y10]=deriv(t,k)" 
},
"DIFFH": {
"prefix": "DIFFH",
"body": "${1:[Ds, Da] = }DIFFH(${2:A}, ${3:k}, ${4:h1}, ${5:h2}, ${6:inc})$0",
"description": "function [Ds,Da]=diffh(A,k,h1,h2,inc)" 
},
"DISCANAL": {
"prefix": "DISCANAL",
"body": "${1:c = }DISCANAL(${2:x}, ${3:A}, ${4:k}, ${5:h1}, ${6:h2})$0",
"description": "function c=discanal(x,A,k,h1,h2)" 
},
"DPLOTS": {
"prefix": "DPLOTS",
"body": "${1:m = }DPLOTS(${2:x}, ${3:y}, ${4:n}, ${5:f})$0",
"description": "function m=dplots(x,y,n,f)" 
},
"GRAD2KN": {
"prefix": "GRAD2KN",
"body": "${1:g = }GRAD2KN(${2:x}, ${3:y}, ${4:A}, ${5:h})$0",
"description": "function g=grad2kn(x,y,A,h)" 
},
"HBCV": {
"prefix": "HBCV",
"body": "${1:[h, hvec, score] = }HBCV(${2:A}, ${3:k}, ${4:steps})$0",
"description": "function [h,hvec,score]=hbcv(A,k,steps)" 
},
"HBCV2": {
"prefix": "HBCV2",
"body": "${1:h = }HBCV2(${2:A}, ${3:k})$0",
"description": "function h=hbcv2(A,k)" 
},
"HBOOT": {
"prefix": "HBOOT",
"body": "${1:[h, hvec, score] = }HBOOT(${2:A}, ${3:k}, ${4:steps})$0",
"description": "function [h,hvec,score]=hboot(A,k,steps)" 
},
"HDPI": {
"prefix": "HDPI",
"body": "${1:h = }HDPI(${2:A}, ${3:k}, ${4:l})$0",
"description": "function h=hdpi(A,k,l);" 
},
"HLSCV": {
"prefix": "HLSCV",
"body": "${1:[h, hvec, score] = }HLSCV(${2:A}, ${3:k}, ${4:steps})$0",
"description": "function [h,hvec,score]=hlscv(A,k,steps)" 
},
"HNS": {
"prefix": "HNS",
"body": "${1:h = }HNS(${2:A}, ${3:k})$0",
"description": "function h=hns(A,k)" 
},
"HSCV": {
"prefix": "HSCV",
"body": "${1:[h, hvec, score] = }HSCV(${2:A}, ${3:k}, ${4:steps})$0",
"description": "function [h,hvec,score]=hscv(A,k,steps)" 
},
"HSTE": {
"prefix": "HSTE",
"body": "${1:h = }HSTE(${2:A}, ${3:k})$0",
"description": "function h=hste(A,k)" 
},
"HSTT": {
"prefix": "HSTT",
"body": "${1:h = }HSTT(${2:A}, ${3:k})$0",
"description": "function h=hstt(A,k)" 
},
"HULL3D": {
"prefix": "HULL3D",
"body": "HULL3D(${2:data}, ${3:col})$0",
"description": "function hull3d(data,col)" 
},
"KBIWE": {
"prefix": "KBIWE",
"body": "${1:z = }KBIWE(${2:x}, ${3:y})$0",
"description": "function z=kbiwe(x,y)" 
},
"KB_BOUND": {
"prefix": "KB_BOUND",
"body": "${1:z = }KB_BOUND(${2:x}, ${3:p})$0",
"description": "function z=kb_bound(x,p)" 
},
"KB_INT": {
"prefix": "KB_INT",
"body": "${1:y = }KB_INT(${2:x}, ${3:l})$0",
"description": "function y=kb_intgrd(x,l)" 
},
"KDCONT": {
"prefix": "KDCONT",
"body": "${1:r = }KDCONT(${2:x}, ${3:y}, ${4:A}, ${5:k}, ${6:c}, ${7:h})$0",
"description": "function r=kdcont(x,y,A,k,c,h)" 
},
"KDDEMO2A": {
"prefix": "KDDEMO2A",
"body": "KDDEMO2A$0",
"description": "KDDEMO2A" 
},
"KDEDEMO1": {
"prefix": "KDEDEMO1",
"body": "KDEDEMO1$0",
"description": "KDEDEMO1" 
},
"KDEDEMO2": {
"prefix": "KDEDEMO2",
"body": "KDEDEMO2$0",
"description": "KDEDEMO2" 
},
"KDEDEMO3": {
"prefix": "KDEDEMO3",
"body": "KDEDEMO3$0",
"description": "KDEDEMO3" 
},
"KDEST1D": {
"prefix": "KDEST1D",
"body": "${1:[y, h] = }KDEST1D(${2:x}, ${3:A}, ${4:k}, ${5:h})$0",
"description": "function [y,h]=kdest1d(x,A,k,h)" 
},
"KDEST2D": {
"prefix": "KDEST2D",
"body": "${1:[z, h] = }KDEST2D(${2:x}, ${3:y}, ${4:A}, ${5:k}, ${6:h})$0",
"description": "function [z,h]=kdest2d(x,y,A,k,h)" 
},
"KDEST3D": {
"prefix": "KDEST3D",
"body": "${1:[z, h] = }KDEST3D(${2:x1}, ${3:x2}, ${4:x3}, ${5:A}, ${6:k}, ${7:h})$0",
"description": "function [z,h]=kdest3d(x1,x2,x3,A,k,h)" 
},
"KDFFT1": {
"prefix": "KDFFT1",
"body": "${1:[xa, y] = }KDFFT1(${2:A}, ${3:k}, ${4:inc}, ${5:h}, ${6:g})$0",
"description": "function [xa,y]=kdfft1(A,k,inc,h,g);" 
},
"KDFFT2": {
"prefix": "KDFFT2",
"body": "${1:[xa, ya, z] = }KDFFT2(${2:A}, ${3:k}, ${4:inc}, ${5:H}, ${6:g})$0",
"description": "function [xa,ya,z]=kdfft2(A,k,inc,H,g);" 
},
"KDINT2": {
"prefix": "KDINT2",
"body": "${1:h = }KDINT2(${2:A}, ${3:x}, ${4:y}, ${5:z})$0",
"description": "function h=kdint2(A,x,y,z)" 
},
"KDOPT2D": {
"prefix": "KDOPT2D",
"body": "${1:Y = }KDOPT2D(${2:A}, ${3:x0}, ${4:y0}, ${5:h}, ${6:maxi}, ${7:tol})$0",
"description": "function Y=kdopt2d(A,x0,y0,h,maxi,tol)" 
},
"KDPLOT": {
"prefix": "KDPLOT",
"body": "${1:[xa, ya, z, h, hl] = }KDPLOT(${2:A}, ${3:k}, ${4:inc}, ${5:adapt}, ${6:h}, ${7:g})$0",
"description": "function [xa,ya,z,h,hl]=kdplot(A,k,inc,adapt,h,g);" 
},
"KDPLOT3": {
"prefix": "KDPLOT3",
"body": "${1:[X, Y, Z, d, h] = }KDPLOT3(${2:A}, ${3:k}, ${4:inc}, ${5:h}, ${6:g}, ${7:haxis})$0",
"description": "function [X,Y,Z,d,h]=kdplot3(A,k,inc,h,g,haxis);" 
},
"KDSMPL1D": {
"prefix": "KDSMPL1D",
"body": "${1:z = }KDSMPL1D(${2:A}, ${3:k}, ${4:inc}, ${5:adapt}, ${6:ss}, ${7:h})$0",
"description": "function z=kdsmpl1d(A,k,inc,adapt,ss,h);" 
},
"KDSSMPL": {
"prefix": "KDSSMPL",
"body": "${1:z = }KDSSMPL(${2:A}, ${3:k}, ${4:adapt}, ${5:ss}, ${6:h})$0",
"description": "function z=kdssmpl(A,k,adapt,ss,h);" 
},
"KEPAN": {
"prefix": "KEPAN",
"body": "${1:z = }KEPAN(${2:x}, ${3:y})$0",
"description": "function z=kepan(x,y)" 
},
"KEPV2": {
"prefix": "KEPV2",
"body": "${1:z = }KEPV2(${2:x}, ${3:y})$0",
"description": "function z=kepv2(x,y)" 
},
"KEPV3": {
"prefix": "KEPV3",
"body": "${1:z = }KEPV3(${2:x}, ${3:y})$0",
"description": "function z=kepv3(x,y)" 
},
"KLAPL": {
"prefix": "KLAPL",
"body": "${1:z = }KLAPL(${2:x})$0",
"description": "function z=klapl(x)" 
},
"KLOGI": {
"prefix": "KLOGI",
"body": "${1:z = }KLOGI(${2:x})$0",
"description": "function z=klogi(x)" 
},
"KMVN": {
"prefix": "KMVN",
"body": "${1:z = }KMVN(${2:x})$0",
"description": "function z=kmvn(x)" 
},
"KNORM": {
"prefix": "KNORM",
"body": "${1:k = }KNORM(${2:x}, ${3:y}, ${4:z})$0",
"description": "function k=knorm(x,y,z)" 
},
"KN_BOUND": {
"prefix": "KN_BOUND",
"body": "${1:z = }KN_BOUND(${2:x}, ${3:p})$0",
"description": "function z=kn_bound(x,p)" 
},
"KN_INT": {
"prefix": "KN_INT",
"body": "${1:y = }KN_INT(${2:x}, ${3:l})$0",
"description": "function y=kn_int(x,l)" 
},
"KRECT": {
"prefix": "KRECT",
"body": "${1:z = }KRECT(${2:x}, ${3:y})$0",
"description": "function z=krect(x,y)" 
},
"KTRIA": {
"prefix": "KTRIA",
"body": "${1:z = }KTRIA(${2:x}, ${3:y})$0",
"description": "function z=ktria(x,y)" 
},
"KTRIW": {
"prefix": "KTRIW",
"body": "${1:z = }KTRIW(${2:x}, ${3:y})$0",
"description": "function z=ktriw(x,y)" 
},
"LCV": {
"prefix": "LCV",
"body": "${1:L = }LCV(${2:h}, ${3:A}, ${4:k})$0",
"description": "function L=lcv(h,A,k)" 
},
"MVCONT": {
"prefix": "MVCONT",
"body": "${1:[xa, ya, z, w] = }MVCONT(${2:p}, ${3:x}, ${4:y}, ${5:A}, ${6:k}, ${7:sym}, ${8:h})$0",
"description": "function [xa,ya,z,w]=pccont(p,x,y,A,k,sym,h)" 
},
"MVKDEST": {
"prefix": "MVKDEST",
"body": "${1:z = }MVKDEST(${2:x}, ${3:A}, ${4:k}, ${5:h})$0",
"description": "function z=mvkdest(x,A,k,h)" 
},
"NMD": {
"prefix": "NMD",
"body": "${1:M = }NMD(${2:h}, ${3:n}, ${4:w}, ${5:sigma}, ${6:mu})$0",
"description": "function M=nmd(h,n,w,sigma,mu)" 
},
"NMDPLOT": {
"prefix": "NMDPLOT",
"body": "${1:y = }NMDPLOT(${2:x}, ${3:w}, ${4:sigma}, ${5:mu}, ${6:g})$0",
"description": "function y=nmdplot(x,w,sigma,mu,g)" 
},
"OUTL2": {
"prefix": "OUTL2",
"body": "${1:[outl, index] = }OUTL2(${2:p}, ${3:A}, ${4:xa}, ${5:ya}, ${6:dgrid}, ${7:ddata})$0",
"description": "function [outl,index]=outl2(p,A,xa,ya,dgrid,ddata)" 
},
"PCCONT": {
"prefix": "PCCONT",
"body": "${1:[xa, ya, z, w] = }PCCONT(${2:p}, ${3:x}, ${4:y}, ${5:A}, ${6:k}, ${7:sym}, ${8:h})$0",
"description": "function [xa,ya,z,w]=pccont(p,x,y,A,k,sym,h)" 
},
"PCCONT1": {
"prefix": "PCCONT1",
"body": "${1:w = }PCCONT1(${2:p}, ${3:r})$0",
"description": "function w=pccont1(p,r)" 
},
"PCCONT2": {
"prefix": "PCCONT2",
"body": "${1:[xa, ya, z, w] = }PCCONT2(${2:p}, ${3:x}, ${4:y}, ${5:A}, ${6:k}, ${7:sym}, ${8:h})$0",
"description": "function [xa,ya,z,w]=pccont2(p,x,y,A,k,sym,h)" 
},
"PCCONT3": {
"prefix": "PCCONT3",
"body": "${1:outl = }PCCONT3(${2:p}, ${3:A}, ${4:k}, ${5:inc}, ${6:h})$0",
"description": "function outl=pccont3(p,A,k,inc,h)" 
},
"PCLVL1": {
"prefix": "PCLVL1",
"body": "${1:w = }PCLVL1(${2:p}, ${3:density})$0",
"description": "function w=pclvl1(p,density)" 
},
"PCLVL2": {
"prefix": "PCLVL2",
"body": "${1:w = }PCLVL2(${2:p}, ${3:density})$0",
"description": "function w=pclvl2(p,density)" 
},
"PCLVL3": {
"prefix": "PCLVL3",
"body": "${1:[outl, index, haxis] = }PCLVL3(${2:p}, ${3:A}, ${4:X}, ${5:Y}, ${6:Z}, ${7:dgrid}, ${8:ddata}, ${9:sstr})$0",
"description": "function [outl,index,haxis]=pclvl3(p,A,X,Y,Z,dgrid,ddata,sstr)" 
},
"PCLVL3A": {
"prefix": "PCLVL3A",
"body": "PCLVL3A(${2:p}, ${3:A}, ${4:X}, ${5:Y}, ${6:Z}, ${7:dgrid}, ${8:ddata}, ${9:sstr})$0",
"description": "function pclvl3a(p,A,X,Y,Z,dgrid,ddata,sstr)" 
},
"PCLVL3B": {
"prefix": "PCLVL3B",
"body": "PCLVL3B(${2:p}, ${3:A}, ${4:X}, ${5:Y}, ${6:Z}, ${7:dgrid}, ${8:ddata})$0",
"description": "function pclvl3b(p,A,X,Y,Z,dgrid,ddata)" 
},
"REPSAMP": {
"prefix": "REPSAMP",
"body": "${1:[Da, Ds] = }REPSAMP(${2:A}, ${3:k}, ${4:h}, ${5:ss}, ${6:n}, ${7:r})$0",
"description": "function [Da, Ds]=repsamp(A,k,h,ss,n,r)" 
},
"REPSNMD": {
"prefix": "REPSNMD",
"body": "${1:[Da, Ds] = }REPSNMD(${2:w}, ${3:sigma}, ${4:mu}, ${5:k}, ${6:ss}, ${7:n})$0",
"description": "function [Da,Ds]=repsnmd(w,sigma,mu,k,ss,n)" 
},
"SAMP1": {
"prefix": "SAMP1",
"body": "SAMP1$0",
"description": "SAMP1" 
},
"SAMPLE": {
"prefix": "SAMPLE",
"body": "${1:s = }SAMPLE(${2:A}, ${3:m}, ${4:r})$0",
"description": "function s=sample(A,m,r)" 
},
"SIQR": {
"prefix": "SIQR",
"body": "${1:y = }SIQR(${2:x})$0",
"description": "function y=siqr(x)" 
},
"SNMD": {
"prefix": "SNMD",
"body": "${1:S = }SNMD(${2:n}, ${3:w}, ${4:sigma}, ${5:mu})$0",
"description": "function S=snmd(n,w,sigma,mu)" 
},
"allfitdist": {
"prefix": "allfitdist",
"body": "${1:D PD = }allfitdist(${2:data}, ${3:sortby}, ${4:varargin})$0",
"description": "function [D PD] = allfitdist(data,sortby,varargin)" 
},
"sshist": {
"prefix": "sshist",
"body": "${1:[optN, optD, edges, C, N] = }sshist(${2:x}, ${3:N})$0",
"description": "function [optN, optD, edges, C, N] = sshist(x,N)" 
},
"sskernel": {
"prefix": "sskernel",
"body": "${1:[y, t, optw, W, C, confb95, yb] = }sskernel(${2:x}, ${3:tin}, ${4:W})$0",
"description": "function [y,t,optw,W,C,confb95,yb] = sskernel(x,tin,W)" 
},
"ssvkernel": {
"prefix": "ssvkernel",
"body": "${1:[y, t, optw, gs, C, confb95, yb] = }ssvkernel(${2:x}, ${3:tin})$0",
"description": "function [y,t,optw,gs,C,confb95,yb] = ssvkernel(x,tin)" 
},
"tutorial": {
"prefix": "tutorial",
"body": "tutorial$0",
"description": "tutorial" 
},
"._sshist": {
"prefix": "._sshist",
"body": "._sshist$0",
"description": "._sshist" 
},
"._sskernel": {
"prefix": "._sskernel",
"body": "._sskernel$0",
"description": "._sskernel" 
},
"._ssvkernel": {
"prefix": "._ssvkernel",
"body": "._ssvkernel$0",
"description": "._ssvkernel" 
},
"._tutorial": {
"prefix": "._tutorial",
"body": "._tutorial$0",
"description": "._tutorial" 
},
"CVLS": {
"prefix": "CVLS",
"body": "${1:cv = }CVLS(${2:h})$0",
"description": "function cv = CVLS(h)" 
},
"ghat - 副本": {
"prefix": "ghat - 副本",
"body": "${1:g = }ghat - 副本(${2:obs})$0",
"description": "function g = ghat(obs)" 
},
"ghatlrw": {
"prefix": "ghatlrw",
"body": "${1:g = }ghatlrw(${2:obs})$0",
"description": "function g = ghat(obs)" 
},
"main_vectorzied": {
"prefix": "main_vectorzied",
"body": "main_vectorzied$0",
"description": "main_vectorzied" 
},
"vsls": {
"prefix": "vsls",
"body": "${1:y = }vsls(${2:H})$0",
"description": "function y = cvls(H)" 
},
"kls": {
"prefix": "kls",
"body": "${1:res = }kls(${2:varargin})$0",
"description": "function res = kls(varargin)" 
},
"klsPredict": {
"prefix": "klsPredict",
"body": "${1:result_next = }klsPredict(${2:result}, ${3:xnext})$0",
"description": "function result_next = klsPredict(result,xnext)" 
},
"klsPredict_d": {
"prefix": "klsPredict_d",
"body": "klsPredict_d$0",
"description": "klsPredict_d" 
},
"kls_d": {
"prefix": "kls_d",
"body": "kls_d$0",
"description": "kls_d" 
},
"nonparamreg": {
"prefix": "nonparamreg",
"body": "${1:betanonp  tstats Fnp = }nonparamreg(${2:y}, ${3:x})$0",
"description": "function [betanonp  tstats Fnp]=nonparamReg(y,x);" 
},
"KLSVC": {
"prefix": "KLSVC",
"body": "${1:result = }KLSVC(${2:y}, ${3:x}, ${4:z}, ${5:hinit})$0",
"description": "function result = KLSVC(y,x,z,hinit)" 
},
"KLSVCboundary": {
"prefix": "KLSVCboundary",
"body": "${1:result = }KLSVCboundary(${2:y}, ${3:x}, ${4:z}, ${5:hinit})$0",
"description": "function result = KLSVCboundary(y,x,z,hinit)" 
},
"KLSVCfhat": {
"prefix": "KLSVCfhat",
"body": "${1:result = }KLSVCfhat(${2:y}, ${3:x}, ${4:z}, ${5:h}, ${6:xx}, ${7:zz})$0",
"description": "function result = KLSVCfhat(y,x,z,h,xx,zz)" 
},
"KLSVCfhat_d": {
"prefix": "KLSVCfhat_d",
"body": "KLSVCfhat_d$0",
"description": "KLSVCfhat_d" 
},
"KLSVaryingCV": {
"prefix": "KLSVaryingCV",
"body": "${1:result = }KLSVaryingCV(${2:y}, ${3:x}, ${4:z}, ${5:hinit})$0",
"description": "function result = KLSVaryingCV(y,x,z,hinit)" 
},
"KLSVaryingCV_d2": {
"prefix": "KLSVaryingCV_d2",
"body": "KLSVaryingCV_d2$0",
"description": "KLSVaryingCV_d2" 
},
"KLSVaryingPredict": {
"prefix": "KLSVaryingPredict",
"body": "${1:result_next = }KLSVaryingPredict(${2:result}, ${3:xnext}, ${4:znext})$0",
"description": "function result_next = KLSVaryingPredict(result,xnext,znext)" 
},
"cv_VC": {
"prefix": "cv_VC",
"body": "${1:ycv = }cv_VC(${2:h})$0",
"description": "function ycv = cv_VC(h)" 
},
"cv_VCboundary": {
"prefix": "cv_VCboundary",
"body": "${1:ycv = }cv_VCboundary(${2:h})$0",
"description": "function ycv = cv_VC(h)" 
},
"leaveOneOut": {
"prefix": "leaveOneOut",
"body": "leaveOneOut$0",
"description": "leaveOneOut" 
},
"leaveOneOutND": {
"prefix": "leaveOneOutND",
"body": "${1:SubND = }leaveOneOutND(${2:ND})$0",
"description": "function SubND = leaveOneOutND(ND)" 
},
"KLSTimeVaryingCV": {
"prefix": "KLSTimeVaryingCV",
"body": "${1:result = }KLSTimeVaryingCV(${2:y}, ${3:x})$0",
"description": "function result = KLSTimeVaryingCV(y,x)" 
},
"KLSVaryingPredict_d": {
"prefix": "KLSVaryingPredict_d",
"body": "KLSVaryingPredict_d$0",
"description": "KLSVaryingPredict_d" 
},
"cv": {
"prefix": "cv",
"body": "${1:ycv = }cv(${2:h})$0",
"description": "function ycv = cv(h)" 
},
"indexLOO": {
"prefix": "indexLOO",
"body": "${1:iSubMat = }indexLOO(${2:T})$0",
"description": "function iSubMat = indexLOO(T)" 
},
"indexLOOND_d": {
"prefix": "indexLOOND_d",
"body": "indexLOOND_d$0",
"description": "indexLOOND_d" 
},
"kernel": {
"prefix": "kernel",
"body": "${1:y = }kernel(${2:dx}, ${3:h})$0",
"description": "function y = kernel(dx,h)" 
},
"timevarying": {
"prefix": "timevarying",
"body": "timevarying$0",
"description": "timevarying" 
},
"ChowTestMulti": {
"prefix": "ChowTestMulti",
"body": "${1:CHT = }ChowTestMulti(${2:PriceMat}, ${3:startObs}, ${4:endObs}, ${5:Increment})$0",
"description": "function CHT = ChowTestMulti(PriceMat,startObs,endObs,Increment)" 
},
"chowtest (2)": {
"prefix": "chowtest (2)",
"body": "${1:resultf = }chowtest (2)(${2:yy}, ${3:xx}, ${4:tspan}, ${5:tspan1}, ${6:tspan2})$0",
"description": "function resultf = chowtest(yy, xx, tspan, tspan1, tspan2)" 
},
"chowtest (3)": {
"prefix": "chowtest (3)",
"body": "${1:resultf = }chowtest (3)(${2:yy}, ${3:xx}, ${4:tspan}, ${5:tspan1}, ${6:tspan2})$0",
"description": "function resultf = chowtest(yy, xx, tspan, tspan1, tspan2)" 
},
"chowtest": {
"prefix": "chowtest",
"body": "${1:[b_bint_t_pvalue, stats, F, F_p_value] = }chowtest(${2:dataset1}, ${3:dataset2})$0",
"description": "function [b_bint_t_pvalue, stats, F, F_p_value]=chowtest(dataset1,dataset2)" 
},
"chowtestlrw (2)": {
"prefix": "chowtestlrw (2)",
"body": "${1:[resultf, varargout] = }chowtestlrw (2)(${2:yy1}, ${3:xx1}, ${4:yy2}, ${5:xx2})$0",
"description": "function [resultf, varargout] = chowtestlrw(yy1, xx1, yy2, xx2)" 
},
"chowtestlrw": {
"prefix": "chowtestlrw",
"body": "${1:[resultf, varargout] = }chowtestlrw(${2:yy1}, ${3:xx1}, ${4:yy2}, ${5:xx2})$0",
"description": "function [resultf, varargout] = chowtestlrw(yy1, xx1, yy2, xx2)" 
},
"chowtestlrw_d (2)": {
"prefix": "chowtestlrw_d (2)",
"body": "chowtestlrw_d (2)$0",
"description": "chowtestlrw_d (2)" 
},
"chowtestlrw_d": {
"prefix": "chowtestlrw_d",
"body": "chowtestlrw_d$0",
"description": "function chowtestlrw_d" 
},
"chowtestorg (2)": {
"prefix": "chowtestorg (2)",
"body": "${1:resultf = }chowtestorg (2)(${2:yy}, ${3:xx}, ${4:tspan}, ${5:tspan1}, ${6:tspan2})$0",
"description": "function resultf = chowtestorg(yy, xx, tspan, tspan1, tspan2)" 
},
"chowtestorg": {
"prefix": "chowtestorg",
"body": "${1:resultf = }chowtestorg(${2:yy}, ${3:xx}, ${4:tspan}, ${5:tspan1}, ${6:tspan2})$0",
"description": "function resultf = chowtestorg(yy, xx, tspan, tspan1, tspan2)" 
},
"ols_weightPredict": {
"prefix": "ols_weightPredict",
"body": "${1:yhat = }ols_weightPredict(${2:ols}, ${3:xx})$0",
"description": "function yhat = ols_weightPredict(ols, xx)" 
},
"Example": {
"prefix": "Example",
"body": "Example$0",
"description": "Example" 
},
"MultiPolyRegress": {
"prefix": "MultiPolyRegress",
"body": "${1:reg = }MultiPolyRegress(${2:Data}, ${3:R}, ${4:PW}, ${5:varargin})$0",
"description": "function reg = MultiPolyRegress(Data,R,PW,varargin)" 
},
"quantilereg": {
"prefix": "quantilereg",
"body": "${1:beta tstats VCboot itrat PseudoR2 betaboot = }quantilereg(${2:y}, ${3:x}, ${4:p})$0",
"description": "function [beta tstats VCboot itrat PseudoR2 betaboot]=quantilereg(y,x,p)" 
},
"outreg": {
"prefix": "outreg",
"body": "${1:cellR = }outreg(${2:varargin})$0",
"description": "function cellR = outreg(varargin)" 
},
"outreg_d": {
"prefix": "outreg_d",
"body": "outreg_d$0",
"description": "outreg_d" 
},
"showreg": {
"prefix": "showreg",
"body": "${1:cellreg = }showreg(${2:varargin})$0",
"description": "function cellreg = showreg(varargin)" 
},
"dataGen": {
"prefix": "dataGen",
"body": "${1:datanew = }dataGen(${2:dataold})$0",
"description": "function datanew = dataGen(dataold)" 
},
"dataGen1": {
"prefix": "dataGen1",
"body": "${1:datanew = }dataGen1(${2:dataold})$0",
"description": "function datanew = dataGen1(dataold)" 
},
"dataGen2": {
"prefix": "dataGen2",
"body": "${1:datanew = }dataGen2(${2:dataold})$0",
"description": "function datanew = dataGen2(dataold)" 
},
"dataGen_d": {
"prefix": "dataGen_d",
"body": "dataGen_d$0",
"description": "dataGen_d" 
},
"linearmodelselect": {
"prefix": "linearmodelselect",
"body": "${1:res = }linearmodelselect(${2:Data}, ${3:mod}, ${4:feh}, ${5:nx})$0",
"description": "function res = linearmodelselect(Data, mod, feh, nx)" 
},
"linearmodelselect0": {
"prefix": "linearmodelselect0",
"body": "${1:res = }linearmodelselect0(${2:Data}, ${3:mod}, ${4:feh}, ${5:varargin})$0",
"description": "function res = linearmodelselect0(Data, mod, feh, varargin)" 
},
"linearmodelselect_d": {
"prefix": "linearmodelselect_d",
"body": "linearmodelselect_d$0",
"description": "linearmodelselect_d" 
},
"modelselect": {
"prefix": "modelselect",
"body": "${1:res = }modelselect(${2:Data}, ${3:mod}, ${4:feh}, ${5:nx})$0",
"description": "function res = modelselect(Data, mod, feh, nx)" 
},
"nFCV": {
"prefix": "nFCV",
"body": "${1:res = }nFCV(${2:D}, ${3:fh}, ${4:fph}, ${5:nfold}, ${6:varargin})$0",
"description": "function res = nFCV(D, fh, fph,nfold,varargin)" 
},
"nFCV10": {
"prefix": "nFCV10",
"body": "${1:res = }nFCV10(${2:D}, ${3:fh}, ${4:fph})$0",
"description": "function res = nFCV10(D, fh, fph)" 
},
"nFCV2 (2)": {
"prefix": "nFCV2 (2)",
"body": "${1:res = }nFCV2 (2)(${2:D}, ${3:fh}, ${4:fph})$0",
"description": "function res = nFCV2(D, fh, fph)" 
},
"nFCV2": {
"prefix": "nFCV2",
"body": "${1:res = }nFCV2(${2:D}, ${3:fh}, ${4:fph})$0",
"description": "function res = nFCV2(D, fh, fph)" 
},
"nFCV3": {
"prefix": "nFCV3",
"body": "${1:res = }nFCV3(${2:D}, ${3:fh}, ${4:fph})$0",
"description": "function res = nFCV3(D, fh, fph)" 
},
"nFCV5": {
"prefix": "nFCV5",
"body": "${1:res = }nFCV5(${2:D}, ${3:fh}, ${4:fph})$0",
"description": "function res = nFCV5(D, fh, fph)" 
},
"ols_power": {
"prefix": "ols_power",
"body": "${1:result = }ols_power(${2:yold}, ${3:xold})$0",
"description": "function result = ols_power(yold, xold)" 
},
"ols_power2": {
"prefix": "ols_power2",
"body": "${1:result = }ols_power2(${2:yold}, ${3:xold})$0",
"description": "function result = ols_power2(yold, xold)" 
},
"ols_power2_d": {
"prefix": "ols_power2_d",
"body": "ols_power2_d$0",
"description": "ols_power2_d" 
},
"ols_power_d": {
"prefix": "ols_power_d",
"body": "ols_power_d$0",
"description": "ols_power_d" 
},
"reg_robust": {
"prefix": "reg_robust",
"body": "reg_robust$0",
"description": "reg_robust" 
},
"reg_robust_d": {
"prefix": "reg_robust_d",
"body": "reg_robust_d$0",
"description": "reg_robust_d" 
},
"BCV": {
"prefix": "BCV",
"body": "${1:res = }BCV(${2:D}, ${3:fh}, ${4:fph}, ${5:varargin})$0",
"description": "function res = BCV(D, fh, fph,varargin)" 
},
"LOOCV": {
"prefix": "LOOCV",
"body": "${1:res = }LOOCV(${2:D}, ${3:fh}, ${4:fph}, ${5:varargin})$0",
"description": "function res = LOOCV(D, fh, fph,varargin)" 
},
"klsp": {
"prefix": "klsp",
"body": "${1:res = }klsp(${2:result}, ${3:varargin})$0",
"description": "function res = klsp(result, varargin)" 
},
"mse": {
"prefix": "mse",
"body": "${1:res = }mse(${2:y}, ${3:yhat})$0",
"description": "function res = mse(y, yhat)" 
},
"ols_V2": {
"prefix": "ols_V2",
"body": "${1:results = }ols(${2:varargin})$0",
"description": "function results=ols(varargin)" 
},
"ols_robust - Copy": {
"prefix": "ols_robust - Copy",
"body": "${1:results = }ols_robust - Copy(${2:varargin})$0",
"description": "function results=ols(varargin)" 
},
"ols_robust": {
"prefix": "ols_robust",
"body": "${1:results = }ols_robust(${2:varargin})$0",
"description": "function results=ols(varargin)" 
},
"ols_weight": {
"prefix": "ols_weight",
"body": "${1:res = }ols_weight(${2:varargin})$0",
"description": "function res =ols_weight(varargin)" 
},
"ols_weightp": {
"prefix": "ols_weightp",
"body": "${1:res = }ols_weightp(${2:result}, ${3:varargin})$0",
"description": "function res = ols_weightp(result, varargin)%, timespan, timespan1, timespan2)" 
},
"olsp": {
"prefix": "olsp",
"body": "${1:res = }olsp(${2:result}, ${3:yr}, ${4:xr})$0",
"description": "function res = olsp(result, yr, xr)%, timespan, timespan1, timespan2)" 
},
"rsquare": {
"prefix": "rsquare",
"body": "${1:r2 = }rsquare(${2:y}, ${3:yhat})$0",
"description": "function r2 = rsquare(y, yhat)" 
},
"KLSVaryingCVcell": {
"prefix": "KLSVaryingCVcell",
"body": "${1:res = }KLSVaryingCVcell(${2:yxzcell}, ${3:varargin})$0",
"description": "function res = KLSVaryingCVcell(yxzcell,varargin)" 
},
"addpath_jplv7": {
"prefix": "addpath_jplv7",
"body": "addpath_jplv7$0",
"description": "function addpath_jplv7()" 
},
"aicsbccell": {
"prefix": "aicsbccell",
"body": "${1:aic sbc = }aicsbccell(${2:ycell}, ${3:nlag}, ${4:varargin})$0",
"description": "function [aic sbc] = aicsbccell(ycell,nlag,varargin)" 
},
"cca_granger_regress_cell": {
"prefix": "cca_granger_regress_cell",
"body": "${1:[ret, hs] = }cca_granger_regress_cell(${2:Xcell}, ${3:PVAL}, ${4:NLAGS})$0",
"description": "function [ret, hs] = cca_granger_regress_cell(Xcell, PVAL,NLAGS)" 
},
"cca_granger_regress_cell_lrw2": {
"prefix": "cca_granger_regress_cell_lrw2",
"body": "${1:ret = }cca_granger_regress_cell_lrw2(${2:Xcell})$0",
"description": "function ret = cca_granger_regress_cell(Xcell)" 
},
"createLinearmodelstepwise": {
"prefix": "createLinearmodelstepwise",
"body": "${1:mdl = }createLinearmodelstepwise(${2:yxcell}, ${3:varargin})$0",
"description": "function mdl = createLinearmodelstepwise(yxcell,varargin)" 
},
"getbeta": {
"prefix": "getbeta",
"body": "${1:varargout = }getbeta(${2:res}, ${3:vnames})$0",
"description": "function varargout = getbeta(res, vnames)" 
},
"lowesspredictcell": {
"prefix": "lowesspredictcell",
"body": "${1:yy = }lowesspredictcell(${2:yxcell}, ${3:xx}, ${4:f})$0",
"description": "function yy = lowesspredictcell(yxcell,xx,f)" 
},
"nwestcell": {
"prefix": "nwestcell",
"body": "${1:res = }nwestcell(${2:yxcell}, ${3:nlag})$0",
"description": "function res = nwestcell(yxcell,nlag)" 
},
"ols_lrw": {
"prefix": "ols_lrw",
"body": "${1:results = }ols_lrw(${2:varargin})$0",
"description": "function results=ols(varargin)" 
},
"ols_weightcell": {
"prefix": "ols_weightcell",
"body": "${1:res = }ols_weightcell(${2:yxcell})$0",
"description": "function res = ols_weightcell(yxcell)" 
},
"olsar1cell": {
"prefix": "olsar1cell",
"body": "${1:res = }olsar1cell(${2:yxcell})$0",
"description": "function res = olsar1cell(yxcell)" 
},
"olsccell": {
"prefix": "olsccell",
"body": "${1:res = }olsccell(${2:yxcell})$0",
"description": "function res = olsccell(yxcell)" 
},
"olscell": {
"prefix": "olscell",
"body": "${1:res = }olscell(${2:yxcell})$0",
"description": "function res = olscell(yxcell)" 
},
"olsfastQ": {
"prefix": "olsfastQ",
"body": "${1:Q = }olsfastQ(${2:y}, ${3:x})$0",
"description": "function [Q] = olsfastQ(y,x)" 
},
"olstab": {
"prefix": "olstab",
"body": "${1:res = }olstab(${2:yxtab})$0",
"description": "function res = olstab(yxtab)" 
},
"olsweight": {
"prefix": "olsweight",
"body": "${1:res = }olsweight(${2:varargin})$0",
"description": "function res =olsweight(varargin)" 
},
"olsweigthfastQ": {
"prefix": "olsweigthfastQ",
"body": "${1:Q = }olsweigthfastQ(${2:y}, ${3:x})$0",
"description": "function Q = olsweigthfastQ(y,x)" 
},
"tsls_lrw": {
"prefix": "tsls_lrw",
"body": "${1:results = }tsls_lrw(${2:y}, ${3:y1}, ${4:x1}, ${5:xall})$0",
"description": "function results=tsls(y,y1,x1,xall)" 
},
"tslscell": {
"prefix": "tslscell",
"body": "${1:res = }tslscell(${2:yxcell}, ${3:xivcell})$0",
"description": "function res = tslscell(yxcell,xivcell)" 
},
"varecell": {
"prefix": "varecell",
"body": "${1:res ressum = }varecell(${2:ycell}, ${3:nlag}, ${4:xcell})$0",
"description": "function [res ressum] = varecell(ycell,nlag,xcell)" 
},
"aicsbc": {
"prefix": "aicsbc",
"body": "${1:out = }aicsbc(${2:y}, ${3:lag}, ${4:x})$0",
"description": "function out = aicsbc(y,lag,x)" 
},
"lrratio_exog": {
"prefix": "lrratio_exog",
"body": "lrratio_exog(${2:y}, ${3:lag}, ${4:simsc}, ${5:x_u}, ${6:x_r})$0",
"description": "function lrratio_exog(y,lag,simsc,x_u,x_r)" 
},
"lrratio_lags": {
"prefix": "lrratio_lags",
"body": "lrratio_lags(${2:y}, ${3:lag_u}, ${4:lag_r}, ${5:simsc}, ${6:x})$0",
"description": "function lrratio_lags(y,lag_u,lag_r,simsc,x)" 
},
"mv_qstat": {
"prefix": "mv_qstat",
"body": "mv_qstat(${2:y}, ${3:varlag}, ${4:testlag}, ${5:x})$0",
"description": "function 	mv_qstat(y,varlag,testlag,x)" 
},
"mv_sacf": {
"prefix": "mv_sacf",
"body": "${1:C = }mv_sacf(${2:x}, ${3:m}, ${4:vnames}, ${5:gflag})$0",
"description": "function 	C = mv_sacf(x,m,vnames,gflag)" 
},
"omnibus": {
"prefix": "omnibus",
"body": "omnibus(${2:x})$0",
"description": "function  	omnibus(x)" 
},
"rollcorr": {
"prefix": "rollcorr",
"body": "${1:out = }rollcorr(${2:y}, ${3:l}, ${4:gflag})$0",
"description": "function out = rollcorr(y,l,gflag);" 
},
"rollvar": {
"prefix": "rollvar",
"body": "${1:out = }rollvar(${2:y}, ${3:l}, ${4:t}, ${5:gflag})$0",
"description": "function out = rollvar(y,l,t,gflag);" 
},
"vech_up": {
"prefix": "vech_up",
"body": "${1:v = }vech_up(${2:x})$0",
"description": "function v = vech(x)" 
},
"vech_upc": {
"prefix": "vech_upc",
"body": "${1:v = }vech_upc(${2:x})$0",
"description": "function v = vech_upc(x)" 
},
"vech_upr": {
"prefix": "vech_upr",
"body": "${1:v = }vech_upr(${2:x})$0",
"description": "function v = vech_upr(x)" 
},
"x_big1": {
"prefix": "x_big1",
"body": "x_big1$0",
"description": "x_big1" 
},
"x_election2": {
"prefix": "x_election2",
"body": "x_election2$0",
"description": "x_election2" 
},
"x_housing1": {
"prefix": "x_housing1",
"body": "x_housing1$0",
"description": "x_housing1" 
},
"fcar2lrw": {
"prefix": "fcar2lrw",
"body": "${1:[bmax, srds, prhighers, emax, logliks] = }fcar2lrw(${2:x}, ${3:y}, ${4:d}, ${5:detvalz}, ${6:itersub})$0",
"description": "function [bmax, srds, prhighers, emax, logliks]=fcar2(x, y, d, detvalz, itersub)" 
},
"fdet_interp2lrw": {
"prefix": "fdet_interp2lrw",
"body": "${1:detvalz = }fdet_interp2lrw(${2:d}, ${3:sym}, ${4:alphacoarse}, ${5:alphafine})$0",
"description": "function [detvalz]=fdet_interp2(d, sym, alphacoarse, alphafine)" 
},
"x_car2_ga1": {
"prefix": "x_car2_ga1",
"body": "x_car2_ga1$0",
"description": "x_car2_ga1" 
},
"x_car2_mc1": {
"prefix": "x_car2_mc1",
"body": "x_car2_mc1$0",
"description": "x_car2_mc1" 
},
"X_chebyshev2": {
"prefix": "X_chebyshev2",
"body": "X_chebyshev2$0",
"description": "X_chebyshev2" 
},
"x_chebyshev_seq2": {
"prefix": "x_chebyshev_seq2",
"body": "x_chebyshev_seq2$0",
"description": "x_chebyshev_seq2" 
},
"x_closest_nn2": {
"prefix": "x_closest_nn2",
"body": "x_closest_nn2$0",
"description": "x_closest_nn2" 
},
"X_DELW2": {
"prefix": "X_DELW2",
"body": "X_DELW2$0",
"description": "X_DELW2" 
},
"X_DOUBLY2": {
"prefix": "X_DOUBLY2",
"body": "X_DOUBLY2$0",
"description": "X_DOUBLY2" 
},
"X_det_interp2": {
"prefix": "X_det_interp2",
"body": "X_det_interp2$0",
"description": "X_det_interp2" 
},
"x_det_interp_seq2": {
"prefix": "x_det_interp_seq2",
"body": "x_det_interp_seq2$0",
"description": "x_det_interp_seq2" 
},
"X_mc2": {
"prefix": "X_mc2",
"body": "X_mc2$0",
"description": "X_mc2" 
},
"x_mess_ar2_ga1": {
"prefix": "x_mess_ar2_ga1",
"body": "x_mess_ar2_ga1$0",
"description": "x_mess_ar2_ga1" 
},
"x_mess_ar2_mc1": {
"prefix": "x_mess_ar2_mc1",
"body": "x_mess_ar2_mc1$0",
"description": "x_mess_ar2_mc1" 
},
"x_mess_car2_ga1": {
"prefix": "x_mess_car2_ga1",
"body": "x_mess_car2_ga1$0",
"description": "x_mess_car2_ga1" 
},
"x_mix2_ga1": {
"prefix": "x_mix2_ga1",
"body": "x_mix2_ga1$0",
"description": "x_mix2_ga1" 
},
"x_multi2": {
"prefix": "x_multi2",
"body": "x_multi2$0",
"description": "x_multi2" 
},
"x_neighbors2": {
"prefix": "x_neighbors2",
"body": "x_neighbors2$0",
"description": "x_neighbors2" 
},
"x_ols2_ga1": {
"prefix": "x_ols2_ga1",
"body": "x_ols2_ga1$0",
"description": "x_ols2_ga1" 
},
"x_sale_2_ga1": {
"prefix": "x_sale_2_ga1",
"body": "x_sale_2_ga1$0",
"description": "x_sale_2_ga1" 
},
"x_sar2_ga1": {
"prefix": "x_sar2_ga1",
"body": "x_sar2_ga1$0",
"description": "x_sar2_ga1" 
},
"x_sar2_mc1": {
"prefix": "x_sar2_mc1",
"body": "x_sar2_mc1$0",
"description": "x_sar2_mc1" 
},
"x_spatiotemporal2": {
"prefix": "x_spatiotemporal2",
"body": "x_spatiotemporal2$0",
"description": "x_spatiotemporal2" 
},
"latextab2": {
"prefix": "latextab2",
"body": "latextab2(${2:z}, ${3:info})$0",
"description": "function latextab2(z, info)" 
},
"tab2": {
"prefix": "tab2",
"body": "tab2(${2:y}, ${3:info})$0",
"description": "function tab2(y, info)" 
},
"tabprint2": {
"prefix": "tabprint2",
"body": "${1:tabout = }tabprint2(${2:z}, ${3:info})$0",
"description": "function tabout=tabprint2(z, info)" 
},
"denton_V3": {
"prefix": "denton_V3",
"body": "${1:res = }denton(${2:Y}, ${3:x}, ${4:z}, ${5:ta}, ${6:sc}, ${7:d}, ${8:op1})$0",
"description": "function res = denton(Y,x,z,ta,sc,d,op1)" 
},
"denton_uni_V2": {
"prefix": "denton_uni_V2",
"body": "${1:res = }denton_uni(${2:Y}, ${3:x}, ${4:ta}, ${5:d}, ${6:sc}, ${7:op1}, ${8:op2})$0",
"description": "function res = denton_uni(Y,x,ta,d,sc,op1,op2)" 
},
"ras": {
"prefix": "ras",
"body": "${1:F1 = }ras(${2:F0}, ${3:x0}, ${4:x1}, ${5:v}, ${6:u}, ${7:opG})$0",
"description": "function F1 = ras(F0,x0,x1,v,u,opG)" 
},
"ras_d": {
"prefix": "ras_d",
"body": "ras_d$0",
"description": "ras_d" 
},
"averday": {
"prefix": "averday",
"body": "${1:res = }averday(${2:x})$0",
"description": "function res=averday(x)" 
},
"momentum": {
"prefix": "momentum",
"body": "${1:[resultat, t, p] = }momentum(${2:index}, ${3:J}, ${4:L})$0",
"description": "function [resultat,t,p]=momentum(index,J,L)" 
},
"rkp": {
"prefix": "rkp",
"body": "${1:A = }rkp(${2:vec}, ${3:k})$0",
"description": "function A=rkp(vec,k)" 
},
"rob_TRB": {
"prefix": "rob_TRB",
"body": "${1:[Ntrading, nb, ns, yb, ys, yb_s, B, S, BS] = }rob_TRB(${2:x}, ${3:H}, ${4:tax}, ${5:time_lag})$0",
"description": "function [Ntrading,nb,ns,yb,ys,yb_s,B,S,BS]=rob_TRB(x,H,tax,time_lag)" 
},
"rob_TRBB": {
"prefix": "rob_TRBB",
"body": "${1:F = }rob_TRBB(${2:x}, ${3:H}, ${4:tax}, ${5:time_lag}, ${6:n})$0",
"description": "function F=rob_TRBB(x,H,tax,time_lag,n)" 
},
"rob_VMA": {
"prefix": "rob_VMA",
"body": "${1:[Ntrading, nb, ns, yb, ys, yb_s, B, S, BS] = }rob_VMA(${2:x}, ${3:s}, ${4:l}, ${5:band}, ${6:tax}, ${7:time_lag})$0",
"description": "function [Ntrading,nb,ns,yb,ys,yb_s,B,S,BS]=rob_VMA(x,s,l,band,tax,time_lag)" 
},
"rob_VMAB": {
"prefix": "rob_VMAB",
"body": "${1:F = }rob_VMAB(${2:x}, ${3:s}, ${4:l}, ${5:band}, ${6:tax}, ${7:time_lag}, ${8:n})$0",
"description": "function F=rob_VMAB(x,s,l,band,tax,time_lag,n)" 
},
"rob_forecasting": {
"prefix": "rob_forecasting",
"body": "${1:[Ntrading, nb, ns, yb, ys, yb_s, B, S, BS] = }rob_forecasting(${2:x}, ${3:tax}, ${4:time_lag}, ${5:H})$0",
"description": "function [Ntrading,nb,ns,yb,ys,yb_s,B,S,BS]=rob_forecasting(x,tax,time_lag,H)" 
},
"rob_forecastingB": {
"prefix": "rob_forecastingB",
"body": "${1:F = }rob_forecastingB(${2:x}, ${3:tax}, ${4:time_lag}, ${5:H}, ${6:n})$0",
"description": "function F=rob_forecastingB(x,tax,time_lag,H,n)" 
},
"ttest3": {
"prefix": "ttest3",
"body": "${1:[tval, p, ci, h, stats] = }ttest3(${2:x}, ${3:m}, ${4:alpha}, ${5:tail}, ${6:dim})$0",
"description": "function [tval,p,ci,h,stats] = ttest3(x,m,alpha,tail,dim)" 
},
"vrt": {
"prefix": "vrt",
"body": "${1:[VR, Zk, Zhk] = }vrt(${2:x}, ${3:k})$0",
"description": "function [VR,Zk,Zhk]=vrt(x,k)" 
},
"wild_boot": {
"prefix": "wild_boot",
"body": "${1:res = }wild_boot(${2:X}, ${3:l}, ${4:n})$0",
"description": "function res=wild_boot(X,l,n)" 
},
"xrand": {
"prefix": "xrand",
"body": "${1:[V, Z1, Z2, p1, p2] = }xrand(${2:x}, ${3:k}, ${4:n})$0",
"description": "function [V,Z1,Z2,p1,p2]=xrand(x,k,n)" 
},
"xrand2": {
"prefix": "xrand2",
"body": "${1:[V, Z1, Z2, p1, p2] = }xrand2(${2:x}, ${3:k}, ${4:n})$0",
"description": "function [V,Z1,Z2,p1,p2]=xrand2(x,k,n)" 
},
"xrand3": {
"prefix": "xrand3",
"body": "${1:[V, Z1, Z2, p1, p2] = }xrand3(${2:x}, ${3:k}, ${4:n})$0",
"description": "function [V,Z1,Z2,p1,p2]=xrand3(x,k,n)" 
},
"matds": {
"prefix": "matds",
"body": "${1:varargout = }matds(${2:varargin})$0",
"description": "function varargout = matds(varargin)" 
},
"Check_And_Delete": {
"prefix": "Check_And_Delete",
"body": "${1:pass = }Check_And_Delete(${2:namefiles})$0",
"description": "function pass = Check_And_Write(namefiles)" 
},
"Check_And_Load": {
"prefix": "Check_And_Load",
"body": "${1:pass = }Check_And_Load(${2:namefiles})$0",
"description": "function pass = Check_And_Load(namefiles)" 
},
"Check_And_Write": {
"prefix": "Check_And_Write",
"body": "${1:pass = }Check_And_Write(${2:namefiles})$0",
"description": "function pass = Check_And_Write(namefiles)" 
},
"ColorPlot2Dtraj": {
"prefix": "ColorPlot2Dtraj",
"body": "ColorPlot2Dtraj$0",
"description": "function mColorPlot2Dtraj;" 
},
"ColorPlot3Dtraj": {
"prefix": "ColorPlot3Dtraj",
"body": "ColorPlot3Dtraj$0",
"description": "function mColorPlot3Dtraj;" 
},
"ColorPlotTraj": {
"prefix": "ColorPlotTraj",
"body": "ColorPlotTraj$0",
"description": "function ColorPlotTraj;" 
},
"Delete2D": {
"prefix": "Delete2D",
"body": "${1:res = }Delete2D$0",
"description": "function res=Delete2D;" 
},
"Deletewin": {
"prefix": "Deletewin",
"body": "Deletewin$0",
"description": "function Deletewin;" 
},
"EquilibriaPlot2D": {
"prefix": "EquilibriaPlot2D",
"body": "EquilibriaPlot2D$0",
"description": "function EquilibriaPlot2D;" 
},
"EquilibriaPlot3D": {
"prefix": "EquilibriaPlot3D",
"body": "EquilibriaPlot3D$0",
"description": "function EquilibriaPlot3D;" 
},
"Load_point": {
"prefix": "Load_point",
"body": "Load_point$0",
"description": "function Load_point;" 
},
"Open2DWin": {
"prefix": "Open2DWin",
"body": "${1:varargout = }Open2DWin(${2:varargin})$0",
"description": "function varargout = Open2DWin(varargin)" 
},
"Open3DWin": {
"prefix": "Open3DWin",
"body": "${1:varargout = }Open3DWin(${2:varargin})$0",
"description": "function varargout = Open3DWin(varargin)" 
},
"PoincarePlot2D": {
"prefix": "PoincarePlot2D",
"body": "PoincarePlot2D$0",
"description": "function PoincarePlot2D;" 
},
"PoincarePlot3D": {
"prefix": "PoincarePlot3D",
"body": "PoincarePlot3D$0",
"description": "function PoincarePlot3D;" 
},
"PointSizeSet": {
"prefix": "PointSizeSet",
"body": "PointSizeSet$0",
"description": "function PointSizeSet;" 
},
"RegionPlot2D": {
"prefix": "RegionPlot2D",
"body": "RegionPlot2D$0",
"description": "function mRegionPlot2D;" 
},
"RegionPlot3D": {
"prefix": "RegionPlot3D",
"body": "RegionPlot3D$0",
"description": "function mRegionPlot3D;" 
},
"Save_As": {
"prefix": "Save_As",
"body": "${1:varargout = }Save_As(${2:h}, ${3:eventdata}, ${4:handles}, ${5:varargin})$0",
"description": "function varargout = Save_As(h, eventdata, handles, varargin)" 
},
"Save_point": {
"prefix": "Save_point",
"body": "Save_point$0",
"description": "function Save_point;" 
},
"TimeIndication": {
"prefix": "TimeIndication",
"body": "TimeIndication$0",
"description": "function TimeIndication" 
},
"TrjPlot2D": {
"prefix": "TrjPlot2D",
"body": "TrjPlot2D$0",
"description": "function TrjPlot2D;" 
},
"TrjPlot3D": {
"prefix": "TrjPlot3D",
"body": "TrjPlot3D$0",
"description": "function TrjPlot3D;" 
},
"about": {
"prefix": "about",
"body": "${1:varargout = }about(${2:varargin})$0",
"description": "function varargout = about(varargin)" 
},
"calc_driver": {
"prefix": "calc_driver",
"body": "${1:varargout = }calc_driver(${2:varargin})$0",
"description": "function varargout = calc_driver(varargin)" 
},
"checksymb": {
"prefix": "checksymb",
"body": "${1:res = }checksymb(${2:symbl})$0",
"description": "function res = checksymb(symbl)" 
},
"clear2Dtraj": {
"prefix": "clear2Dtraj",
"body": "clear2Dtraj$0",
"description": "function clear2Dtraj;" 
},
"clear3Dtraj": {
"prefix": "clear3Dtraj",
"body": "clear3Dtraj$0",
"description": "function clear3Dtraj;" 
},
"clear_all2D": {
"prefix": "clear_all2D",
"body": "clear_all2D$0",
"description": "function clear_all2D" 
},
"clear_all3D": {
"prefix": "clear_all3D",
"body": "clear_all3D$0",
"description": "function clear_all3D" 
},
"clear_buffer": {
"prefix": "clear_buffer",
"body": "clear_buffer$0",
"description": "function clear_buffer" 
},
"close_matds": {
"prefix": "close_matds",
"body": "${1:varargout = }close_matds(${2:h}, ${3:eventdata}, ${4:handles}, ${5:varargin})$0",
"description": "function varargout=mExit_Callback(h,eventdata,handles,varargin)" 
},
"close_win": {
"prefix": "close_win",
"body": "close_win$0",
"description": "function close_win;" 
},
"delete_files": {
"prefix": "delete_files",
"body": "delete_files$0",
"description": "function delete_files;" 
},
"expr_check": {
"prefix": "expr_check",
"body": "${1:[rescode, exprcorr, ss] = }expr_check(${2:exprin}, ${3:DS})$0",
"description": "function [rescode,exprcorr,ss]=expr_check(exprin,DS);" 
},
"field2d": {
"prefix": "field2d",
"body": "${1:varargout = }field2d(${2:varargin})$0",
"description": "function varargout = field2d(varargin)" 
},
"field2draw": {
"prefix": "field2draw",
"body": "field2draw$0",
"description": "function field2draw;" 
},
"field3d": {
"prefix": "field3d",
"body": "${1:varargout = }field3d(${2:varargin})$0",
"description": "function varargout = field3d(varargin)" 
},
"field3draw": {
"prefix": "field3draw",
"body": "field3draw$0",
"description": "function field3draw;" 
},
"func_list": {
"prefix": "func_list",
"body": "${1:[lowlist, uplist] = }func_list$0",
"description": "function [lowlist,uplist]=func_list" 
},
"itegrdata": {
"prefix": "itegrdata",
"body": "${1:varargout = }itegrdata(${2:varargin})$0",
"description": "function varargout = itegrdata(varargin)" 
},
"lyapunov_set": {
"prefix": "lyapunov_set",
"body": "${1:varargout = }lyapunov_set(${2:varargin})$0",
"description": "function varargout = lyapunov_set(varargin)" 
},
"mColorPlot2Dtraj": {
"prefix": "mColorPlot2Dtraj",
"body": "mColorPlot2Dtraj$0",
"description": "function mColorPlot2Dtraj;" 
},
"mExit_Callback": {
"prefix": "mExit_Callback",
"body": "${1:varargout = }mExit_Callback$0",
"description": "function varargout=mExit_Callback" 
},
"mOpen_Callback": {
"prefix": "mOpen_Callback",
"body": "${1:varargout = }mOpen_Callback(${2:h}, ${3:eventdata}, ${4:handles}, ${5:varargin})$0",
"description": "function varargout = mOpen_Callback(h, eventdata, handles, varargin)" 
},
"mRegionPlot2D": {
"prefix": "mRegionPlot2D",
"body": "mRegionPlot2D$0",
"description": "function mRegionPlot2D;" 
},
"mSave_Callback": {
"prefix": "mSave_Callback",
"body": "${1:varargout = }mSave_Callback(${2:h}, ${3:eventdata}, ${4:handles}, ${5:varargin})$0",
"description": "function varargout = mOpen_Callback(h, eventdata, handles, varargin)" 
},
"mTrajectoryPlot2D": {
"prefix": "mTrajectoryPlot2D",
"body": "mTrajectoryPlot2D$0",
"description": "function mTrajectoryPlot2D;" 
},
"new_trajectories": {
"prefix": "new_trajectories",
"body": "${1:res = }new_trajectories(${2:window_head})$0",
"description": "function res=new_trajectories(window_head);" 
},
"newtraj2D": {
"prefix": "newtraj2D",
"body": "newtraj2D$0",
"description": "function newtraj2D;" 
},
"newtraj3D": {
"prefix": "newtraj3D",
"body": "newtraj3D$0",
"description": "function newtraj3D;" 
},
"odeoutp": {
"prefix": "odeoutp",
"body": "${1:status = }odeoutp(${2:time}, ${3:Xsol}, ${4:flag}, ${5:varargin})$0",
"description": "function status = odeoutp(time,Xsol,flag,varargin)" 
},
"open_files": {
"prefix": "open_files",
"body": "open_files$0",
"description": "function open_files;" 
},
"param_set": {
"prefix": "param_set",
"body": "${1:varargout = }param_set(${2:varargin})$0",
"description": "function varargout = param_set(varargin)" 
},
"poincare_set": {
"prefix": "poincare_set",
"body": "${1:varargout = }poincare_set(${2:varargin})$0",
"description": "function varargout = poincare_set(varargin)" 
},
"redraw2d": {
"prefix": "redraw2d",
"body": "redraw2d$0",
"description": "function redraw2d;" 
},
"redraw3d": {
"prefix": "redraw3d",
"body": "redraw3d$0",
"description": "function redraw3d;" 
},
"stream3draw": {
"prefix": "stream3draw",
"body": "stream3draw$0",
"description": "function stream3draw;" 
},
"streamtube_plot": {
"prefix": "streamtube_plot",
"body": "${1:varargout = }streamtube_plot(${2:varargin})$0",
"description": "function varargout = streamtube_plot(varargin)" 
},
"symbfind": {
"prefix": "symbfind",
"body": "${1:[r, s] = }symbfind$0",
"description": "function [r,s]=symbfind;" 
},
"system_gen": {
"prefix": "system_gen",
"body": "${1:errcode = }system_gen$0",
"description": "function errcode=system_gen;" 
},
"systemdef": {
"prefix": "systemdef",
"body": "${1:varargout = }systemdef(${2:varargin})$0",
"description": "function varargout = systemdef(varargin)" 
},
"systemedit": {
"prefix": "systemedit",
"body": "${1:varargout = }systemedit(${2:varargin})$0",
"description": "function varargout = systemedit(varargin)" 
},
"update_ds": {
"prefix": "update_ds",
"body": "update_ds$0",
"description": "function update_ds;" 
},
"update_opt_last": {
"prefix": "update_opt_last",
"body": "update_opt_last$0",
"description": "function update_opt_last;" 
},
"var_set2d": {
"prefix": "var_set2d",
"body": "${1:varargout = }var_set2d(${2:varargin})$0",
"description": "function varargout = var_set2D(varargin)" 
},
"var_set3d": {
"prefix": "var_set3d",
"body": "${1:varargout = }var_set3d(${2:varargin})$0",
"description": "function varargout = var_set3D(varargin)" 
},
"vars_set": {
"prefix": "vars_set",
"body": "${1:varargout = }vars_set(${2:varargin})$0",
"description": "function varargout = vars_set(varargin)" 
},
"equil_find": {
"prefix": "equil_find",
"body": "${1:[zres, fval, niter, code] = }equil_find(${2:t}, ${3:z0})$0",
"description": "function  [zres,fval,niter,code] = equil_find(t, z0)" 
},
"equilibria": {
"prefix": "equilibria",
"body": "equilibria$0",
"description": "function equilibria;" 
},
"integrator": {
"prefix": "integrator",
"body": "${1:[T, Y] = }integrator(${2:method}, ${3:rhsfunc}, ${4:interval}, ${5:initialval}, ${6:options}, ${7:varargin})$0",
"description": "function [T,Y]=integrator(method,rhsfunc,interval,initialval,options,varargin);" 
},
"lyapunov_V2": {
"prefix": "lyapunov_V2",
"body": "${1:[Texp, Lexp] = }lyapunov(${2:n}, ${3:tstart}, ${4:stept}, ${5:tend}, ${6:ystart}, ${7:ioutp})$0",
"description": "function [Texp,Lexp]=lyapunov(n,tstart,stept,tend,ystart,ioutp);" 
},
"ode78": {
"prefix": "ode78",
"body": "${1:[tout, xout] = }ode78(${2:odefun}, ${3:tspan}, ${4:x0}, ${5:options}, ${6:varargin})$0",
"description": "function [tout,xout] = ode78(odefun,tspan,x0,options,varargin)" 
},
"ode87": {
"prefix": "ode87",
"body": "${1:[tout, xout] = }ode87(${2:odefun}, ${3:tspan}, ${4:x0}, ${5:options}, ${6:varargin})$0",
"description": "function [tout,xout] = ode87(odefun,tspan,x0,options,varargin)" 
},
"ode_jacob": {
"prefix": "ode_jacob",
"body": "${1:Jcb = }ode_jacob(${2:t}, ${3:X}, ${4:P})$0",
"description": "function Jcb = ode_jacob(t,X,P)" 
},
"ode_lin": {
"prefix": "ode_lin",
"body": "${1:f = }ode_lin(${2:t}, ${3:X}, ${4:P}, ${5:n}, ${6:neq}, ${7:n_exp})$0",
"description": "function [f] = ode_lin( t, X, P, n, neq, n_exp )" 
},
"oderhs": {
"prefix": "oderhs",
"body": "${1:dy = }oderhs(${2:t}, ${3:X}, ${4:P})$0",
"description": "function dy = oderhs(t,X,P)" 
},
"NewtonRaphson": {
"prefix": "NewtonRaphson",
"body": "${1:[x, F, JAC, EXITFLAG] = }NewtonRaphson(${2:FUN}, ${3:x}, ${4:lambda}, ${5:maxIter}, ${6:Display})$0",
"description": "function [x,F,JAC,EXITFLAG] = NewtonRaphson(FUN,x,lambda, maxIter ,Display)" 
},
"adaption": {
"prefix": "adaption",
"body": "${1:sigma = }adaption(${2:sigma}, ${3:success}, ${4:Nv})$0",
"description": "function sigma=adaption(sigma,success,Nv)" 
},
"annealing": {
"prefix": "annealing",
"body": "${1:X_best f_best nd = }annealing$0",
"description": "function [X_best f_best nd]=annealing()" 
},
"best_initial": {
"prefix": "best_initial",
"body": "${1:X f_old = }best_initial(${2:X1}, ${3:X2}, ${4:X3}, ${5:X4})$0",
"description": "function [X f_old]=best_initial(X1,X2,X3,X4)" 
},
"boltz": {
"prefix": "boltz",
"body": "${1:out f_out = }boltz(${2:Xp}, ${3:X}, ${4:f_new}, ${5:f_old}, ${6:c_norm}, ${7:T})$0",
"description": "function [out f_out]=boltz(Xp,X,f_new,f_old,c_norm,T)" 
},
"check_constr_drs": {
"prefix": "check_constr_drs",
"body": "${1:out = }check_constr_drs(${2:dRs})$0",
"description": "function out=check_constr_drs(dRs)" 
},
"check_constr_r2": {
"prefix": "check_constr_r2",
"body": "${1:out = }check_constr_r2(${2:Rs}, ${3:dRs})$0",
"description": "function out=check_constr_r2(Rs,dRs)" 
},
"check_constr_rs": {
"prefix": "check_constr_rs",
"body": "${1:out = }check_constr_rs(${2:Rs})$0",
"description": "function out=check_constr_rs(Rs)" 
},
"check_constr_zs": {
"prefix": "check_constr_zs",
"body": "${1:out = }check_constr_zs(${2:Zs})$0",
"description": "function out=check_constr_zs(Zs)" 
},
"energy": {
"prefix": "energy",
"body": "${1:U = }energy(${2:Qs}, ${3:rs}, ${4:drs}, ${5:z_s})$0",
"description": "function U=energy(Qs,rs,drs,z_s)" 
},
"energy_c": {
"prefix": "energy_c",
"body": "energy_c$0",
"description": "energy_c" 
},
"f": {
"prefix": "f",
"body": "${1:out = }f(${2:Qs}, ${3:rs}, ${4:drs}, ${5:zs})$0",
"description": "function out=f(Qs,rs,drs,zs)" 
},
"field_worst": {
"prefix": "field_worst",
"body": "field_worst$0",
"description": "field_worst" 
},
"p_search": {
"prefix": "p_search",
"body": "${1:x_out Ob_out = }p_search(${2:x}, ${3:Ob}, ${4:p}, ${5:n0}, ${6:m})$0",
"description": "function [x_out Ob_out]=p_search(x, Ob, p, n0, m)" 
},
"pattern": {
"prefix": "pattern",
"body": "${1:[x0, Ob_init, i, pl] = }pattern(${2:x_init}, ${3:Max}, ${4:tol}, ${5:p}, ${6:n0})$0",
"description": "function [x0,Ob_init,i,pl]=pattern(x_init,Max,tol,p,n0)" 
},
"perturbation": {
"prefix": "perturbation",
"body": "${1:Xp = }perturbation(${2:X}, ${3:sigma})$0",
"description": "function Xp=perturbation(X,sigma)" 
},
"start_annealing": {
"prefix": "start_annealing",
"body": "start_annealing$0",
"description": "start_annealing" 
},
"start_points": {
"prefix": "start_points",
"body": "${1:X1 X2 X3 X4 = }start_points(${2:n})$0",
"description": "function [X1 X2 X3 X4]=start_points(n)" 
},
"example_MINLPc": {
"prefix": "example_MINLPc",
"body": "example_MINLPc$0",
"description": "function example" 
},
"example_NLP": {
"prefix": "example_NLP",
"body": "example_NLP$0",
"description": "function example" 
},
"example_parallel": {
"prefix": "example_parallel",
"body": "example_parallel$0",
"description": "function example" 
},
"midaco": {
"prefix": "midaco",
"body": "${1:solution = }midaco(${2:problem}, ${3:option}, ${4:key})$0",
"description": "function [ solution ] = midaco( problem, option, key )" 
},
"Newton_Raphson_Symbolic_Math_Example": {
"prefix": "Newton_Raphson_Symbolic_Math_Example",
"body": "Newton_Raphson_Symbolic_Math_Example$0",
"description": "Newton_Raphson_Symbolic_Math_Example" 
},
"symbolic_gradient_hessian": {
"prefix": "symbolic_gradient_hessian",
"body": "${1:grad hess = }symbolic_gradient_hessian(${2:f}, ${3:X})$0",
"description": "function [grad hess] = symbolic_gradient_hessian(f,X)" 
},
"symbolic_newton_raphson": {
"prefix": "symbolic_newton_raphson",
"body": "${1:[xopt, num_iter, status_code, status_message] = }symbolic_newton_raphson(${2:X}, ${3:Xinit}, ${4:grad}, ${5:hess})$0",
"description": "function [xopt,num_iter,status_code,status_message] = symbolic_newton_raphson(X, Xinit, grad, hess)" 
},
"non_linear_system": {
"prefix": "non_linear_system",
"body": "non_linear_system$0",
"description": "non_linear_system" 
},
"mecanism_four_bar": {
"prefix": "mecanism_four_bar",
"body": "mecanism_four_bar$0",
"description": "mecanism_four_bar" 
},
"sngetc": {
"prefix": "sngetc",
"body": "${1:cvalue = }sngetc(${2:option})$0",
"description": "function cvalue = sngetc( option )" 
},
"snwrapper_V1": {
"prefix": "snwrapper_V1",
"body": "${1:[F, G] = }snwrapper(${2:x}, ${3:userfun})$0",
"description": "function [F,G] = snwrapper(x,userfun);" 
},
"PSFA2016LRW": {
"prefix": "PSFA2016LRW",
"body": "${1:[parameters, ste, robste, LL, BCindex] = }PSFA2016LRW(${2:dta}, ${3:nx}, ${4:para0}, ${5:dis}, ${6:flag}, ${7:options})$0",
"description": "function [parameters,ste,robste,LL,BCindex]=PSFA2016LRW(dta,nx,para0,dis,flag,options)" 
},
"sfa_wlik": {
"prefix": "sfa_wlik",
"body": "${1:[ls, lik] = }sfa_wlik(${2:parameters})$0",
"description": "function [ls,lik]=sfa_wlikLRW(parameters)" 
},
"sfa_wlikLRW": {
"prefix": "sfa_wlikLRW",
"body": "${1:[ls, lik] = }sfa_wlikLRW(${2:parametersALL})$0",
"description": "function [ls,lik]=sfa_wlikLRW(parametersALL)" 
},
"sfawlikLRW": {
"prefix": "sfawlikLRW",
"body": "${1:[ls, g, lik] = }sfawlikLRW(${2:parameters})$0",
"description": "function [ls,g,lik]=sfawlikLRW(parameters)" 
},
"snoptLRW": {
"prefix": "snoptLRW",
"body": "${1:[x, F, inform, xmul, Fmul] = }snoptLRW(${2:x}, ${3:xlow}, ${4:xupp}, ${5:Flow}, ${6:Fupp}, ${7:userfun}, ${8:varargin})$0",
"description": "function [x,F,inform,xmul,Fmul] = snoptLRW(x,xlow,xupp,Flow,Fupp,userfun,varargin)" 
},
"snwrapper_V2": {
"prefix": "snwrapper_V2",
"body": "${1:[F, G] = }snwrapper(${2:x}, ${3:userfun}, ${4:nF}, ${5:varargin})$0",
"description": "function [F,G] = snwrapper(x,userfun,nF,varargin)" 
},
"Coordinate_chart_demo": {
"prefix": "Coordinate_chart_demo",
"body": "Coordinate_chart_demo$0",
"description": "Coordinate_chart_demo" 
},
"Demo_plotFns_drawFns": {
"prefix": "Demo_plotFns_drawFns",
"body": "Demo_plotFns_drawFns$0",
"description": "Demo_plotFns_drawFns" 
},
"InterX": {
"prefix": "InterX",
"body": "${1:P = }InterX(${2:L1}, ${3:varargin})$0",
"description": "function P = InterX(L1,varargin)" 
},
"action1": {
"prefix": "action1",
"body": "action1(${2:src}, ${3:event})$0",
"description": "function action1(src,event)" 
},
"action2": {
"prefix": "action2",
"body": "action2(${2:src}, ${3:event})$0",
"description": "function action2(src,event)" 
},
"action3": {
"prefix": "action3",
"body": "action3(${2:src}, ${3:event}, ${4:hAx})$0",
"description": "function actionSubplot(src,event,hAx)" 
},
"action4": {
"prefix": "action4",
"body": "action4(${2:src}, ${3:event})$0",
"description": "function actionLineWidth(src,event)" 
},
"actionSubplot": {
"prefix": "actionSubplot",
"body": "actionSubplot(${2:src}, ${3:event}, ${4:hAx})$0",
"description": "function actionSubplot(src,event,hAx)" 
},
"actionVisible": {
"prefix": "actionVisible",
"body": "actionVisible(${2:src}, ${3:event})$0",
"description": "function actionVisible(src,event)" 
},
"bar_d": {
"prefix": "bar_d",
"body": "bar_d$0",
"description": "bar_d" 
},
"barcell": {
"prefix": "barcell",
"body": "${1:[h_bar, h_leg] = }barcell(${2:Acell}, ${3:vars}, ${4:varxlabel})$0",
"description": "function [h_bar, h_leg] = barcell(Acell,vars,varxlabel)" 
},
"cellstrsplit": {
"prefix": "cellstrsplit",
"body": "${1:cell2 = }cellstrsplit(${2:cell1}, ${3:demi})$0",
"description": "function cell2 = cellstrsplit(cell1,demi)" 
},
"ciplot": {
"prefix": "ciplot",
"body": "ciplot(${2:lower}, ${3:upper}, ${4:x}, ${5:colour})$0",
"description": "function ciplot(lower,upper,x,colour);" 
},
"clickableLegend - 副本": {
"prefix": "clickableLegend - 副本",
"body": "${1:varargout = }clickableLegend - 副本(${2:varargin})$0",
"description": "function varargout = clickableLegend(varargin)" 
},
"clickableLegend": {
"prefix": "clickableLegend",
"body": "${1:varargout = }clickableLegend(${2:varargin})$0",
"description": "function varargout = clickableLegend(varargin)" 
},
"create_word_figures": {
"prefix": "create_word_figures",
"body": "create_word_figures$0",
"description": "function matlab_figures_to_word_document" 
},
"distinguishable_colors": {
"prefix": "distinguishable_colors",
"body": "${1:colors = }distinguishable_colors(${2:n_colors}, ${3:bg}, ${4:func})$0",
"description": "function colors = distinguishable_colors(n_colors,bg,func)" 
},
"drawCell_back": {
"prefix": "drawCell_back",
"body": "${1:varargout = }drawCell_back(${2:Acell})$0",
"description": "function  varargout = drawCell(Acell)" 
},
"drawCell_d": {
"prefix": "drawCell_d",
"body": "drawCell_d$0",
"description": "drawCell_d" 
},
"drawFns": {
"prefix": "drawFns",
"body": "drawFns(${2:varargin})$0",
"description": "function drawFns(varargin)" 
},
"drawTableBygroup": {
"prefix": "drawTableBygroup",
"body": "${1:h_plot = }drawTableBygroup(${2:T}, ${3:vxy}, ${4:vG}, ${5:varargin})$0",
"description": "function h_plot = drawTableBygroup(T,vxy,vG,varargin)" 
},
"drawTime_demo": {
"prefix": "drawTime_demo",
"body": "drawTime_demo$0",
"description": "drawTime_demo" 
},
"drawcell - 副本": {
"prefix": "drawcell - 副本",
"body": "${1:varargout = }drawcell - 副本(${2:Acell})$0",
"description": "function  varargout = drawcell(Acell)" 
},
"drawcell": {
"prefix": "drawcell",
"body": "${1:varargout = }drawcell(${2:Acell}, ${3:varargin})$0",
"description": "function  varargout = drawcellnorm(Acell,varargin)" 
},
"drawcellK": {
"prefix": "drawcellK",
"body": "${1:varargout = }drawcellK(${2:Acell})$0",
"description": "function  varargout = drawcellk(Acell)" 
},
"drawcellnorm": {
"prefix": "drawcellnorm",
"body": "${1:varargout = }drawcellnorm(${2:Acell}, ${3:varargin})$0",
"description": "function  varargout = drawcellnorm(Acell,varargin)" 
},
"drawcellnormyy": {
"prefix": "drawcellnormyy",
"body": "${1:varargout = }drawcellnormyy(${2:Acell}, ${3:varargin})$0",
"description": "function  varargout = drawcellnormyy(Acell,varargin)" 
},
"drawcellpretty (2)": {
"prefix": "drawcellpretty (2)",
"body": "${1:varargout = }drawcellpretty (2)(${2:Acell}, ${3:varargin})$0",
"description": "function  varargout = drawcell(Acell,varargin)" 
},
"drawcellpretty": {
"prefix": "drawcellpretty",
"body": "${1:varargout = }drawcellpretty(${2:Acell}, ${3:varargin})$0",
"description": "function varargout = drawcellpretty(Acell,varargin)" 
},
"drawcellstyle": {
"prefix": "drawcellstyle",
"body": "${1:varargout = }drawcellstyle(${2:Acell}, ${3:style}, ${4:varargin})$0",
"description": "function  varargout = drawcellstyle(Acell,style,varargin)" 
},
"drawcellyy": {
"prefix": "drawcellyy",
"body": "${1:varargout = }drawcellyy(${2:Acell})$0",
"description": "function  varargout = drawcellyy(Acell)" 
},
"drawvars": {
"prefix": "drawvars",
"body": "${1:varargout = }drawvars(${2:varargin})$0",
"description": "function varargout = drawvars(varargin)" 
},
"drawvarsnorm": {
"prefix": "drawvarsnorm",
"body": "${1:varargout = }drawvarsnorm(${2:varargin})$0",
"description": "function varargout = drawvarsnorm(varargin)" 
},
"fig": {
"prefix": "fig",
"body": "${1:h = }fig(${2:varargin})$0",
"description": "function h = fig(varargin)" 
},
"fig2PdffigTex": {
"prefix": "fig2PdffigTex",
"body": "${1:str = }fig2PdffigTex(${2:h}, ${3:fpdffig}, ${4:flatex}, ${5:pathpdf})$0",
"description": "function str = fig2PdffigTex(h,fpdffig,flatex,pathpdf)" 
},
"fig2PdffigTex_demo": {
"prefix": "fig2PdffigTex_demo",
"body": "fig2PdffigTex_demo$0",
"description": "function fig2PdffigTex_demo" 
},
"figlegAction_d": {
"prefix": "figlegAction_d",
"body": "figlegAction_d$0",
"description": "figlegAction_d" 
},
"figtopdf": {
"prefix": "figtopdf",
"body": "figtopdf(${2:myfigname}, ${3:nocomment})$0",
"description": "function figtopdf(myfigname, nocomment)" 
},
"figure11": {
"prefix": "figure11",
"body": "figure11(${2:varargin})$0",
"description": "function figure11(varargin)" 
},
"figure13Compareforyysvg": {
"prefix": "figure13Compareforyysvg",
"body": "${1:[hf, datacell] = }figure13Compareforyysvg(${2:filefigname}, ${3:fignamesub}, ${4:filedata}, ${5:dataName}, ${6:varargin})$0",
"description": "function [hf, datacell] = figure13Compareforyysvg(filefigname,fignamesub, filedata, dataName,varargin)" 
},
"figure13foryysvg": {
"prefix": "figure13foryysvg",
"body": "${1:[hf, datacell] = }figure13foryysvg(${2:filefigname}, ${3:fignamesub}, ${4:filedata}, ${5:dataName}, ${6:varargin})$0",
"description": "function [hf, datacell] = figure13foryysvg(filefigname,fignamesub, filedata, dataName,varargin)" 
},
"figure13foryysvgNoAxeLabel": {
"prefix": "figure13foryysvgNoAxeLabel",
"body": "${1:hf = }figure13foryysvgNoAxeLabel(${2:figname}, ${3:fignamesub}, ${4:filedata}, ${5:dataName}, ${6:varargin})$0",
"description": "function hf = figure13foryysvg(figname,fignamesub, filedata, dataName,varargin)" 
},
"figure13foryysvgNoaxisName": {
"prefix": "figure13foryysvgNoaxisName",
"body": "${1:[hf, datacell] = }figure13foryysvgNoaxisName(${2:filefigname}, ${3:fignamesub}, ${4:filedata}, ${5:dataName}, ${6:pathfig}, ${7:varargin})$0",
"description": "function [hf, datacell] = figure13foryysvgNoaxisName(filefigname,fignamesub, filedata, dataName, pathfig, varargin)" 
},
"figure14foryyeps": {
"prefix": "figure14foryyeps",
"body": "${1:hf = }figure14foryyeps(${2:figname}, ${3:datacell}, ${4:titlecell}, ${5:filename})$0",
"description": "function hf = figure14foryyeps(figname,datacell,titlecell,filename)" 
},
"figure14foryysvg": {
"prefix": "figure14foryysvg",
"body": "${1:hf = }figure14foryysvg(${2:figname}, ${3:datacell}, ${4:titlecell}, ${5:filename})$0",
"description": "function hf = figure14foryysvg(figname,datacell,titlecell,filename)" 
},
"figureTable13": {
"prefix": "figureTable13",
"body": "${1:[hf, hs] = }figureTable13(${2:figname}, ${3:dataTable}, ${4:styleCell}, ${5:legenCell}, ${6:titleCell}, ${7:labelCell}, ${8:varargin})$0",
"description": "function [hf, hs] = figureTable13(figname, dataTable, styleCell,legenCell,titleCell,labelCell,varargin)" 
},
"figureTableMbyN": {
"prefix": "figureTableMbyN",
"body": "${1:[hf, hs] = }figureTableMbyN(${2:M}, ${3:N}, ${4:figname}, ${5:dataTable}, ${6:styleCell}, ${7:legenCell}, ${8:titleCell}, ${9:labelCell}, ${10:varargin})$0",
"description": "function [hf, hs] = figureTableMbyN( M,N,figname, dataTable, styleCell,legenCell,titleCell,labelCell,varargin)" 
},
"figure_plot_export_d": {
"prefix": "figure_plot_export_d",
"body": "figure_plot_export_d$0",
"description": "figure_plot_export_d" 
},
"find_intersection": {
"prefix": "find_intersection",
"body": "${1:[intersectionx, intersectiony, flag] = }find_intersection(${2:ax}, ${3:a}, ${4:bx}, ${5:b}, ${6:confidence})$0",
"description": "function [intersectionx, intersectiony, flag] = find_intersection(ax,a,bx,b,confidence)" 
},
"findjobj": {
"prefix": "findjobj",
"body": "${1:[handles, levels, parentIdx, listing] = }findjobj(${2:container}, ${3:varargin})$0",
"description": "function [handles,levels,parentIdx,listing] = findjobj(container,varargin)" 
},
"font_demo": {
"prefix": "font_demo",
"body": "font_demo$0",
"description": "function font_demo" 
},
"getTightSubplotHandles": {
"prefix": "getTightSubplotHandles",
"body": "getTightSubplotHandles$0",
"description": "getTightSubplotHandles" 
},
"getpos": {
"prefix": "getpos",
"body": "${1:[pos, unit] = }getpos(${2:h}, ${3:fmt}, ${4:href}, ${5:opt})$0",
"description": "function [pos,unit]=getpos(h,fmt,href,opt)" 
},
"getsubplot": {
"prefix": "getsubplot",
"body": "getsubplot$0",
"description": "getsubplot" 
},
"getsubplot1": {
"prefix": "getsubplot1",
"body": "${1:hs = }getsubplot1(${2:type})$0",
"description": "function hs = getsubplot1(type)" 
},
"getsubplot13": {
"prefix": "getsubplot13",
"body": "${1:hs = }getsubplot13(${2:type})$0",
"description": "function hs = getsubplot13(type)" 
},
"getsubplot14": {
"prefix": "getsubplot14",
"body": "${1:hs = }getsubplot14(${2:type})$0",
"description": "function hs = getsubplot14(type)" 
},
"getsubplot24": {
"prefix": "getsubplot24",
"body": "${1:hs = }getsubplot24(${2:type})$0",
"description": "function hs = getsubplot24(type)" 
},
"gnuplotter": {
"prefix": "gnuplotter",
"body": "${1:cmdst = }gnuplotter(${2:inputfiles}, ${3:outputfile}, ${4:texoutputfile}, ${5:xlabel}, ${6:ylabel}, ${7:axislimits}, ${8:plottype}, ${9:key}, ${10:keylocation}, ${11:keytext})$0",
"description": "function cmdst = gnuplotter(inputfiles,outputfile,texoutputfile,xlabel,ylabel,axislimits,plottype,key,keylocation,keytext)" 
},
"gridSubplot": {
"prefix": "gridSubplot",
"body": "${1:f = }gridSubplot(${2:varargin})$0",
"description": "function f = gridSubplot(varargin)" 
},
"gridxy": {
"prefix": "gridxy",
"body": "${1:hh = }gridxy(${2:x}, ${3:varargin})$0",
"description": "function hh = gridxy(x,varargin)" 
},
"gridxy2": {
"prefix": "gridxy2",
"body": "${1:hh = }gridxy2(${2:x}, ${3:varargin})$0",
"description": "function hh = gridxy(x,varargin)" 
},
"gtfill": {
"prefix": "gtfill",
"body": "${1:[y1_group, y2_group] = }gtfill(${2:x}, ${3:y1}, ${4:y2}, ${5:n}, ${6:c1}, ${7:c2})$0",
"description": "function [y1_group,y2_group]=gtfill(x,y1,y2,n,c1,c2)" 
},
"legend2latex": {
"prefix": "legend2latex",
"body": "${1:out = }legend2latex(${2:figure_handle})$0",
"description": "function out = legend2latex(figure_handle)" 
},
"legendChineseClikableLegend_d": {
"prefix": "legendChineseClikableLegend_d",
"body": "legendChineseClikableLegend_d$0",
"description": "function legendChineseClikableLegend_d" 
},
"legend_d": {
"prefix": "legend_d",
"body": "legend_d$0",
"description": "function legend_d" 
},
"legendchange_demo": {
"prefix": "legendchange_demo",
"body": "legendchange_demo$0",
"description": "legendchange_demo" 
},
"legendclickableBoxon": {
"prefix": "legendclickableBoxon",
"body": "${1:leg1 = }legendclickableBoxon(${2:h_plot}, ${3:legnames}, ${4:varargin})$0",
"description": "function leg1 = legendclickableBoxon(h_plot,legnames,varargin)" 
},
"legendclickableWhite": {
"prefix": "legendclickableWhite",
"body": "${1:leg1 = }legendclickableWhite(${2:h_plot}, ${3:legnames}, ${4:varargin})$0",
"description": "function leg1 = legendclickableWhite(h_plot,legnames,varargin)" 
},
"legendflex": {
"prefix": "legendflex",
"body": "${1:varargout = }legendflex(${2:varargin})$0",
"description": "function varargout = legendflex(varargin)" 
},
"legendmarkeradjust": {
"prefix": "legendmarkeradjust",
"body": "legendmarkeradjust(${2:marksize})$0",
"description": "function legendmarkeradjust(marksize)" 
},
"linestyle_data_setup": {
"prefix": "linestyle_data_setup",
"body": "linestyle_data_setup$0",
"description": "linestyle_data_setup" 
},
"maindemo": {
"prefix": "maindemo",
"body": "maindemo$0",
"description": "maindemo" 
},
"meetpoint": {
"prefix": "meetpoint",
"body": "${1:[x, y, m1, m2] = }meetpoint(${2:x0}, ${3:y0}, ${4:x1}, ${5:y1})$0",
"description": "function [x,y,m1,m2] = meetpoint(x0,y0,x1,y1)" 
},
"mplot": {
"prefix": "mplot",
"body": "mplot(${2:data}, ${3:scale})$0",
"description": "function  mplot(data,scale)" 
},
"mplot_demo (2)": {
"prefix": "mplot_demo (2)",
"body": "mplot_demo (2)$0",
"description": "mplot_demo (2)" 
},
"mplot_demo": {
"prefix": "mplot_demo",
"body": "mplot_demo$0",
"description": "mplot_demo" 
},
"myaa": {
"prefix": "myaa",
"body": "${1:varargout = }myaa(${2:varargin})$0",
"description": "function [varargout] = myaa(varargin)" 
},
"mycolor_V2": {
"prefix": "mycolor_V2",
"body": "${1:c = }mycolor(${2:ii})$0",
"description": "function c = mycolor(ii)" 
},
"papersizetype_d": {
"prefix": "papersizetype_d",
"body": "papersizetype_d$0",
"description": "papersizetype_d" 
},
"pixels2cm": {
"prefix": "pixels2cm",
"body": "${1:ucm = }pixels2cm(${2:upi})$0",
"description": "function ucm = pixels2cm(upi)" 
},
"pixels2cmx": {
"prefix": "pixels2cmx",
"body": "${1:ucm = }pixels2cmx(${2:upi})$0",
"description": "function ucm = pixels2cmx(upi)" 
},
"pixels2cmy": {
"prefix": "pixels2cmy",
"body": "${1:ucm = }pixels2cmy(${2:upi})$0",
"description": "function ucm = pixels2cmy(upi)" 
},
"plotColorshape_d": {
"prefix": "plotColorshape_d",
"body": "plotColorshape_d$0",
"description": "plotColorshape_d" 
},
"plotFn": {
"prefix": "plotFn",
"body": "${1:h = }plotFn(${2:xy}, ${3:xyname}, ${4:style}, ${5:varargin})$0",
"description": "function h = plotFn(xy,xyname,style,varargin)" 
},
"plotFn2": {
"prefix": "plotFn2",
"body": "${1:h = }plotFn2(${2:xy}, ${3:xyname}, ${4:style})$0",
"description": "function h = plotFn2(xy,xyname,style)" 
},
"plotFnFix": {
"prefix": "plotFnFix",
"body": "${1:h = }plotFnFix(${2:xy}, ${3:xyname}, ${4:style}, ${5:varargin})$0",
"description": "function h = plotFnFix(xy,xyname,style,varargin)" 
},
"plotFnNormLine": {
"prefix": "plotFnNormLine",
"body": "${1:h = }plotFnNormLine(${2:xy}, ${3:xyname}, ${4:style}, ${5:varargin})$0",
"description": "function h = plotFnNormLine(xy,xyname,style,varargin)" 
},
"plotFnNormyy": {
"prefix": "plotFnNormyy",
"body": "${1:h = }plotFnNormyy(${2:xy}, ${3:xyname}, ${4:style}, ${5:varargin})$0",
"description": "function h = plotFnNormyy(xy,xyname,style,varargin)" 
},
"plotFnPretty": {
"prefix": "plotFnPretty",
"body": "${1:h = }plotFnPretty(${2:xy}, ${3:xyname}, ${4:style}, ${5:varargin})$0",
"description": "function h = plotFnPretty(xy,xyname,style,varargin)" 
},
"plotFnStyle": {
"prefix": "plotFnStyle",
"body": "${1:varargout = }plotFnStyle(${2:cellf}, ${3:styleraw}, ${4:varargin})$0",
"description": "function varargout = plotFnStyle(cellf, styleraw, varargin)" 
},
"plotFnStyleLine": {
"prefix": "plotFnStyleLine",
"body": "${1:varargout = }plotFnStyleLine(${2:cellf}, ${3:styleraw}, ${4:linestyle}, ${5:varargin})$0",
"description": "function varargout = plotFnStyleLine(cellf, styleraw, linestyle, varargin)" 
},
"plotFn_backup": {
"prefix": "plotFn_backup",
"body": "${1:h = }plotFn_backup(${2:xy}, ${3:xyname}, ${4:style})$0",
"description": "function h = plotFn(xy,xyname,style)" 
},
"plotFns": {
"prefix": "plotFns",
"body": "plotFns(${2:varargin})$0",
"description": "function plotFns(varargin)" 
},
"plot_ci": {
"prefix": "plot_ci",
"body": "${1:Handle = }plot_ci(${2:X}, ${3:Y}, ${4:varargin})$0",
"description": "function Handle = plot_ci(X,Y,varargin)" 
},
"plot_ciLrw": {
"prefix": "plot_ciLrw",
"body": "${1:Handle = }plot_ciLrw(${2:X}, ${3:Y}, ${4:varargin})$0",
"description": "function Handle = plot_ci(X,Y,varargin)" 
},
"plotcell": {
"prefix": "plotcell",
"body": "${1:h = }plotcell(${2:cellf}, ${3:stylecell})$0",
"description": "function h = plotcell(cellf, stylecell)" 
},
"plotintsectionline": {
"prefix": "plotintsectionline",
"body": "${1:[xc, yc, h] = }plotintsectionline(${2:xnew}, ${3:ynew}, ${4:xold}, ${5:yold}, ${6:varargin})$0",
"description": "function [xc,yc, h] = plotintsectionline(xnew,ynew,xold,yold,varargin)" 
},
"plotintsectionlinetextposition": {
"prefix": "plotintsectionlinetextposition",
"body": "${1:[xc, yc] = }plotintsectionlinetextposition(${2:xnew}, ${3:ynew}, ${4:xold}, ${5:yold}, ${6:pos}, ${7:varargin})$0",
"description": "function [xc,yc] = plotintsectionlinetextposition(xnew,ynew,xold,yold,pos,varargin)" 
},
"plotly_demo": {
"prefix": "plotly_demo",
"body": "plotly_demo$0",
"description": "plotly_demo" 
},
"plotlysetup": {
"prefix": "plotlysetup",
"body": "plotlysetup(${2:username}, ${3:api_key}, ${4:varargin})$0",
"description": "function plotlysetup(username, api_key, varargin)" 
},
"plotreg": {
"prefix": "plotreg",
"body": "plotreg(${2:res}, ${3:varargin})$0",
"description": "function plotreg(res, varargin)" 
},
"plotregionsEasy": {
"prefix": "plotregionsEasy",
"body": "plotregionsEasy(${2:varargin})$0",
"description": "function plotregionsEasy(varargin)" 
},
"pptfigure": {
"prefix": "pptfigure",
"body": "${1:varargout = }pptfigure(${2:varargin})$0",
"description": "function varargout = pptfigure(varargin)" 
},
"prettyplot": {
"prefix": "prettyplot",
"body": "${1:h = }prettyplot(${2:varargin})$0",
"description": "function h = prettyplot(varargin);" 
},
"prettyplot_demo": {
"prefix": "prettyplot_demo",
"body": "prettyplot_demo$0",
"description": "prettyplot_demo" 
},
"prettyplotcell": {
"prefix": "prettyplotcell",
"body": "${1:h = }prettyplotcell(${2:cellf}, ${3:stylecell})$0",
"description": "function h = prettyplotcell(cellf, stylecell)" 
},
"quick_figure": {
"prefix": "quick_figure",
"body": "${1:fig_handle = }quick_figure(${2:action}, ${3:axh})$0",
"description": "function fig_handle = quick_figure(action,axh)" 
},
"quick_figure_prefs": {
"prefix": "quick_figure_prefs",
"body": "quick_figure_prefs$0",
"description": "quick_figure_prefs" 
},
"rotateXLabels": {
"prefix": "rotateXLabels",
"body": "${1:hh = }rotateXLabels(${2:ax}, ${3:angle}, ${4:varargin})$0",
"description": "function hh = rotateXLabels( ax, angle, varargin )" 
},
"setcolor": {
"prefix": "setcolor",
"body": "setcolor(${2:icolor})$0",
"description": "function setcolor(icolor)" 
},
"setcolorFace": {
"prefix": "setcolorFace",
"body": "setcolorFace(${2:icolor})$0",
"description": "function setcolorFace(icolor)" 
},
"setdatetickgcf": {
"prefix": "setdatetickgcf",
"body": "setdatetickgcf(${2:varargin})$0",
"description": "function setdatetickgcf(varargin)" 
},
"setfigure11": {
"prefix": "setfigure11",
"body": "setfigure11(${2:varargin})$0",
"description": "function setfigure11(varargin)" 
},
"setfont": {
"prefix": "setfont",
"body": "setfont(${2:fontsize}, ${3:fontname})$0",
"description": "function setfont(fontsize, fontname)" 
},
"setfontdefault": {
"prefix": "setfontdefault",
"body": "setfontdefault(${2:fontsize}, ${3:fontname})$0",
"description": "function setfontdefault(fontsize, fontname)" 
},
"setfontfigDatetime": {
"prefix": "setfontfigDatetime",
"body": "${1:[hf, hplot] = }setfontfigDatetime(${2:hf}, ${3:hplot})$0",
"description": "function [hf, hplot] = setfontfigDatetime(hf,hplot)" 
},
"setfontfigNoTightfig": {
"prefix": "setfontfigNoTightfig",
"body": "${1:[hf, hplot] = }setfontfigNoTightfig(${2:hf}, ${3:hplot})$0",
"description": "function [hf, hplot] = setfontfigNoTightfig(hf,hplot)" 
},
"setfontfigOrg": {
"prefix": "setfontfigOrg",
"body": "${1:[hf, hplot] = }setfontfigOrg(${2:hf}, ${3:hplot})$0",
"description": "function [hf, hplot] = setfontfigOrg(hf,hplot)" 
},
"setfontfigSubplotDatetime": {
"prefix": "setfontfigSubplotDatetime",
"body": "${1:[hf, hplot] = }setfontfigSubplotDatetime(${2:hf}, ${3:haxall})$0",
"description": "function [hf, hplot] = setfontfigSubplotDatetime(hf,haxall)" 
},
"setfontgcf": {
"prefix": "setfontgcf",
"body": "setfontgcf(${2:fontsize}, ${3:fontname}, ${4:varargin})$0",
"description": "function setfontgcf(fontsize, fontname,varargin)" 
},
"setfonttext": {
"prefix": "setfonttext",
"body": "setfonttext(${2:fontsize}, ${3:fontname})$0",
"description": "function setfonttext(fontsize, fontname)" 
},
"setfonttitle": {
"prefix": "setfonttitle",
"body": "setfonttitle(${2:fontsize}, ${3:fontname}, ${4:varargin})$0",
"description": "function setfonttitle(fontsize, fontname,varargin)" 
},
"setgridgcf": {
"prefix": "setgridgcf",
"body": "setgridgcf(${2:varargin})$0",
"description": "function setgridgcf(varargin)" 
},
"setlabelgcf": {
"prefix": "setlabelgcf",
"body": "setlabelgcf(${2:varargin})$0",
"description": "function setlabelgcf(varargin)" 
},
"setlegendgcf": {
"prefix": "setlegendgcf",
"body": "${1:hl = }setlegendgcf(${2:varargin})$0",
"description": "function hl = setlegendgcf(varargin)" 
},
"setpapera4": {
"prefix": "setpapera4",
"body": "setpapera4(${2:varargin})$0",
"description": "function setpapera4(varargin)" 
},
"setsubplot": {
"prefix": "setsubplot",
"body": "setsubplot(${2:hf})$0",
"description": "function setsubplot(hf)" 
},
"settitle": {
"prefix": "settitle",
"body": "settitle(${2:varargin})$0",
"description": "function settitle(varargin)" 
},
"settitlegcf": {
"prefix": "settitlegcf",
"body": "settitlegcf(${2:varargin})$0",
"description": "function settitlegcf(varargin)" 
},
"setxlimgcf": {
"prefix": "setxlimgcf",
"body": "setxlimgcf(${2:varargin})$0",
"description": "function setxlimgcf(varargin)" 
},
"setxtickgcf": {
"prefix": "setxtickgcf",
"body": "setxtickgcf(${2:varargin})$0",
"description": "function setxtickgcf(varargin)" 
},
"setxylim": {
"prefix": "setxylim",
"body": "${1:xylimts = }setxylim(${2:varargin})$0",
"description": "function xylimts = setxylim(varargin)" 
},
"setxylimgcf": {
"prefix": "setxylimgcf",
"body": "${1:xylimts = }setxylimgcf(${2:varargin})$0",
"description": "function xylimts = setxylimgcf(varargin)" 
},
"textLatex": {
"prefix": "textLatex",
"body": "textLatex(${2:position}, ${3:contend})$0",
"description": "function textLatex(position,contend)" 
},
"tightfig": {
"prefix": "tightfig",
"body": "${1:hfig = }tightfig(${2:hfig})$0",
"description": "function hfig = tightfig(hfig)" 
},
"tightfigRevised": {
"prefix": "tightfigRevised",
"body": "${1:hfig = }tightfigRevised(${2:hfig})$0",
"description": "function hfig = tightfigRevised(hfig)" 
},
"Violin": {
"prefix": "Violin",
"body": "${1:obj = }Violin(${2:data}, ${3:pos}, ${4:varargin})$0",
"description": "function obj = Violin(data, pos, varargin)" 
},
"violinplot": {
"prefix": "violinplot",
"body": "${1:violins = }violinplot(${2:data}, ${3:cats}, ${4:varargin})$0",
"description": "function violins = violinplot(data, cats, varargin)" 
},
"area_stairs": {
"prefix": "area_stairs",
"body": "${1:hhh = }area_stairs(${2:x}, ${3:y})$0",
"description": "function hhh = area_stairs(x,y)" 
},
"arrowh": {
"prefix": "arrowh",
"body": "${1:handle = }arrowh(${2:x}, ${3:y}, ${4:clr}, ${5:ArSize}, ${6:Where})$0",
"description": "function handle = arrowh(x,y,clr,ArSize,Where)" 
},
"draw_arrow": {
"prefix": "draw_arrow",
"body": "${1:out = }draw_arrow(${2:startpoint}, ${3:endpoint}, ${4:headsize})$0",
"description": "function out = draw_arrow(startpoint,endpoint,headsize)" 
},
"arrow3": {
"prefix": "arrow3",
"body": "${1:hn = }arrow3(${2:p1}, ${3:p2}, ${4:s}, ${5:w}, ${6:h}, ${7:ip}, ${8:alpha}, ${9:beta})$0",
"description": "function hn=arrow3(p1,p2,s,w,h,ip,alpha,beta)" 
},
"ab_callback": {
"prefix": "ab_callback",
"body": "ab_callback$0",
"description": "ab_callback" 
},
"arrow_test": {
"prefix": "arrow_test",
"body": "arrow_test$0",
"description": "arrow_test" 
},
"create_3d_arrow": {
"prefix": "create_3d_arrow",
"body": "${1:h = }create_3d_arrow(${2:r}, ${3:v}, ${4:varargin})$0",
"description": "function h=create_3d_arrow(r,v,varargin)" 
},
"create_angle_sign": {
"prefix": "create_angle_sign",
"body": "${1:hs = }create_angle_sign(${2:r0}, ${3:a}, ${4:b}, ${5:varargin})$0",
"description": "function hs=create_angle_sign(r0,a,b,varargin)" 
},
"create_angle_sign_wt": {
"prefix": "create_angle_sign_wt",
"body": "${1:hs = }create_angle_sign_wt(${2:r0}, ${3:a}, ${4:b}, ${5:varargin})$0",
"description": "function hs=create_angle_sign_wt(r0,a,b,varargin)" 
},
"create_perp_sign": {
"prefix": "create_perp_sign",
"body": "${1:hs = }create_perp_sign(${2:r0}, ${3:a}, ${4:b}, ${5:varargin})$0",
"description": "function hs=create_perp_sign(r0,a,b,varargin)" 
},
"create_vector_text": {
"prefix": "create_vector_text",
"body": "${1:ht = }create_vector_text(${2:r}, ${3:v}, ${4:txt}, ${5:varargin})$0",
"description": "function ht=create_vector_text(r,v,txt,varargin)" 
},
"cross_product": {
"prefix": "cross_product",
"body": "${1:varargout = }cross_product(${2:varargin})$0",
"description": "function varargout = cross_product(varargin)" 
},
"cross_product_old": {
"prefix": "cross_product_old",
"body": "cross_product_old$0",
"description": "cross_product_old" 
},
"matlabtetris": {
"prefix": "matlabtetris",
"body": "${1:STRUCT = }matlabtetris(${2:varargin})$0",
"description": "function [STRUCT] = matlabtetris(varargin)" 
},
"rand_motion": {
"prefix": "rand_motion",
"body": "${1:r v a = }rand_motion(${2:r}, ${3:v}, ${4:a}, ${5:dt}, ${6:r1}, ${7:r2})$0",
"description": "function [r v a]=rand_motion(r,v,a,dt,r1,r2)" 
},
"random_motion_test": {
"prefix": "random_motion_test",
"body": "random_motion_test$0",
"description": "random_motion_test" 
},
"update_3d_arrow": {
"prefix": "update_3d_arrow",
"body": "${1:w = }update_3d_arrow(${2:h}, ${3:r}, ${4:v}, ${5:varargin})$0",
"description": "function w=update_3d_arrow(h,r,v,varargin)" 
},
"update_abc_edits": {
"prefix": "update_abc_edits",
"body": "update_abc_edits$0",
"description": "update_abc_edits" 
},
"update_angle_sign": {
"prefix": "update_angle_sign",
"body": "${1:hs = }update_angle_sign(${2:r0}, ${3:a}, ${4:b}, ${5:varargin})$0",
"description": "function hs=create_angle_sign(r0,a,b,varargin)" 
},
"update_angle_sign_wt": {
"prefix": "update_angle_sign_wt",
"body": "${1:alm = }update_angle_sign_wt(${2:hs}, ${3:r0}, ${4:a}, ${5:b}, ${6:varargin})$0",
"description": "function alm=update_angle_sign_wt(hs,r0,a,b,varargin)" 
},
"update_perp_sign": {
"prefix": "update_perp_sign",
"body": "update_perp_sign(${2:hs}, ${3:r0}, ${4:a}, ${5:b}, ${6:varargin})$0",
"description": "function update_perp_sign(hs,r0,a,b,varargin)" 
},
"update_picture": {
"prefix": "update_picture",
"body": "update_picture$0",
"description": "update_picture" 
},
"update_vector_text": {
"prefix": "update_vector_text",
"body": "update_vector_text(${2:ht}, ${3:r}, ${4:v}, ${5:varargin})$0",
"description": "function update_vector_text(ht,r,v,varargin)" 
},
"axescoord2figurecoord": {
"prefix": "axescoord2figurecoord",
"body": "${1:[xfigure, yfigure] = }axescoord2figurecoord(${2:varargin})$0",
"description": "function [xfigure, yfigure]=axescoord2figurecoord(varargin)" 
},
"line2arrow": {
"prefix": "line2arrow",
"body": "${1:varargout = }line2arrow(${2:h}, ${3:varargin})$0",
"description": "function varargout = line2arrow(h, varargin);" 
},
"parsepv": {
"prefix": "parsepv",
"body": "${1:[Param, extra] = }parsepv(${2:Param}, ${3:pvpairs}, ${4:varargin})$0",
"description": "function [Param, extra] = parsepv(Param, pvpairs, varargin)" 
},
"dep": {
"prefix": "dep",
"body": "dep(${2:indir}, ${3:main}, ${4:reclim}, ${5:others}, ${6:fileout})$0",
"description": "function dep(indir,main,reclim,others,fileout)" 
},
"dep1": {
"prefix": "dep1",
"body": "dep1$0",
"description": "function dep1()" 
},
"dep2": {
"prefix": "dep2",
"body": "dep2$0",
"description": "function dep2()" 
},
"dep3": {
"prefix": "dep3",
"body": "dep3$0",
"description": "function dep3()" 
},
"main": {
"prefix": "main",
"body": "main$0",
"description": "function main()" 
},
"demo_saveFigure": {
"prefix": "demo_saveFigure",
"body": "demo_saveFigure$0",
"description": "function demo_saveFigure()" 
},
"saveFigure": {
"prefix": "saveFigure",
"body": "${1:fileList = }saveFigure(${2:varargin})$0",
"description": "function fileList = saveFigure(varargin)" 
},
"saveFigureLRW": {
"prefix": "saveFigureLRW",
"body": "${1:fileList = }saveFigureLRW(${2:varargin})$0",
"description": "function fileList = saveFigure(varargin)" 
},
"setLineOpacity": {
"prefix": "setLineOpacity",
"body": "setLineOpacity(${2:s}, ${3:alpha})$0",
"description": "function setLineOpacity(s, alpha)" 
},
"setMarkerOpacity": {
"prefix": "setMarkerOpacity",
"body": "setMarkerOpacity(${2:s}, ${3:faceAlpha}, ${4:edgeAlpha})$0",
"description": "function setMarkerOpacity(s, faceAlpha, edgeAlpha)" 
},
"content": {
"prefix": "content",
"body": "content$0",
"description": "content" 
},
"dispMEq": {
"prefix": "dispMEq",
"body": "dispMEq(${2:eq}, ${3:varargin})$0",
"description": "function dispMEq(eq, varargin)" 
},
"drawAxes": {
"prefix": "drawAxes",
"body": "drawAxes(${2:d}, ${3:colr}, ${4:labels})$0",
"description": "function drawAxes(d, colr, labels)" 
},
"drawCircle": {
"prefix": "drawCircle",
"body": "drawCircle(${2:varargin})$0",
"description": "function drawCircle(varargin)" 
},
"drawGraph": {
"prefix": "drawGraph",
"body": "${1:Graph = }drawGraph(${2:G})$0",
"description": "function Graph = drawGraph(G)" 
},
"drawLAInro": {
"prefix": "drawLAInro",
"body": "drawLAInro$0",
"description": "drawLAInro" 
},
"drawLine": {
"prefix": "drawLine",
"body": "${1:varargout = }drawLine(${2:Points}, ${3:lType})$0",
"description": "function varargout = drawLine(Points, lType)" 
},
"drawMesh": {
"prefix": "drawMesh",
"body": "${1:varargout = }drawMesh(${2:vertex}, ${3:face}, ${4:varargin})$0",
"description": "function varargout = drawMesh(vertex, face, varargin)" 
},
"drawPlane": {
"prefix": "drawPlane",
"body": "${1:varargout = }drawPlane(${2:n}, ${3:varargin})$0",
"description": "function varargout = drawPlane(n, varargin)" 
},
"drawSpan": {
"prefix": "drawSpan",
"body": "${1:varargout = }drawSpan(${2:V}, ${3:pColor})$0",
"description": "function varargout = drawSpan(V, pColor)" 
},
"drawSphere": {
"prefix": "drawSphere",
"body": "${1:varargout = }drawSphere(${2:varargin})$0",
"description": "function varargout = drawSphere(varargin)" 
},
"drawVector": {
"prefix": "drawVector",
"body": "${1:hV = }drawVector(${2:V}, ${3:varargin})$0",
"description": "function hV = drawVector(V, varargin)" 
},
"drawXLine": {
"prefix": "drawXLine",
"body": "${1:varargout = }drawXLine(${2:x}, ${3:lType})$0",
"description": "function varargout = drawXLine(x, lType)" 
},
"drawYLine": {
"prefix": "drawYLine",
"body": "${1:varargout = }drawYLine(${2:y}, ${3:lType})$0",
"description": "function varargout = drawYLine(y, lType)" 
},
"eps2raster": {
"prefix": "eps2raster",
"body": "eps2raster(${2:varargin})$0",
"description": "function eps2raster(varargin)" 
},
"epscleancolordict": {
"prefix": "epscleancolordict",
"body": "epscleancolordict(${2:infile}, ${3:outfile})$0",
"description": "function epscleancolordict(infile,outfile)" 
},
"epsembedfont": {
"prefix": "epsembedfont",
"body": "epsembedfont(${2:varargin})$0",
"description": "function epsembedfont(varargin)" 
},
"epsfixbackground": {
"prefix": "epsfixbackground",
"body": "epsfixbackground(${2:fig}, ${3:infile}, ${4:outfile})$0",
"description": "function epsfixbackground(fig,infile,outfile)" 
},
"epsfixfonts": {
"prefix": "epsfixfonts",
"body": "epsfixfonts(${2:infile}, ${3:outfile}, ${4:embedsymbol})$0",
"description": "function epsfixfonts(infile,outfile,embedsymbol)" 
},
"epsfontalias": {
"prefix": "epsfontalias",
"body": "${1:ftout = }epsfontalias(${2:alias}, ${3:actual})$0",
"description": "function ftout = epsfontalias(alias,actual)" 
},
"epsfontlist": {
"prefix": "epsfontlist",
"body": "${1:fonts = }epsfontlist$0",
"description": "function fonts = epsfontlist()" 
},
"epsfontpath": {
"prefix": "epsfontpath",
"body": "${1:pout = }epsfontpath(${2:p1}, ${3:p2})$0",
"description": "function pout = epsfontpath(p1,p2)" 
},
"epsgetbbox": {
"prefix": "epsgetbbox",
"body": "${1:bbox = }epsgetbbox(${2:infile}, ${3:bboxtype}, ${4:units})$0",
"description": "function bbox = epsgetbbox(infile,bboxtype,units)" 
},
"epsgetfonts": {
"prefix": "epsgetfonts",
"body": "${1:[AllFonts, EmbeddedFonts] = }epsgetfonts(${2:infile})$0",
"description": "function [AllFonts,EmbeddedFonts] = epsgetfonts(infile)" 
},
"epspreview": {
"prefix": "epspreview",
"body": "epspreview(${2:varargin})$0",
"description": "function epspreview(varargin)" 
},
"epssetbbox": {
"prefix": "epssetbbox",
"body": "epssetbbox(${2:infile}, ${3:varargin})$0",
"description": "function epssetbbox(infile,varargin)" 
},
"epssetbgcolor": {
"prefix": "epssetbgcolor",
"body": "epssetbgcolor(${2:infile}, ${3:varargin})$0",
"description": "function epssetbgcolor(infile,varargin)" 
},
"epssetlinestyle": {
"prefix": "epssetlinestyle",
"body": "epssetlinestyle(${2:infile}, ${3:varargin})$0",
"description": "function epssetlinestyle(infile,varargin)" 
},
"epssetup": {
"prefix": "epssetup",
"body": "epssetup$0",
"description": "function epssetup()" 
},
"epswrite": {
"prefix": "epswrite",
"body": "epswrite(${2:varargin})$0",
"description": "function epswrite(varargin)" 
},
"addcolor": {
"prefix": "addcolor",
"body": "${1:[imgdata, key] = }addcolor(${2:imgdata}, ${3:rgb})$0",
"description": "function [imgdata,key] = addcolor(imgdata,rgb)" 
},
"decrypt": {
"prefix": "decrypt",
"body": "decrypt$0",
"description": "decrypt" 
},
"defaultfontconfig": {
"prefix": "defaultfontconfig",
"body": "defaultfontconfig$0",
"description": "function defaultfontconfig()" 
},
"encrypt": {
"prefix": "encrypt",
"body": "encrypt$0",
"description": "encrypt" 
},
"extractfont": {
"prefix": "extractfont",
"body": "${1:FInfo = }extractfont(${2:imgdata}, ${3:detail})$0",
"description": "function FInfo = extractfont(imgdata,detail)" 
},
"findfont": {
"prefix": "findfont",
"body": "${1:[fileout, isalias] = }findfont(${2:fontname}, ${3:chkalias})$0",
"description": "function [fileout,isalias] = findfont(fontname,chkalias)" 
},
"fontrep": {
"prefix": "fontrep",
"body": "${1:imgdata = }fontrep(${2:imgdata}, ${3:oldfont}, ${4:newfont})$0",
"description": "function imgdata = fontrep(imgdata,oldfont,newfont)" 
},
"getallstr": {
"prefix": "getallstr",
"body": "${1:Strings = }getallstr(${2:imgdata})$0",
"description": "function Strings = getallstr(imgdata)" 
},
"getcolor": {
"prefix": "getcolor",
"body": "${1:[ckey, ctab] = }getcolor(${2:imgdata})$0",
"description": "function [ckey,ctab] = getcolor(imgdata)" 
},
"getdata_V2": {
"prefix": "getdata_V2",
"body": "${1:[imgdata, wmfdata, tifdata] = }getdata(${2:infile})$0",
"description": "function [imgdata,wmfdata,tifdata] = getdata(infile)" 
},
"getfonts": {
"prefix": "getfonts",
"body": "${1:[AllFonts, EmbeddedFonts, FontData, imgdata] = }getfonts(${2:imgdata})$0",
"description": "function [AllFonts,EmbeddedFonts,FontData,imgdata] = getfonts(imgdata)" 
},
"getgs": {
"prefix": "getgs",
"body": "${1:gsexe = }getgs$0",
"description": "function gsexe = getgs()" 
},
"getstrwidth": {
"prefix": "getstrwidth",
"body": "${1:width = }getstrwidth(${2:str}, ${3:font}, ${4:sz})$0",
"description": "function width = getstrwidth(str,font,sz)" 
},
"linkgs": {
"prefix": "linkgs",
"body": "linkgs$0",
"description": "function linkgs()" 
},
"pfadecrypt": {
"prefix": "pfadecrypt",
"body": "${1:data = }pfadecrypt(${2:data})$0",
"description": "function data = pfadecrypt(data)" 
},
"pfb2pfa": {
"prefix": "pfb2pfa",
"body": "${1:[data, fontname] = }pfb2pfa(${2:pfbfile}, ${3:psstr})$0",
"description": "function [data,fontname] = pfb2pfa(pfbfile,psstr)" 
},
"pfbembed": {
"prefix": "pfbembed",
"body": "${1:[data, fontname] = }pfbembed(${2:pfbfile}, ${3:doencrypt}, ${4:psstr})$0",
"description": "function [data,fontname] = pfbembed(pfbfile,doencrypt,psstr)" 
},
"pfbread": {
"prefix": "pfbread",
"body": "${1:[data, fontname] = }pfbread(${2:pfbfile})$0",
"description": "function [data,fontname] = pfbread(pfbfile)" 
},
"putdata": {
"prefix": "putdata",
"body": "putdata(${2:outfile}, ${3:imgdata}, ${4:wmfdata}, ${5:tifdata})$0",
"description": "function putdata(outfile,imgdata,wmfdata,tifdata)" 
},
"setencodingisolatin1": {
"prefix": "setencodingisolatin1",
"body": "${1:FInfo = }setencodingisolatin1(${2:FInfo})$0",
"description": "function FInfo = setencodingisolatin1(FInfo)" 
},
"setencodingstandard": {
"prefix": "setencodingstandard",
"body": "${1:FInfo = }setencodingstandard(${2:FInfo})$0",
"description": "function FInfo = setencodingstandard(FInfo)" 
},
"setencodingwindows": {
"prefix": "setencodingwindows",
"body": "${1:FInfo = }setencodingwindows(${2:FInfo})$0",
"description": "function FInfo = setencodingwindows(FInfo)" 
},
"settightpos": {
"prefix": "settightpos",
"body": "settightpos(${2:fig})$0",
"description": "function settightpos(fig)" 
},
"type1info": {
"prefix": "type1info",
"body": "${1:[FInfo, data] = }type1info(${2:data}, ${3:detail}, ${4:winenc})$0",
"description": "function [FInfo,data] = type1info(data,detail,winenc)" 
},
"type1subset": {
"prefix": "type1subset",
"body": "${1:[data, fontname] = }type1subset(${2:data}, ${3:chars})$0",
"description": "function [data,fontname] = type1subset(data,chars)" 
},
"append_pdfs": {
"prefix": "append_pdfs",
"body": "append_pdfs(${2:varargin})$0",
"description": "function append_pdfs(varargin)" 
},
"copyfig": {
"prefix": "copyfig",
"body": "${1:fh = }copyfig(${2:fh})$0",
"description": "function fh = copyfig(fh)" 
},
"crop_borders": {
"prefix": "crop_borders",
"body": "${1:[A, vA, vB, bb_rel] = }crop_borders(${2:A}, ${3:bcol}, ${4:padding})$0",
"description": "function [A, vA, vB, bb_rel] = crop_borders(A, bcol, padding)" 
},
"eps2pdf": {
"prefix": "eps2pdf",
"body": "eps2pdf(${2:source}, ${3:dest}, ${4:crop}, ${5:append}, ${6:gray}, ${7:quality}, ${8:gs_options})$0",
"description": "function eps2pdf(source, dest, crop, append, gray, quality, gs_options)" 
},
"export_fig": {
"prefix": "export_fig",
"body": "${1:[imageData, alpha] = }export_fig(${2:varargin})$0",
"description": "function [imageData, alpha] = export_fig(varargin)" 
},
"fix_lines": {
"prefix": "fix_lines",
"body": "${1:fstrm = }fix_lines(${2:fstrm}, ${3:fname2})$0",
"description": "function fstrm = fix_lines(fstrm, fname2)" 
},
"ghostscript": {
"prefix": "ghostscript",
"body": "${1:varargout = }ghostscript(${2:cmd})$0",
"description": "function varargout = ghostscript(cmd)" 
},
"im2gif": {
"prefix": "im2gif",
"body": "im2gif(${2:A}, ${3:varargin})$0",
"description": "function im2gif(A, varargin)" 
},
"isolate_axes": {
"prefix": "isolate_axes",
"body": "${1:fh = }isolate_axes(${2:ah}, ${3:vis})$0",
"description": "function fh = isolate_axes(ah, vis)" 
},
"pdf2eps": {
"prefix": "pdf2eps",
"body": "pdf2eps(${2:source}, ${3:dest})$0",
"description": "function pdf2eps(source, dest)" 
},
"pdftops": {
"prefix": "pdftops",
"body": "${1:varargout = }pdftops(${2:cmd})$0",
"description": "function varargout = pdftops(cmd)" 
},
"print2array": {
"prefix": "print2array",
"body": "${1:[A, bcol] = }print2array(${2:fig}, ${3:res}, ${4:renderer}, ${5:gs_options})$0",
"description": "function [A, bcol] = print2array(fig, res, renderer, gs_options)" 
},
"print2eps": {
"prefix": "print2eps",
"body": "print2eps(${2:name}, ${3:fig}, ${4:export_options}, ${5:varargin})$0",
"description": "function print2eps(name, fig, export_options, varargin)" 
},
"read_write_entire_textfile": {
"prefix": "read_write_entire_textfile",
"body": "${1:fstrm = }read_write_entire_textfile(${2:fname}, ${3:fstrm})$0",
"description": "function fstrm = read_write_entire_textfile(fname, fstrm)" 
},
"user_string": {
"prefix": "user_string",
"body": "${1:string = }user_string(${2:string_name}, ${3:string})$0",
"description": "function string = user_string(string_name, string)" 
},
"using_hg2": {
"prefix": "using_hg2",
"body": "${1:tf = }using_hg2(${2:fig})$0",
"description": "function tf = using_hg2(fig)" 
},
"tool figure": {
"prefix": "tool figure",
"body": "tool figure$0",
"description": "tool figure" 
},
"DemoFindPeak": {
"prefix": "DemoFindPeak",
"body": "DemoFindPeak$0",
"description": "DemoFindPeak" 
},
"findpeaks": {
"prefix": "findpeaks",
"body": "${1:P = }findpeaks(${2:x}, ${3:y}, ${4:SlopeThreshold}, ${5:AmpThreshold}, ${6:smoothwidth}, ${7:peakgroup}, ${8:smoothtype})$0",
"description": "function P=findpeaks(x,y,SlopeThreshold,AmpThreshold,smoothwidth,peakgroup,smoothtype)" 
},
"findvalleys": {
"prefix": "findvalleys",
"body": "${1:V = }findvalleys(${2:x}, ${3:y}, ${4:SlopeThreshold}, ${5:AmpThreshold}, ${6:smoothwidth}, ${7:peakgroup}, ${8:smoothtype})$0",
"description": "function V=findvalleys(x,y,SlopeThreshold,AmpThreshold,smoothwidth,peakgroup,smoothtype)" 
},
"ipeak": {
"prefix": "ipeak",
"body": "${1:P = }ipeak(${2:DataMatrix}, ${3:PeakD}, ${4:AmpT}, ${5:SlopeT}, ${6:SmoothW}, ${7:FitW}, ${8:xcenter}, ${9:xrange}, ${10:MaxError}, ${11:positions}, ${12:names})$0",
"description": "function P=ipeak(DataMatrix,PeakD,AmpT,SlopeT,SmoothW,FitW,xcenter,xrange,MaxError,positions,names)" 
},
"ipeakdemo": {
"prefix": "ipeakdemo",
"body": "ipeakdemo$0",
"description": "ipeakdemo" 
},
"ipeakdemo1": {
"prefix": "ipeakdemo1",
"body": "ipeakdemo1$0",
"description": "ipeakdemo1" 
},
"ipeakdemo2": {
"prefix": "ipeakdemo2",
"body": "ipeakdemo2$0",
"description": "ipeakdemo2" 
},
"ipeakdemo3": {
"prefix": "ipeakdemo3",
"body": "ipeakdemo3$0",
"description": "ipeakdemo3" 
},
"ipeakdemo4": {
"prefix": "ipeakdemo4",
"body": "ipeakdemo4$0",
"description": "ipeakdemo4" 
},
"ipeakdemo5": {
"prefix": "ipeakdemo5",
"body": "ipeakdemo5$0",
"description": "ipeakdemo5" 
},
"testipeak": {
"prefix": "testipeak",
"body": "testipeak$0",
"description": "testipeak" 
},
"columnlegend": {
"prefix": "columnlegend",
"body": "${1:[legend_h, object_h, plot_h, text_strings] = }columnlegend(${2:numcolumns}, ${3:str}, ${4:varargin})$0",
"description": "function [legend_h,object_h,plot_h,text_strings] = columnlegend(numcolumns, str, varargin)" 
},
"gridDemo": {
"prefix": "gridDemo",
"body": "gridDemo$0",
"description": "gridDemo" 
},
"gridLegend": {
"prefix": "gridLegend",
"body": "${1:legend_h = }gridLegend(${2:hdl}, ${3:gd}, ${4:varargin})$0",
"description": "function legend_h = gridLegend(hdl,gd,varargin)" 
},
"panel": {
"prefix": "panel",
"body": "panel$0",
"description": "panel" 
},
"demopanel1": {
"prefix": "demopanel1",
"body": "demopanel1$0",
"description": "demopanel1" 
},
"demopanel2": {
"prefix": "demopanel2",
"body": "demopanel2$0",
"description": "demopanel2" 
},
"demopanel3": {
"prefix": "demopanel3",
"body": "demopanel3$0",
"description": "demopanel3" 
},
"demopanel4": {
"prefix": "demopanel4",
"body": "demopanel4$0",
"description": "demopanel4" 
},
"demopanel5": {
"prefix": "demopanel5",
"body": "demopanel5$0",
"description": "demopanel5" 
},
"demopanel6": {
"prefix": "demopanel6",
"body": "demopanel6$0",
"description": "demopanel6" 
},
"demopanel7": {
"prefix": "demopanel7",
"body": "demopanel7$0",
"description": "demopanel7" 
},
"demopanel8": {
"prefix": "demopanel8",
"body": "demopanel8$0",
"description": "demopanel8" 
},
"demopanel9": {
"prefix": "demopanel9",
"body": "demopanel9$0",
"description": "demopanel9" 
},
"demopanelA": {
"prefix": "demopanelA",
"body": "demopanelA$0",
"description": "demopanelA" 
},
"demopanelB": {
"prefix": "demopanelB",
"body": "demopanelB$0",
"description": "demopanelB" 
},
"demopanelC": {
"prefix": "demopanelC",
"body": "demopanelC$0",
"description": "demopanelC" 
},
"demopanelD": {
"prefix": "demopanelD",
"body": "demopanelD$0",
"description": "demopanelD" 
},
"demopanelE": {
"prefix": "demopanelE",
"body": "demopanelE$0",
"description": "demopanelE" 
},
"demopanelF": {
"prefix": "demopanelF",
"body": "demopanelF$0",
"description": "demopanelF" 
},
"demopanel_callback": {
"prefix": "demopanel_callback",
"body": "demopanel_callback(${2:data})$0",
"description": "function demopanel_callback(data)" 
},
"demopanel_minihist": {
"prefix": "demopanel_minihist",
"body": "demopanel_minihist(${2:stats}, ${3:show_xtick}, ${4:show_ytick})$0",
"description": "function demopanel_minihist(stats, show_xtick, show_ytick)" 
},
"Plot2LaTeX": {
"prefix": "Plot2LaTeX",
"body": "Plot2LaTeX(${2:h}, ${3:filename}, ${4:options})$0",
"description": "function Plot2LaTeX( h, filename, options )" 
},
"ChangeInterpreter": {
"prefix": "ChangeInterpreter",
"body": "ChangeInterpreter(${2:h}, ${3:Interpreter})$0",
"description": "function ChangeInterpreter(h,Interpreter)" 
},
"Greeks": {
"prefix": "Greeks",
"body": "${1:greeks = }Greeks$0",
"description": "function [ greeks ] = Greeks" 
},
"MakeExampleFigure": {
"prefix": "MakeExampleFigure",
"body": "MakeExampleFigure$0",
"description": "MakeExampleFigure" 
},
"demo_3d_plot2svg": {
"prefix": "demo_3d_plot2svg",
"body": "demo_3d_plot2svg$0",
"description": "demo_3d_plot2svg" 
},
"demo_svg_water": {
"prefix": "demo_svg_water",
"body": "demo_svg_water$0",
"description": "function demo_svg_water" 
},
"plot2svg": {
"prefix": "plot2svg",
"body": "${1:varargout = }plot2svg(${2:param1}, ${3:id}, ${4:pixelfiletype})$0",
"description": "function varargout = plot2svg(param1,id,pixelfiletype)" 
},
"simulink2svg": {
"prefix": "simulink2svg",
"body": "simulink2svg$0",
"description": "function simulink2svg" 
},
"svgBoundingBox": {
"prefix": "svgBoundingBox",
"body": "svgBoundingBox(${2:s}, ${3:type}, ${4:overlap}, ${5:visible})$0",
"description": "function svgBoundingBox(s, type, overlap, visible)" 
},
"svgComposite": {
"prefix": "svgComposite",
"body": "svgComposite(${2:s}, ${3:source1}, ${4:source2}, ${5:operator}, ${6:result}, ${7:k})$0",
"description": "function svgComposite(s, source1, source2, operator, result, k)" 
},
"svgGaussianBlur": {
"prefix": "svgGaussianBlur",
"body": "svgGaussianBlur(${2:s}, ${3:source}, ${4:deviation}, ${5:result})$0",
"description": "function svgGaussianBlur(s, source, deviation, result)" 
},
"svgImage": {
"prefix": "svgImage",
"body": "svgImage(${2:s}, ${3:file}, ${4:aspectRatio}, ${5:result})$0",
"description": "function svgImage(s, file, aspectRatio, result)" 
},
"svgLuminanceToAlpha": {
"prefix": "svgLuminanceToAlpha",
"body": "svgLuminanceToAlpha(${2:s}, ${3:source}, ${4:result})$0",
"description": "function svgLuminanceToAlpha(s, source, result)" 
},
"svgOffset": {
"prefix": "svgOffset",
"body": "svgOffset(${2:s}, ${3:source}, ${4:offset}, ${5:result})$0",
"description": "function svgOffset(s, source, offset, result)" 
},
"svgSpecularLightingDistant": {
"prefix": "svgSpecularLightingDistant",
"body": "svgSpecularLightingDistant(${2:s}, ${3:source}, ${4:specularConstant}, ${5:specularExponent}, ${6:surfaceScale}, ${7:azimuth}, ${8:elevation}, ${9:result})$0",
"description": "function svgSpecularLightingDistant(s, source, specularConstant, specularExponent, surfaceScale, azimuth, elevation, result)" 
},
"svgTurbulence": {
"prefix": "svgTurbulence",
"body": "svgTurbulence(${2:s}, ${3:frequency}, ${4:octaves}, ${5:seed}, ${6:stitch}, ${7:type}, ${8:result})$0",
"description": "function svgTurbulence(s, frequency, octaves, seed, stitch, type, result)" 
},
"tutorial_filters": {
"prefix": "tutorial_filters",
"body": "tutorial_filters$0",
"description": "function tutorial_filters" 
},
"tutorial_plot2svg": {
"prefix": "tutorial_plot2svg",
"body": "tutorial_plot2svg$0",
"description": "function tutorial_plot2svg" 
},
"fig2plotly": {
"prefix": "fig2plotly",
"body": "${1:p = }fig2plotly(${2:varargin})$0",
"description": "function p = fig2plotly(varargin)" 
},
"getplotlyfig": {
"prefix": "getplotlyfig",
"body": "${1:p = }getplotlyfig(${2:file_owner}, ${3:file_id})$0",
"description": "function p = getplotlyfig(file_owner, file_id)" 
},
"plotlyfig": {
"prefix": "plotlyfig",
"body": "${1:obj = }plotlyfig(${2:varargin})$0",
"description": "function obj = plotlyfig(varargin)" 
},
"plotlyhelp": {
"prefix": "plotlyhelp",
"body": "${1:plotlyref = }plotlyhelp(${2:varargin})$0",
"description": "function plotlyref = plotlyhelp(varargin)" 
},
"plotlystream": {
"prefix": "plotlystream",
"body": "${1:obj = }plotlystream(${2:request})$0",
"description": "function obj = plotlystream(request)" 
},
"saveplotlyfig": {
"prefix": "saveplotlyfig",
"body": "${1:p = }saveplotlyfig(${2:figure_or_data}, ${3:filename}, ${4:varargin})$0",
"description": "function p = saveplotlyfig(figure_or_data, filename, varargin)" 
},
"export_fig2": {
"prefix": "export_fig2",
"body": "export_fig2(${2:fig}, ${3:beautify}, ${4:filename}, ${5:format})$0",
"description": "function export_fig2(fig, beautify, filename, format)" 
},
"base64decode_V1": {
"prefix": "base64decode_V1",
"body": "${1:y = }base64decode(${2:x}, ${3:outfname}, ${4:alg})$0",
"description": "function y = base64decode(x, outfname, alg)" 
},
"cell2json": {
"prefix": "cell2json",
"body": "${1:str = }cell2json(${2:s})$0",
"description": "function str = cell2json(s)" 
},
"checkescape": {
"prefix": "checkescape",
"body": "${1:escaped_val = }checkescape(${2:val})$0",
"description": "function escaped_val = checkescape(val)" 
},
"escapechars": {
"prefix": "escapechars",
"body": "${1:clean = }escapechars(${2:dirty})$0",
"description": "function clean = escapechars(dirty)" 
},
"getuserdir": {
"prefix": "getuserdir",
"body": "${1:userDir = }getuserdir$0",
"description": "function userDir = getuserdir" 
},
"is_octave": {
"prefix": "is_octave",
"body": "${1:r = }is_octave$0",
"description": "function r = is_octave ()" 
},
"m2json": {
"prefix": "m2json",
"body": "${1:valstr = }m2json(${2:val})$0",
"description": "function valstr = m2json(val)" 
},
"makecall": {
"prefix": "makecall",
"body": "${1:st = }makecall(${2:args}, ${3:origin}, ${4:structargs})$0",
"description": "function st = makecall(args, origin, structargs)" 
},
"plotly": {
"prefix": "plotly",
"body": "${1:response = }plotly(${2:varargin})$0",
"description": "function [response] = plotly(varargin)" 
},
"plotly_version": {
"prefix": "plotly_version",
"body": "${1:version = }plotly_version$0",
"description": "function version = plotly_version()" 
},
"plotlygenimage": {
"prefix": "plotlygenimage",
"body": "plotlygenimage(${2:figure_or_data}, ${3:filename}, ${4:varargin})$0",
"description": "function plotlygenimage(figure_or_data, filename, varargin)" 
},
"plotlygetfile": {
"prefix": "plotlygetfile",
"body": "${1:figure = }plotlygetfile(${2:file_owner}, ${3:file_id})$0",
"description": "function figure = plotlygetfile(file_owner, file_id)" 
},
"response_handler": {
"prefix": "response_handler",
"body": "response_handler(${2:response_body}, ${3:varargin})$0",
"description": "function response_handler(response_body, varargin)" 
},
"struct2json": {
"prefix": "struct2json",
"body": "${1:str = }struct2json(${2:s})$0",
"description": "function str = struct2json(s)" 
},
"validatedir": {
"prefix": "validatedir",
"body": "validatedir(${2:status}, ${3:mess}, ${4:messid}, ${5:filename})$0",
"description": "function validatedir(status, mess, messid, filename)" 
},
"updateplotlyhelp": {
"prefix": "updateplotlyhelp",
"body": "updateplotlyhelp$0",
"description": "function updateplotlyhelp" 
},
"getplotlyoffline": {
"prefix": "getplotlyoffline",
"body": "getplotlyoffline(${2:plotly_bundle_url})$0",
"description": "function getplotlyoffline(plotly_bundle_url)" 
},
"plotlyoffline": {
"prefix": "plotlyoffline",
"body": "${1:response = }plotlyoffline(${2:plotlyfig})$0",
"description": "function response = plotlyoffline(plotlyfig)" 
},
"addplotlystartup": {
"prefix": "addplotlystartup",
"body": "${1:warnings = }addplotlystartup(${2:startupPaths})$0",
"description": "function [warnings] = addplotlystartup(startupPaths)" 
},
"plotlycleanup": {
"prefix": "plotlycleanup",
"body": "${1:removed = }plotlycleanup$0",
"description": "function removed = plotlycleanup" 
},
"plotlyupdate": {
"prefix": "plotlyupdate",
"body": "plotlyupdate(${2:varargin})$0",
"description": "function plotlyupdate(varargin)" 
},
"loadplotlyconfig": {
"prefix": "loadplotlyconfig",
"body": "${1:config = }loadplotlyconfig$0",
"description": "function config = loadplotlyconfig()" 
},
"loadplotlycredentials": {
"prefix": "loadplotlycredentials",
"body": "${1:creds = }loadplotlycredentials$0",
"description": "function creds = loadplotlycredentials()" 
},
"saveplotlyconfig": {
"prefix": "saveplotlyconfig",
"body": "saveplotlyconfig(${2:plotly_domain}, ${3:plotly_streaming_domain})$0",
"description": "function saveplotlyconfig(plotly_domain,plotly_streaming_domain)" 
},
"saveplotlycredentials": {
"prefix": "saveplotlycredentials",
"body": "saveplotlycredentials(${2:username}, ${3:api_key}, ${4:stream_ids})$0",
"description": "function saveplotlycredentials(username, api_key, stream_ids)" 
},
"signin": {
"prefix": "signin",
"body": "${1:[un, key, domain] = }signin(${2:varargin})$0",
"description": "function [un, key, domain] = signin(varargin)" 
},
"signup": {
"prefix": "signup",
"body": "${1:response = }signup(${2:username}, ${3:email})$0",
"description": "function response = signup(username, email)" 
},
"updateAnnotation": {
"prefix": "updateAnnotation",
"body": "${1:obj = }updateAnnotation(${2:obj}, ${3:anIndex})$0",
"description": "function obj = updateAnnotation(obj,anIndex)" 
},
"updateAxis": {
"prefix": "updateAxis",
"body": "${1:obj = }updateAxis(${2:obj}, ${3:axIndex})$0",
"description": "function obj = updateAxis(obj,axIndex)" 
},
"updateColorbar": {
"prefix": "updateColorbar",
"body": "${1:obj = }updateColorbar(${2:obj}, ${3:colorbarIndex})$0",
"description": "function obj = updateColorbar(obj,colorbarIndex)" 
},
"updateData": {
"prefix": "updateData",
"body": "${1:obj = }updateData(${2:obj}, ${3:dataIndex})$0",
"description": "function obj = updateData(obj, dataIndex)" 
},
"updateFigure": {
"prefix": "updateFigure",
"body": "${1:obj = }updateFigure(${2:obj})$0",
"description": "function obj = updateFigure(obj)" 
},
"updateLegend": {
"prefix": "updateLegend",
"body": "${1:obj = }updateLegend(${2:obj}, ${3:legIndex})$0",
"description": "function obj = updateLegend(obj, legIndex)" 
},
"updateArea": {
"prefix": "updateArea",
"body": "updateArea(${2:obj}, ${3:areaIndex})$0",
"description": "function updateArea(obj,areaIndex)" 
},
"updateAreaseries": {
"prefix": "updateAreaseries",
"body": "updateAreaseries(${2:obj}, ${3:areaIndex})$0",
"description": "function updateAreaseries(obj,areaIndex)" 
},
"updateBar": {
"prefix": "updateBar",
"body": "${1:obj = }updateBar(${2:obj}, ${3:barIndex})$0",
"description": "function obj = updateBar(obj,barIndex)" 
},
"updateBarseries": {
"prefix": "updateBarseries",
"body": "${1:obj = }updateBarseries(${2:obj}, ${3:barIndex})$0",
"description": "function obj = updateBarseries(obj,barIndex)" 
},
"updateBaseline": {
"prefix": "updateBaseline",
"body": "${1:obj = }updateBaseline(${2:obj}, ${3:baseIndex})$0",
"description": "function obj = updateBaseline(obj, baseIndex)" 
},
"updateBoxplot": {
"prefix": "updateBoxplot",
"body": "${1:obj = }updateBoxplot(${2:obj}, ${3:boxIndex})$0",
"description": "function obj = updateBoxplot(obj, boxIndex)" 
},
"updateContourgroup": {
"prefix": "updateContourgroup",
"body": "${1:obj = }updateContourgroup(${2:obj}, ${3:contourIndex})$0",
"description": "function obj = updateContourgroup(obj,contourIndex)" 
},
"updateErrorbar": {
"prefix": "updateErrorbar",
"body": "${1:obj = }updateErrorbar(${2:obj}, ${3:errorbarIndex})$0",
"description": "function obj = updateErrorbar(obj, errorbarIndex)" 
},
"updateErrorbarseries": {
"prefix": "updateErrorbarseries",
"body": "${1:obj = }updateErrorbarseries(${2:obj}, ${3:errorbarIndex})$0",
"description": "function obj = updateErrorbarseries(obj, errorbarIndex)" 
},
"updateHistogram": {
"prefix": "updateHistogram",
"body": "${1:obj = }updateHistogram(${2:obj}, ${3:histIndex})$0",
"description": "function obj = updateHistogram(obj,histIndex)" 
},
"updateImage": {
"prefix": "updateImage",
"body": "${1:obj = }updateImage(${2:obj}, ${3:imageIndex})$0",
"description": "function obj = updateImage(obj, imageIndex)" 
},
"updateLineseries": {
"prefix": "updateLineseries",
"body": "updateLineseries(${2:obj}, ${3:plotIndex})$0",
"description": "function updateLineseries(obj,plotIndex)" 
},
"updatePatch": {
"prefix": "updatePatch",
"body": "${1:obj = }updatePatch(${2:obj}, ${3:patchIndex})$0",
"description": "function obj = updatePatch(obj, patchIndex)" 
},
"updateQuiver": {
"prefix": "updateQuiver",
"body": "${1:obj = }updateQuiver(${2:obj}, ${3:quiverIndex})$0",
"description": "function obj = updateQuiver(obj, quiverIndex)" 
},
"updateQuivergroup": {
"prefix": "updateQuivergroup",
"body": "${1:obj = }updateQuivergroup(${2:obj}, ${3:quiverIndex})$0",
"description": "function obj = updateQuivergroup(obj, quiverIndex)" 
},
"updateRectangle": {
"prefix": "updateRectangle",
"body": "${1:obj = }updateRectangle(${2:obj}, ${3:rectIndex})$0",
"description": "function obj = updateRectangle(obj, rectIndex)" 
},
"updateScatter": {
"prefix": "updateScatter",
"body": "updateScatter(${2:obj}, ${3:scatterIndex})$0",
"description": "function updateScatter(obj,scatterIndex)" 
},
"updateScattergroup": {
"prefix": "updateScattergroup",
"body": "updateScattergroup(${2:obj}, ${3:scatterIndex})$0",
"description": "function updateScattergroup(obj,scatterIndex)" 
},
"updateStair": {
"prefix": "updateStair",
"body": "${1:obj = }updateStair(${2:obj}, ${3:dataIndex})$0",
"description": "function obj = updateStair(obj, dataIndex)" 
},
"updateStairseries": {
"prefix": "updateStairseries",
"body": "${1:obj = }updateStairseries(${2:obj}, ${3:dataIndex})$0",
"description": "function obj = updateStairseries(obj, dataIndex)" 
},
"updateStem": {
"prefix": "updateStem",
"body": "${1:obj = }updateStem(${2:obj}, ${3:dataIndex})$0",
"description": "function obj = updateStem(obj,dataIndex)" 
},
"updateStemseries": {
"prefix": "updateStemseries",
"body": "${1:obj = }updateStemseries(${2:obj}, ${3:dataIndex})$0",
"description": "function obj = updateStemseries(obj,dataIndex)" 
},
"updateSurfaceplot": {
"prefix": "updateSurfaceplot",
"body": "${1:obj = }updateSurfaceplot(${2:obj}, ${3:surfaceIndex})$0",
"description": "function obj = updateSurfaceplot(obj, surfaceIndex)" 
},
"cleanFeedTitle": {
"prefix": "cleanFeedTitle",
"body": "cleanFeedTitle(${2:obj})$0",
"description": "function cleanFeedTitle(obj)" 
},
"convertDate": {
"prefix": "convertDate",
"body": "${1:converted = }convertDate(${2:date})$0",
"description": "function converted = convertDate(date)" 
},
"extractAreaFace": {
"prefix": "extractAreaFace",
"body": "${1:face = }extractAreaFace(${2:area_data})$0",
"description": "function face = extractAreaFace(area_data)" 
},
"extractAreaLine": {
"prefix": "extractAreaLine",
"body": "${1:line = }extractAreaLine(${2:area_data})$0",
"description": "function line = extractAreaLine(area_data)" 
},
"extractBarMarker": {
"prefix": "extractBarMarker",
"body": "${1:marker = }extractBarMarker(${2:bar_data})$0",
"description": "function marker = extractBarMarker(bar_data)" 
},
"extractLineLine": {
"prefix": "extractLineLine",
"body": "${1:line = }extractLineLine(${2:line_data})$0",
"description": "function line = extractLineLine(line_data)" 
},
"extractLineMarker": {
"prefix": "extractLineMarker",
"body": "${1:marker = }extractLineMarker(${2:line_data})$0",
"description": "function marker = extractLineMarker(line_data)" 
},
"extractPatchFace": {
"prefix": "extractPatchFace",
"body": "${1:marker = }extractPatchFace(${2:patch_data})$0",
"description": "function marker = extractPatchFace(patch_data)" 
},
"extractPatchLine": {
"prefix": "extractPatchLine",
"body": "${1:line = }extractPatchLine(${2:patch_data})$0",
"description": "function line = extractPatchLine(patch_data)" 
},
"extractPatchMarker": {
"prefix": "extractPatchMarker",
"body": "${1:marker = }extractPatchMarker(${2:patch_data})$0",
"description": "function marker = extractPatchMarker(patch_data)" 
},
"extractScatterMarker": {
"prefix": "extractScatterMarker",
"body": "${1:marker = }extractScatterMarker(${2:patch_data})$0",
"description": "function marker = extractScatterMarker(patch_data)" 
},
"findColorbarAxis": {
"prefix": "findColorbarAxis",
"body": "${1:colorbarAxis = }findColorbarAxis(${2:obj}, ${3:colorbarHandle})$0",
"description": "function colorbarAxis = findColorbarAxis(obj,colorbarHandle)" 
},
"findColorbarData": {
"prefix": "findColorbarData",
"body": "${1:colorbarDataIndex = }findColorbarData(${2:obj}, ${3:colorbarIndex})$0",
"description": "function colorbarDataIndex = findColorbarData(obj,colorbarIndex)" 
},
"findLegendAxis": {
"prefix": "findLegendAxis",
"body": "${1:legendAxis = }findLegendAxis(${2:obj}, ${3:legendHandle})$0",
"description": "function legendAxis = findLegendAxis(obj,legendHandle)" 
},
"findSourceAxis": {
"prefix": "findSourceAxis",
"body": "${1:[xsource, ysource, xoverlay, yoverlay] = }findSourceAxis(${2:obj}, ${3:axIndex})$0",
"description": "function [xsource, ysource, xoverlay, yoverlay] = findSourceAxis(obj, axIndex)" 
},
"formatRW": {
"prefix": "formatRW",
"body": "${1:outputStr = }formatRW(${2:inputStr})$0",
"description": "function outputStr = formatRW(inputStr)" 
},
"generateBoxData": {
"prefix": "generateBoxData",
"body": "${1:y = }generateBoxData(${2:outliers}, ${3:boxmin}, ${4:Q2}, ${5:med}, ${6:Q3}, ${7:boxmax})$0",
"description": "function y = generateBoxData(outliers, boxmin, Q2, med, Q3, boxmax)" 
},
"getGraphClass": {
"prefix": "getGraphClass",
"body": "${1:gc = }getGraphClass(${2:obj})$0",
"description": "function gc = getGraphClass(obj)" 
},
"handleFileName": {
"prefix": "handleFileName",
"body": "handleFileName(${2:obj})$0",
"description": "function handleFileName(obj)" 
},
"histogramOrientation": {
"prefix": "histogramOrientation",
"body": "${1:orientation = }histogramOrientation(${2:hist_data})$0",
"description": "function orientation = histogramOrientation(hist_data)" 
},
"isBoxplot": {
"prefix": "isBoxplot",
"body": "${1:check = }isBoxplot(${2:obj}, ${3:boxIndex})$0",
"description": "function check = isBoxplot(obj, boxIndex)" 
},
"isExceptionStrip": {
"prefix": "isExceptionStrip",
"body": "${1:check = }isExceptionStrip(${2:grstruct}, ${3:fieldname})$0",
"description": "function check = isExceptionStrip(grstruct, fieldname)" 
},
"isHG2": {
"prefix": "isHG2",
"body": "${1:check = }isHG2$0",
"description": "function check = isHG2" 
},
"isHistogram": {
"prefix": "isHistogram",
"body": "${1:check = }isHistogram(${2:obj}, ${3:dataIndex})$0",
"description": "function check = isHistogram(obj, dataIndex)" 
},
"isMultipleBaseline": {
"prefix": "isMultipleBaseline",
"body": "${1:check = }isMultipleBaseline(${2:obj}, ${3:baselineIndex})$0",
"description": "function check = isMultipleBaseline(obj, baselineIndex)" 
},
"isOverlappingAxis": {
"prefix": "isOverlappingAxis",
"body": "${1:[overlapping, overlapaxes] = }isOverlappingAxis(${2:obj}, ${3:axIndex})$0",
"description": "function [overlapping, overlapaxes] = isOverlappingAxis(obj, axIndex)" 
},
"matlab2plotlyfont": {
"prefix": "matlab2plotlyfont",
"body": "${1:plotlyFont = }matlab2plotlyfont(${2:matlabFont})$0",
"description": "function plotlyFont = matlab2plotlyfont(matlabFont)" 
},
"openurl": {
"prefix": "openurl",
"body": "openurl(${2:url})$0",
"description": "function openurl(url)" 
},
"parseString": {
"prefix": "parseString",
"body": "${1:formatStr = }parseString(${2:inputStr}, ${3:interpreter})$0",
"description": "function formatStr = parseString(inputStr,interpreter)" 
},
"plotlymsg": {
"prefix": "plotlymsg",
"body": "${1:errormsg = }plotlymsg(${2:key})$0",
"description": "function errormsg = plotlymsg(key)" 
},
"plotlystream_demo": {
"prefix": "plotlystream_demo",
"body": "plotlystream_demo$0",
"description": "plotlystream_demo" 
},
"example1": {
"prefix": "example1",
"body": "example1$0",
"description": "example1" 
},
"example2": {
"prefix": "example2",
"body": "example2$0",
"description": "example2" 
},
"example3": {
"prefix": "example3",
"body": "example3$0",
"description": "example3" 
},
"example4": {
"prefix": "example4",
"body": "example4$0",
"description": "example4" 
},
"example5": {
"prefix": "example5",
"body": "example5$0",
"description": "example5" 
},
"example6": {
"prefix": "example6",
"body": "example6$0",
"description": "example6" 
},
"example7": {
"prefix": "example7",
"body": "example7$0",
"description": "example7" 
},
"plotregion": {
"prefix": "plotregion",
"body": "plotregion(${2:A}, ${3:b}, ${4:lb}, ${5:ub}, ${6:c}, ${7:transp}, ${8:points}, ${9:linetyp}, ${10:start_end})$0",
"description": "function plotregion(A,b,lb,ub,c,transp,points,linetyp,start_end)" 
},
"edgeAttPD": {
"prefix": "edgeAttPD",
"body": "${1:EA = }edgeAttPD(${2:T}, ${3:edges})$0",
"description": "function EA = edgeAttPD(T, edges)" 
},
"freeBouPD": {
"prefix": "freeBouPD",
"body": "${1:FB = }freeBouPD(${2:T}, ${3:P})$0",
"description": "function FB = freeBouPD(T, P)" 
},
"liftPD": {
"prefix": "liftPD",
"body": "${1:LE = }liftPD(${2:E}, ${3:wts})$0",
"description": "function LE = liftPD(E, wts)" 
},
"normalsPD": {
"prefix": "normalsPD",
"body": "${1:ind = }normalsPD(${2:LE}, ${3:C})$0",
"description": "function ind = normalsPD(LE, C)" 
},
"piecesPD": {
"prefix": "piecesPD",
"body": "${1:[P, total] = }piecesPD(${2:T})$0",
"description": "function [P, total] = piecesPD(T)" 
},
"powerDiagramWrapper": {
"prefix": "powerDiagramWrapper",
"body": "${1:[PD, PDinf] = }powerDiagramWrapper(${2:E}, ${3:wts})$0",
"description": "function [PD, PDinf] = powerDiagramWrapper(E, wts)" 
},
"powercentersPD": {
"prefix": "powercentersPD",
"body": "${1:[PC, powers] = }powercentersPD(${2:T}, ${3:E}, ${4:wts})$0",
"description": "function [PC, powers] = powercentersPD(T, E, wts)" 
},
"powerdiagram": {
"prefix": "powerdiagram",
"body": "${1:[vxx, vy] = }powerdiagram(${2:varargin})$0",
"description": "function [vxx,vy] = powerdiagram(varargin)" 
},
"pwrDiagramPD": {
"prefix": "pwrDiagramPD",
"body": "${1:PD = }pwrDiagramPD(${2:T}, ${3:PC})$0",
"description": "function PD = pwrDiagramPD(T, PC)" 
},
"fixPSlinestyle": {
"prefix": "fixPSlinestyle",
"body": "fixPSlinestyle(${2:varargin})$0",
"description": "function fixPSlinestyle(varargin)" 
},
"Test_SavePPT2": {
"prefix": "Test_SavePPT2",
"body": "Test_SavePPT2$0",
"description": "Test_SavePPT2" 
},
"saveppt2": {
"prefix": "saveppt2",
"body": "${1:varargout = }saveppt2(${2:varargin})$0",
"description": "function varargout=saveppt2(varargin)" 
},
"stdshade": {
"prefix": "stdshade",
"body": "stdshade(${2:amatrix}, ${3:alpha}, ${4:acolor}, ${5:F}, ${6:smth})$0",
"description": "function stdshade(amatrix,alpha,acolor,F,smth)" 
},
"subtightplot": {
"prefix": "subtightplot",
"body": "${1:h = }subtightplot(${2:m}, ${3:n}, ${4:p}, ${5:gap}, ${6:marg_h}, ${7:marg_w}, ${8:varargin})$0",
"description": "function h=subtightplot(m,n,p,gap,marg_h,marg_w,varargin)" 
},
"subtightplot_demo": {
"prefix": "subtightplot_demo",
"body": "subtightplot_demo$0",
"description": "subtightplot_demo" 
},
"Word_example": {
"prefix": "Word_example",
"body": "Word_example$0",
"description": "Word_example" 
},
"dispeqn": {
"prefix": "dispeqn",
"body": "dispeqn(${2:varargin})$0",
"description": "function dispeqn(varargin)" 
},
"cprintf": {
"prefix": "cprintf",
"body": "${1:count = }cprintf(${2:style}, ${3:format}, ${4:varargin})$0",
"description": "function count = cprintf(style,format,varargin)" 
},
"printCell": {
"prefix": "printCell",
"body": "printCell(${2:body})$0",
"description": "function printCell(body)" 
},
"loadprojectpath": {
"prefix": "loadprojectpath",
"body": "loadprojectpath(${2:f})$0",
"description": "function loadprojectpath(f)" 
},
"mkdirproject": {
"prefix": "mkdirproject",
"body": "mkdirproject(${2:foldername}, ${3:projname})$0",
"description": "function mkdirproject(foldername, projname)" 
},
"mkdirproject_d": {
"prefix": "mkdirproject_d",
"body": "mkdirproject_d$0",
"description": "mkdirproject_d" 
},
"findDependentFunction_demo": {
"prefix": "findDependentFunction_demo",
"body": "findDependentFunction_demo$0",
"description": "findDependentFunction_demo" 
},
"inputParser_demo": {
"prefix": "inputParser_demo",
"body": "inputParser_demo$0",
"description": "function inputParser_demo" 
},
"uneval": {
"prefix": "uneval",
"body": "${1:the_string = }uneval(${2:var_name}, ${3:value}, ${4:return_cell_array})$0",
"description": "function the_string = uneval(var_name, value, return_cell_array)" 
},
"varname": {
"prefix": "varname",
"body": "${1:out = }varname(${2:varargin})$0",
"description": "function out = varname(varargin)" 
},
"lambertw": {
"prefix": "lambertw",
"body": "${1:w = }lambertw(${2:b}, ${3:z})$0",
"description": "function w = lambertw(b,z)" 
},
"lambertw_demo": {
"prefix": "lambertw_demo",
"body": "lambertw_demo$0",
"description": "lambertw_demo" 
},
"test_main": {
"prefix": "test_main",
"body": "test_main$0",
"description": "test_main" 
},
"digitize2": {
"prefix": "digitize2",
"body": "${1:varargout = }digitize2(${2:varargin})$0",
"description": "function varargout = digitize2(varargin)" 
},
"grabit": {
"prefix": "grabit",
"body": "grabit(${2:fname})$0",
"description": "function grabit(fname)" 
},
"reverseplot20": {
"prefix": "reverseplot20",
"body": "reverseplot20$0",
"description": "function reverseplot20" 
},
"Mydft_demo": {
"prefix": "Mydft_demo",
"body": "Mydft_demo$0",
"description": "Mydft_demo" 
},
"cdft": {
"prefix": "cdft",
"body": "${1:[amp, pha] = }cdft(${2:data}, ${3:f}, ${4:delt_t}, ${5:wyn})$0",
"description": "function [amp, pha]= cdft(data, f, delt_t, wyn)" 
},
"dft_demo2": {
"prefix": "dft_demo2",
"body": "dft_demo2$0",
"description": "function dft_demo2" 
},
"dftlrw": {
"prefix": "dftlrw",
"body": "${1:[xT, yM, hf] = }dftlrw(${2:x})$0",
"description": "function [xT,yM,hf] = dftlrw(x)" 
},
"fft_cycle_demo": {
"prefix": "fft_cycle_demo",
"body": "fft_cycle_demo$0",
"description": "fft_cycle_demo" 
},
"fft_demo2": {
"prefix": "fft_demo2",
"body": "fft_demo2$0",
"description": "fft_demo2" 
},
"fft_demo3": {
"prefix": "fft_demo3",
"body": "fft_demo3$0",
"description": "fft_demo3" 
},
"fft_good_demo": {
"prefix": "fft_good_demo",
"body": "fft_good_demo$0",
"description": "fft_good_demo" 
},
"mydft": {
"prefix": "mydft",
"body": "${1:[xT, yM, hf] = }mydft(${2:X})$0",
"description": "function [xT,yM, hf] = mydft(X)" 
},
"mydft2": {
"prefix": "mydft2",
"body": "${1:[xT, yM, hf] = }mydft2(${2:Data}, ${3:Fs})$0",
"description": "function [xT,yM,hf]=mydft2(Data,Fs)" 
},
"TSAF": {
"prefix": "TSAF",
"body": "${1:varargout = }TSAF(${2:varargin})$0",
"description": "function varargout = TSAF(varargin)" 
},
"find_period_candidate": {
"prefix": "find_period_candidate",
"body": "${1:candidate = }find_period_candidate(${2:T})$0",
"description": "function candidate=find_period_candidate(T)" 
},
"find_periods": {
"prefix": "find_periods",
"body": "${1:[T, original_spectrum, processed_spectrum, frequency_spectrum, selected_index] = }find_periods(${2:x}, ${3:number_of_harmonics}, ${4:peak_diff_samples})$0",
"description": "function [T,original_spectrum,processed_spectrum,frequency_spectrum,selected_index]=find_periods(x,number_of_harmonics,peak_diff_samples)" 
},
"Compare_the_methods": {
"prefix": "Compare_the_methods",
"body": "Compare_the_methods$0",
"description": "Compare_the_methods" 
},
"demo_getfields_struct": {
"prefix": "demo_getfields_struct",
"body": "demo_getfields_struct$0",
"description": "demo_getfields_struct" 
},
"ml": {
"prefix": "ml",
"body": "${1:C = }ml(${2:A}, ${3:B})$0",
"description": "function C = ml(A, B)" 
},
"mll": {
"prefix": "mll",
"body": "${1:B C = }mll(${2:A})$0",
"description": "function [B C] = mll(A)" 
},
"ndbackslash2_d": {
"prefix": "ndbackslash2_d",
"body": "ndbackslash2_d$0",
"description": "ndbackslash2_d" 
},
"raylpdf_d": {
"prefix": "raylpdf_d",
"body": "raylpdf_d$0",
"description": "raylpdf_d" 
},
"test1": {
"prefix": "test1",
"body": "test1$0",
"description": "test1" 
},
"._findNsmallest": {
"prefix": "._findNsmallest",
"body": "._findNsmallest$0",
"description": "._findNsmallest" 
},
"findNsmallest": {
"prefix": "findNsmallest",
"body": "findNsmallest$0",
"description": "findNsmallest" 
},
"test_for": {
"prefix": "test_for",
"body": "test_for$0",
"description": "function main" 
},
"test_par": {
"prefix": "test_par",
"body": "test_par$0",
"description": "function main" 
},
"test_parfor": {
"prefix": "test_parfor",
"body": "test_parfor$0",
"description": "test_parfor" 
},
"taxi": {
"prefix": "taxi",
"body": "${1:fee = }taxi(${2:dist})$0",
"description": "function fee = taxi(dist)" 
},
"SplitVec": {
"prefix": "SplitVec",
"body": "${1:varargout = }SplitVec(${2:v}, ${3:fun}, ${4:varargin})$0",
"description": "function varargout = SplitVec(v, fun, varargin)" 
},
"bsxcat": {
"prefix": "bsxcat",
"body": "${1:C = }bsxcat(${2:dim}, ${3:A}, ${4:B})$0",
"description": "function C = bsxcat(dim, A, B)" 
},
"addpath_lrw": {
"prefix": "addpath_lrw",
"body": "addpath_lrw$0",
"description": "function addpath_lrw()" 
},
"addpath_yy": {
"prefix": "addpath_yy",
"body": "addpath_yy$0",
"description": "function addpath_yy()" 
},
"createSnippetMatlab": {
"prefix": "createSnippetMatlab",
"body": "${1:strSnippet = }createSnippetMatlab(${2:inputs}, ${3:outputs}, ${4:funname})$0",
"description": "function strSnippet = getSnippet(inputs,outputs,funname)" 
},
"fread2cell": {
"prefix": "fread2cell",
"body": "${1:Acell = }fread2cell(${2:f1}, ${3:nlines})$0",
"description": "function Acell = fread2cell(f1, nlines)" 
},
"fwriteJSON_Snippet": {
"prefix": "fwriteJSON_Snippet",
"body": "fwriteJSON_Snippet(${2:fileJSON}, ${3:filenameTable})$0",
"description": "function fwriteJSON_Snippet(fileJSON, filenameTable)" 
},
"get_arg_names": {
"prefix": "get_arg_names",
"body": "${1:[inputNames, outputNames, defLine] = }get_arg_names(${2:filePath})$0",
"description": "function [inputNames, outputNames, defLine] = get_arg_names(filePath)" 
},
"get_arg_namesLRW": {
"prefix": "get_arg_namesLRW",
"body": "${1:[inputNames, outputNames, defLine] = }get_arg_namesLRW(${2:filePath})$0",
"description": "function [inputNames, outputNames, defLine] = get_arg_namesLRW(filePath)" 
},
"get_arg_namesLRW_test": {
"prefix": "get_arg_namesLRW_test",
"body": "get_arg_namesLRW_test$0",
"description": "get_arg_namesLRW_test" 
},
"strip_comment_afterDotDotDot": {
"prefix": "strip_comment_afterDotDotDot",
"body": "${1:TFBegin = }strip_comment_afterDotDotDot(${2:strRaw})$0",
"description": "function TFBegin = strip_comment_afterDotDotDot(strRaw)" 
},
"strip_comment_afterDotDotDot_test": {
"prefix": "strip_comment_afterDotDotDot_test",
"body": "strip_comment_afterDotDotDot_test$0",
"description": "strip_comment_afterDotDotDot_test" 
},
"test_mtimesx_test_ssspeed": {
"prefix": "test_mtimesx_test_ssspeed",
"body": "${1:[a, ttable] = }test_mtimesx_test_ssspeed(${2:nn}, ${3:details})$0",
"description": "function [a,ttable] = mtimesx_test_ssspeed(nn,details)" 
},
"Maplesolve2": {
"prefix": "Maplesolve2",
"body": "${1:varargout = }Maplesolve2(${2:varargin})$0",
"description": "function varargout =  Maplesolve2(varargin)" 
},
"assignsym2maple": {
"prefix": "assignsym2maple",
"body": "${1:assignMaple = }assignsym2maple(${2:assignstr})$0",
"description": "function assignMaple = assignsym2maple(assignstr)" 
},
"childrenv": {
"prefix": "childrenv",
"body": "${1:[a, b] = }childrenv(${2:vsym}, ${3:vsubname})$0",
"description": "function [a, b] = childrenv(vsym, vsubname)" 
},
"eqcheck": {
"prefix": "eqcheck",
"body": "eqcheck(${2:sinp})$0",
"description": "function eqcheck(sinp)" 
},
"eqsolvesym2maple": {
"prefix": "eqsolvesym2maple",
"body": "${1:solvestr = }eqsolvesym2maple(${2:eqmatlab}, ${3:vars})$0",
"description": "function solvestr = eqsolvesym2maple(eqmatlab,vars)" 
},
"eqsym2function": {
"prefix": "eqsym2function",
"body": "eqsym2function(${2:eqsym}, ${3:vtt}, ${4:paracalibrationstr}, ${5:file})$0",
"description": "function eqsym2function(eqsym,vtt,paracalibrationstr,file)" 
},
"eqsym2functionFGsnopt": {
"prefix": "eqsym2functionFGsnopt",
"body": "eqsym2functionFGsnopt(${2:eqsym}, ${3:vtt}, ${4:paracalibrationstr}, ${5:file})$0",
"description": "function eqsym2functionFGsnopt(eqsym,vtt,paracalibrationstr,file)" 
},
"eqsym2functionsnopt": {
"prefix": "eqsym2functionsnopt",
"body": "eqsym2functionsnopt(${2:eqsym}, ${3:vtt}, ${4:paracalibrationstr}, ${5:file})$0",
"description": "function eqsym2functionsnopt(eqsym,vtt,paracalibrationstr,file)" 
},
"evalcellsym": {
"prefix": "evalcellsym",
"body": "evalcellsym(${2:Acell})$0",
"description": "function evalcellsym(Acell)" 
},
"facYoXpZ": {
"prefix": "facYoXpZ",
"body": "${1:[u1, u2, u3] = }facYoXpZ(${2:v}, ${3:x})$0",
"description": "function [u1, u2, u3]  = facYoXpZ(v,x)" 
},
"getMapleSolvestr": {
"prefix": "getMapleSolvestr",
"body": "${1:str = }getMapleSolvestr(${2:vsym}, ${3:vsub})$0",
"description": "function str = getMapleSolvestr(vsym,vsub)" 
},
"maplesolve": {
"prefix": "maplesolve",
"body": "${1:x = }maplesolve(${2:vsym}, ${3:vsub})$0",
"description": "function x = maplesolve(vsym, vsub)" 
},
"mmaple": {
"prefix": "mmaple",
"body": "${1:[r, varargout] = }mmaple(${2:varargin})$0",
"description": "function [r, varargout] = maple(varargin)" 
},
"numdenD": {
"prefix": "numdenD",
"body": "${1:D = }numdenD(${2:vsym})$0",
"description": "function D = numdenD(vsym)" 
},
"numdenU": {
"prefix": "numdenU",
"body": "${1:U = }numdenU(${2:vsym})$0",
"description": "function U = numdenU(vsym)" 
},
"solveXpYRforX": {
"prefix": "solveXpYRforX",
"body": "${1:[X, Y] = }solveXpYRforX(${2:v}, ${3:R}, ${4:x})$0",
"description": "function [X, Y]= solveXpYRforX(v,R,x)" 
},
"solveXtYforX": {
"prefix": "solveXtYforX",
"body": "${1:[X, rhs] = }solveXtYforX(${2:v}, ${3:R}, ${4:x})$0",
"description": "function [X,rhs] = solveXtYforX(v,R,x)" 
},
"solveXtYforY": {
"prefix": "solveXtYforY",
"body": "${1:[Y, rhs] = }solveXtYforY(${2:v}, ${3:R}, ${4:x})$0",
"description": "function [Y, rhs] = solveXtYforY(v,R,x)" 
},
"solveYoXRforX": {
"prefix": "solveYoXRforX",
"body": "${1:[X, res] = }solveYoXRforX(${2:v}, ${3:R}, ${4:x})$0",
"description": "function [X, res]= solveYoXRforX(v,R,x)" 
},
"solveYoXRforY": {
"prefix": "solveYoXRforY",
"body": "${1:[Y, res] = }solveYoXRforY(${2:v}, ${3:R}, ${4:vobj})$0",
"description": "function [Y, res]= solveYoXRforY(v,R,vobj)" 
},
"solveYoXpZR": {
"prefix": "solveYoXpZR",
"body": "${1:[res, XorY] = }solveYoXpZR(${2:v}, ${3:R}, ${4:xory}, ${5:unknown})$0",
"description": "function [res, XorY] = solveYoXpZR(v,R,xory,unknown)" 
},
"solveYoXpZRforX": {
"prefix": "solveYoXpZRforX",
"body": "${1:[l2, r2] = }solveYoXpZRforX(${2:v}, ${3:R}, ${4:vobj})$0",
"description": "function [l2, r2] = solveYoXpZRforX(v,R,vobj)" 
},
"solveYoXpZRforY": {
"prefix": "solveYoXpZRforY",
"body": "${1:[l2, r2] = }solveYoXpZRforY(${2:v}, ${3:R}, ${4:vobj})$0",
"description": "function [l2, r2] = solveYoXpZRforY(v,R,vobj)" 
},
"solveeXforX": {
"prefix": "solveeXforX",
"body": "${1:[X, rhs] = }solveeXforX(${2:v}, ${3:R})$0",
"description": "function [X, rhs] = solveeXforX(v,R)" 
},
"solveeXfore": {
"prefix": "solveeXfore",
"body": "${1:[e, rhs] = }solveeXfore(${2:v}, ${3:R})$0",
"description": "function [e, rhs]  = solveeXfore(v,R)" 
},
"sym2strcellvar": {
"prefix": "sym2strcellvar",
"body": "${1:vstrcell = }sym2strcellvar(${2:vsym}, ${3:delim}, ${4:vname})$0",
"description": "function [ vstrcell] = sym2strcellvar(vsym,delim,vname)" 
},
"sym2streq": {
"prefix": "sym2streq",
"body": "${1:eqstr = }sym2streq(${2:eqsym}, ${3:eqname})$0",
"description": "function eqstr = sym2streq(eqsym,eqname)" 
},
"sym2strvar": {
"prefix": "sym2strvar",
"body": "${1:[vstr, vstrcell] = }sym2strvar(${2:vsym}, ${3:delim}, ${4:vname})$0",
"description": "function [vstr, vstrcell] = sym2strvar(vsym,delim,vname)" 
},
"sym2strvar_d": {
"prefix": "sym2strvar_d",
"body": "sym2strvar_d$0",
"description": "sym2strvar_d" 
},
"symcat": {
"prefix": "symcat",
"body": "${1:vstr = }symcat(${2:vset}, ${3:str0}, ${4:vsetnew})$0",
"description": "function vstr = symcat(vset, str0, vsetnew)" 
},
"addutils": {
"prefix": "addutils",
"body": "${1:utildirs = }addutils(${2:varargin})$0",
"description": "function utildirs = addutils(varargin);" 
},
"base64decode_V2": {
"prefix": "base64decode_V2",
"body": "${1:y = }base64decode(${2:x})$0",
"description": "function y = base64decode(x)" 
},
"base64encode": {
"prefix": "base64encode",
"body": "${1:y = }base64encode(${2:x}, ${3:eol})$0",
"description": "function y = base64encode(x, eol)" 
},
"byte2nybble": {
"prefix": "byte2nybble",
"body": "${1:y = }byte2nybble(${2:x})$0",
"description": "function y = byte2nybble(x)" 
},
"nybble2byte": {
"prefix": "nybble2byte",
"body": "${1:y = }nybble2byte(${2:x})$0",
"description": "function y = nybble2byte(x)" 
},
"bindiff": {
"prefix": "bindiff",
"body": "${1:patch_data = }bindiff(${2:file1}, ${3:file2})$0",
"description": "function patch_data = bindiff( file1, file2 )" 
},
"cdtomfile": {
"prefix": "cdtomfile",
"body": "${1:directory = }cdtomfile(${2:file})$0",
"description": "function directory = cdtomfile(file)" 
},
"epyt": {
"prefix": "epyt",
"body": "epyt(${2:file})$0",
"description": "function epyt(file)" 
},
"file2cell": {
"prefix": "file2cell",
"body": "${1:list = }file2cell(${2:file}, ${3:opt})$0",
"description": "function list = file2cell(file, opt)" 
},
"filecmp": {
"prefix": "filecmp",
"body": "${1:t = }filecmp(${2:file1}, ${3:file2})$0",
"description": "function t = filecmp(file1, file2)" 
},
"hexview": {
"prefix": "hexview",
"body": "hexview(${2:file})$0",
"description": "function hexview(file)" 
},
"isdirectory": {
"prefix": "isdirectory",
"body": "${1:[t, newdir] = }isdirectory(${2:dir})$0",
"description": "function [t, newdir] = isdirectory(dir)" 
},
"isinpath": {
"prefix": "isinpath",
"body": "${1:t = }isinpath(${2:varargin})$0",
"description": "function t = isinpath(varargin)" 
},
"locate": {
"prefix": "locate",
"body": "${1:locations = }locate(${2:varargin})$0",
"description": "function locations = locate(varargin)" 
},
"locateold": {
"prefix": "locateold",
"body": "${1:locations = }locateold(${2:varargin})$0",
"description": "function locations = locate(varargin)" 
},
"matfilever": {
"prefix": "matfilever",
"body": "${1:vernum = }matfilever(${2:file})$0",
"description": "function vernum = matfilever(file)" 
},
"path2cell": {
"prefix": "path2cell",
"body": "${1:pathlist = }path2cell(${2:pathstr})$0",
"description": "function pathlist = path2cell(pathstr)" 
},
"path2file": {
"prefix": "path2file",
"body": "path2file(${2:file}, ${3:pathstr})$0",
"description": "function path2file(file, pathstr)" 
},
"pfilever": {
"prefix": "pfilever",
"body": "${1:vernum = }pfilever(${2:file})$0",
"description": "function vernum = pfilever(file)" 
},
"randline": {
"prefix": "randline",
"body": "${1:[line, linenum] = }randline(${2:file})$0",
"description": "function [line, linenum] = randline(file)" 
},
"randlines": {
"prefix": "randlines",
"body": "${1:[lines, linenums] = }randlines(${2:file}, ${3:n})$0",
"description": "function [lines, linenums] = randlines(file, n)" 
},
"splitfile": {
"prefix": "splitfile",
"body": "splitfile(${2:infile}, ${3:outfilebase}, ${4:chunksize}, ${5:opt})$0",
"description": "function splitfile(infile, outfilebase, chunksize, opt)" 
},
"trimpath": {
"prefix": "trimpath",
"body": "${1:outpathstr = }trimpath(${2:inpathstr})$0",
"description": "function outpathstr = trimpath(inpathstr)" 
},
"where": {
"prefix": "where",
"body": "${1:locations = }where(${2:varargin})$0",
"description": "function locations = where(varargin)" 
},
"cyclefigs": {
"prefix": "cyclefigs",
"body": "cyclefigs(${2:figs})$0",
"description": "function cyclefigs(figs)" 
},
"sortfigs": {
"prefix": "sortfigs",
"body": "sortfigs(${2:figs})$0",
"description": "function sortfigs(figs)" 
},
"tilefigs": {
"prefix": "tilefigs",
"body": "tilefigs(${2:figs})$0",
"description": "function tilefigs(figs)" 
},
"imcheck": {
"prefix": "imcheck",
"body": "${1:errmsg = }imcheck(${2:varargin})$0",
"description": "function errmsg = imcheck(varargin)" 
},
"imfliplr": {
"prefix": "imfliplr",
"body": "${1:varargout = }imfliplr(${2:varargin})$0",
"description": "function varargout = imfliplr(varargin)" 
},
"imflipud": {
"prefix": "imflipud",
"body": "${1:varargout = }imflipud(${2:varargin})$0",
"description": "function varargout = imflipud(varargin)" 
},
"imrot90": {
"prefix": "imrot90",
"body": "${1:varargout = }imrot90(${2:varargin})$0",
"description": "function varargout = imrot90(varargin)" 
},
"imtype": {
"prefix": "imtype",
"body": "${1:type = }imtype(${2:varargin})$0",
"description": "function type = imtype(varargin)" 
},
"imview": {
"prefix": "imview",
"body": "${1:varargout = }imview(${2:command}, ${3:varargin})$0",
"description": "function varargout = imview(command, varargin)" 
},
"acosdeg": {
"prefix": "acosdeg",
"body": "${1:y = }acosdeg(${2:x})$0",
"description": "function y = acosdeg(x)" 
},
"acosgrad": {
"prefix": "acosgrad",
"body": "${1:y = }acosgrad(${2:x})$0",
"description": "function y = acosgrad(x)" 
},
"asindeg": {
"prefix": "asindeg",
"body": "${1:y = }asindeg(${2:x})$0",
"description": "function y = asindeg(x)" 
},
"asingrad": {
"prefix": "asingrad",
"body": "${1:y = }asingrad(${2:x})$0",
"description": "function y = asingrad(x)" 
},
"atan2deg": {
"prefix": "atan2deg",
"body": "${1:y = }atan2deg(${2:y}, ${3:x})$0",
"description": "function y = atan2deg(y, x)" 
},
"atan2grad": {
"prefix": "atan2grad",
"body": "${1:y = }atan2grad(${2:y}, ${3:x})$0",
"description": "function y = atan2grad(y, x)" 
},
"atandeg": {
"prefix": "atandeg",
"body": "${1:y = }atandeg(${2:x})$0",
"description": "function y = atandeg(x)" 
},
"atangrad": {
"prefix": "atangrad",
"body": "${1:y = }atangrad(${2:x})$0",
"description": "function y = atangrad(x)" 
},
"binomcoef": {
"prefix": "binomcoef",
"body": "${1:c = }binomcoef(${2:n}, ${3:k})$0",
"description": "function c = binomcoef(n, k)" 
},
"cosdeg": {
"prefix": "cosdeg",
"body": "${1:y = }cosdeg(${2:x})$0",
"description": "function y = cosdeg(x)" 
},
"cosgrad": {
"prefix": "cosgrad",
"body": "${1:y = }cosgrad(${2:x})$0",
"description": "function y = cosgrad(x)" 
},
"cuberoot": {
"prefix": "cuberoot",
"body": "${1:y = }cuberoot(${2:x})$0",
"description": "function y = cuberoot(x)" 
},
"dawson": {
"prefix": "dawson",
"body": "${1:z = }dawson(${2:x})$0",
"description": "function z = dawson(x)" 
},
"expminus1": {
"prefix": "expminus1",
"body": "${1:y = }expminus1(${2:x})$0",
"description": "function y = expminus1(x)" 
},
"factorial2": {
"prefix": "factorial2",
"body": "${1:p = }factorial2(${2:n})$0",
"description": "function p = factorial(n)" 
},
"fibonacci": {
"prefix": "fibonacci",
"body": "${1:y = }fibonacci(${2:n})$0",
"description": "function y = fibonacci(n)" 
},
"gcd2": {
"prefix": "gcd2",
"body": "${1:g = }gcd2(${2:x})$0",
"description": "function g = gcd2(x)" 
},
"isprime2": {
"prefix": "isprime2",
"body": "${1:isp = }isprime2(${2:X})$0",
"description": "function isp = isprime2(X)" 
},
"lcm2": {
"prefix": "lcm2",
"body": "${1:c = }lcm2(${2:x})$0",
"description": "function c = lcmall(x)" 
},
"log1pxx": {
"prefix": "log1pxx",
"body": "${1:y = }log1pxx(${2:x})$0",
"description": "function y = log1p(x)" 
},
"logbase": {
"prefix": "logbase",
"body": "${1:y = }logbase(${2:x}, ${3:base})$0",
"description": "function y = logbase(x, base)" 
},
"logbase10": {
"prefix": "logbase10",
"body": "${1:y = }logbase10(${2:x})$0",
"description": "function y = logbase10(x)" 
},
"logspace10": {
"prefix": "logspace10",
"body": "${1:y = }logspace10(${2:d1}, ${3:d2}, ${4:n})$0",
"description": "function y = logspace10(d1, d2, n)" 
},
"logspace2": {
"prefix": "logspace2",
"body": "${1:y = }logspace2(${2:d1}, ${3:d2}, ${4:n})$0",
"description": "function y = logspace2(d1, d2, n)" 
},
"nchoose2": {
"prefix": "nchoose2",
"body": "${1:c = }nchoose2(${2:v}, ${3:bool})$0",
"description": "function c = nchoose2(v, bool)" 
},
"ndmtimes": {
"prefix": "ndmtimes",
"body": "${1:z = }ndmtimes(${2:x}, ${3:y})$0",
"description": "function z = ndmtimes(x, y)" 
},
"ndmtimes_loop_naive": {
"prefix": "ndmtimes_loop_naive",
"body": "${1:z = }ndmtimes_loop_naive(${2:x}, ${3:y})$0",
"description": "function z = ndmtimes_loop_naive(x, y)" 
},
"ndmtimes_loop_optim": {
"prefix": "ndmtimes_loop_optim",
"body": "${1:z = }ndmtimes_loop_optim(${2:x}, ${3:y})$0",
"description": "function z = ndmtimes_loop_optim(x, y)" 
},
"nthroot": {
"prefix": "nthroot",
"body": "${1:y = }nthroot(${2:x}, ${3:n})$0",
"description": "function y = nthroot(x, n)" 
},
"prcdiff": {
"prefix": "prcdiff",
"body": "${1:prc = }prcdiff(${2:a}, ${3:b})$0",
"description": "function prc = prcdiff(a, b)" 
},
"prcoftot": {
"prefix": "prcoftot",
"body": "${1:prc = }prcoftot(${2:a}, ${3:b})$0",
"description": "function prc = prcoftot(a, b)" 
},
"sindeg": {
"prefix": "sindeg",
"body": "${1:y = }sindeg(${2:x})$0",
"description": "function y = sindeg(x)" 
},
"singrad": {
"prefix": "singrad",
"body": "${1:y = }singrad(${2:x})$0",
"description": "function y = singrad(x)" 
},
"tandeg": {
"prefix": "tandeg",
"body": "${1:y = }tandeg(${2:x})$0",
"description": "function y = tandeg(x)" 
},
"tangrad": {
"prefix": "tangrad",
"body": "${1:y = }tangrad(${2:x})$0",
"description": "function y = tangrad(x)" 
},
"unwrapdeg": {
"prefix": "unwrapdeg",
"body": "${1:q = }unwrapdeg(${2:varargin})$0",
"description": "function q = unwrapdeg(varargin)" 
},
"unwrapgrad": {
"prefix": "unwrapgrad",
"body": "${1:q = }unwrapgrad(${2:varargin})$0",
"description": "function q = unwrapgrad(varargin)" 
},
"wrapdeg": {
"prefix": "wrapdeg",
"body": "${1:b = }wrapdeg(${2:a})$0",
"description": "function b = wrapdeg(a)" 
},
"wrapgrad": {
"prefix": "wrapgrad",
"body": "${1:b = }wrapgrad(${2:a})$0",
"description": "function b = wrapgrad(a)" 
},
"acoshplus1": {
"prefix": "acoshplus1",
"body": "${1:y = }acoshplus1(${2:x})$0",
"description": "function y = acoshplus1(x)" 
},
"acosplus1": {
"prefix": "acosplus1",
"body": "${1:y = }acosplus1(${2:x})$0",
"description": "function y = acosplus1(x)" 
},
"ascol": {
"prefix": "ascol",
"body": "${1:y = }ascol(${2:x}, ${3:varargin})$0",
"description": "function y = ascol(x, varargin)" 
},
"asrow": {
"prefix": "asrow",
"body": "${1:y = }asrow(${2:x}, ${3:varargin})$0",
"description": "function y = asrow(x, varargin)" 
},
"asvec": {
"prefix": "asvec",
"body": "${1:y = }asvec(${2:x}, ${3:dim}, ${4:order})$0",
"description": "function y = asvec(x, dim, order)" 
},
"atanminuspihalf": {
"prefix": "atanminuspihalf",
"body": "${1:y = }atanminuspihalf(${2:x})$0",
"description": "function y = atanminuspihalf(x)" 
},
"blockdiag_V2": {
"prefix": "blockdiag_V2",
"body": "${1:d = }blockdiag(${2:varargin})$0",
"description": "function d = blockdiag(varargin)" 
},
"blockflipdim": {
"prefix": "blockflipdim",
"body": "${1:y = }blockflipdim(${2:x}, ${3:dim}, ${4:k})$0",
"description": "function y = blockflipdim(x, dim, k)" 
},
"blockfliplr": {
"prefix": "blockfliplr",
"body": "${1:y = }blockfliplr(${2:x}, ${3:k})$0",
"description": "function y = blockfliplr(x, k)" 
},
"blockflipud": {
"prefix": "blockflipud",
"body": "${1:y = }blockflipud(${2:x}, ${3:k})$0",
"description": "function y = blockflipud(x, k)" 
},
"blockrot90": {
"prefix": "blockrot90",
"body": "${1:B = }blockrot90(${2:A}, ${3:p}, ${4:q}, ${5:k})$0",
"description": "function B = blockrot90(A, p, q, k)" 
},
"bounds2ind": {
"prefix": "bounds2ind",
"body": "${1:idx = }bounds2ind(${2:lo}, ${3:hi})$0",
"description": "function idx = bounds2ind(lo, hi)" 
},
"coshminus1": {
"prefix": "coshminus1",
"body": "${1:y = }coshminus1(${2:x})$0",
"description": "function y = coshminus1(x)" 
},
"cosminus1": {
"prefix": "cosminus1",
"body": "${1:y = }cosminus1(${2:x})$0",
"description": "function y = cosminus1(x)" 
},
"cropbyval": {
"prefix": "cropbyval",
"body": "${1:y = }cropbyval(${2:x}, ${3:val})$0",
"description": "function y = cropbyval(x, val)" 
},
"cummax_backup": {
"prefix": "cummax_backup",
"body": "${1:y = }cummax_backup(${2:x}, ${3:dim})$0",
"description": "function y = cummax(x, dim)" 
},
"cummaxlrw": {
"prefix": "cummaxlrw",
"body": "${1:y = }cummaxlrw(${2:x}, ${3:dim})$0",
"description": "function y = cummax(x, dim)" 
},
"distmat": {
"prefix": "distmat",
"body": "${1:d = }distmat(${2:x}, ${3:y})$0",
"description": "function d = distmat(x, y)" 
},
"distmat0": {
"prefix": "distmat0",
"body": "${1:d = }distmat0(${2:x}, ${3:y})$0",
"description": "function d = distmat0(x, y)" 
},
"distmat1": {
"prefix": "distmat1",
"body": "${1:d = }distmat1(${2:x}, ${3:y})$0",
"description": "function d = distmat1(x, y)" 
},
"distmat2": {
"prefix": "distmat2",
"body": "${1:d = }distmat2(${2:x}, ${3:y})$0",
"description": "function d = distmat2( x, y )" 
},
"distmat3": {
"prefix": "distmat3",
"body": "${1:d = }distmat3(${2:x}, ${3:y})$0",
"description": "function d = distmat3(x, y)" 
},
"findcols": {
"prefix": "findcols",
"body": "${1:k = }findcols(${2:A}, ${3:b})$0",
"description": "function k = findcols(A, b)" 
},
"findrows": {
"prefix": "findrows",
"body": "${1:k = }findrows(${2:A}, ${3:b})$0",
"description": "function k = findrows(A, b)" 
},
"flipalldims": {
"prefix": "flipalldims",
"body": "${1:y = }flipalldims(${2:x})$0",
"description": "function y = flipalldims(x)" 
},
"fmap": {
"prefix": "fmap",
"body": "${1:array = }fmap(${2:fun}, ${3:array}, ${4:varargin})$0",
"description": "function array = fmap(fun, array, varargin)" 
},
"fnsdim": {
"prefix": "fnsdim",
"body": "${1:dim = }fnsdim(${2:x})$0",
"description": "function dim = fnsdim(x)" 
},
"gsexpand": {
"prefix": "gsexpand",
"body": "${1:varargout = }gsexpand(${2:varargin})$0",
"description": "function varargout = gsexpand(varargin)" 
},
"isalnum": {
"prefix": "isalnum",
"body": "${1:t = }isalnum(${2:c})$0",
"description": "function t = isalnum(c)" 
},
"isalpha": {
"prefix": "isalpha",
"body": "${1:t = }isalpha(${2:c})$0",
"description": "function t = isalpha(c)" 
},
"isascii": {
"prefix": "isascii",
"body": "${1:t = }isascii(${2:c})$0",
"description": "function t = isascii(c)" 
},
"iscolvector": {
"prefix": "iscolvector",
"body": "${1:t = }iscolvector(${2:x})$0",
"description": "function t = iscolvector(x)" 
},
"isdigit": {
"prefix": "isdigit",
"body": "${1:t = }isdigit(${2:c})$0",
"description": "function t = isdigit(c)" 
},
"iseven_V2": {
"prefix": "iseven_V2",
"body": "${1:b = }iseven(${2:x})$0",
"description": "function b = iseven(x)" 
},
"isint_V3": {
"prefix": "isint_V3",
"body": "${1:b = }isint(${2:x})$0",
"description": "function b = isint(x)" 
},
"islower": {
"prefix": "islower",
"body": "${1:t = }islower(${2:c})$0",
"description": "function t = islower(c)" 
},
"ismatrixxx": {
"prefix": "ismatrixxx",
"body": "${1:t = }ismatrixxx(${2:x})$0",
"description": "function t = ismatrix(x)" 
},
"isodd_V2": {
"prefix": "isodd_V2",
"body": "${1:b = }isodd(${2:x})$0",
"description": "function b = isodd(x)" 
},
"isposint": {
"prefix": "isposint",
"body": "${1:b = }isposint(${2:x})$0",
"description": "function b = isposint(x)" 
},
"isprtchr": {
"prefix": "isprtchr",
"body": "${1:t = }isprtchr(${2:c})$0",
"description": "function t = isprtchr(c)" 
},
"isrowvector": {
"prefix": "isrowvector",
"body": "${1:t = }isrowvector(${2:x})$0",
"description": "function t = isrowvector(x)" 
},
"isscalarxxx": {
"prefix": "isscalarxxx",
"body": "${1:t = }isscalarxxx(${2:x})$0",
"description": "function t = isscalar(x)" 
},
"issymmetricBACK": {
"prefix": "issymmetricBACK",
"body": "${1:t = }issymmetricBACK(${2:x})$0",
"description": "function t = issymmetric(x)" 
},
"issymmetriclrw": {
"prefix": "issymmetriclrw",
"body": "${1:t = }issymmetriclrw(${2:x})$0",
"description": "function t = issymmetric(x)" 
},
"isupper": {
"prefix": "isupper",
"body": "${1:t = }isupper(${2:c})$0",
"description": "function t = isupper(c)" 
},
"isvectorxxx": {
"prefix": "isvectorxxx",
"body": "${1:t = }isvectorxxx(${2:x})$0",
"description": "function t = isvector(x)" 
},
"isxdigit": {
"prefix": "isxdigit",
"body": "${1:t = }isxdigit(${2:c})$0",
"description": "function t = isxdigit(c)" 
},
"latexmat": {
"prefix": "latexmat",
"body": "${1:str = }latexmat(${2:mat}, ${3:format})$0",
"description": "function str = latexmat(mat, format)" 
},
"mahaldist": {
"prefix": "mahaldist",
"body": "${1:D = }mahaldist(${2:X}, ${3:Y}, ${4:W})$0",
"description": "function D = mahaldist(X, Y, W)" 
},
"maskrepelem": {
"prefix": "maskrepelem",
"body": "${1:y = }maskrepelem(${2:x}, ${3:mask})$0",
"description": "function y = maskrepelem(x, mask)" 
},
"mergearray": {
"prefix": "mergearray",
"body": "${1:B = }mergearray(${2:A})$0",
"description": "function B = mergearray(A)" 
},
"movsumBACK": {
"prefix": "movsumBACK",
"body": "${1:y = }movsumBACK(${2:x}, ${3:m})$0",
"description": "function y = movsum(x, m)" 
},
"movsum_backup": {
"prefix": "movsum_backup",
"body": "${1:y = }movsum_backup(${2:x}, ${3:m})$0",
"description": "function y = movsum(x, m)" 
},
"ndimgrid": {
"prefix": "ndimgrid",
"body": "${1:varargout = }ndimgrid(${2:varargin})$0",
"description": "function varargout = ndimgrid(varargin)" 
},
"powerset": {
"prefix": "powerset",
"body": "${1:X = }powerset(${2:varargin})$0",
"description": "function X = powerset(varargin)" 
},
"reparray": {
"prefix": "reparray",
"body": "${1:B = }reparray(${2:A}, ${3:rep}, ${4:siz})$0",
"description": "function B = reparray(A, rep, siz)" 
},
"repelm": {
"prefix": "repelm",
"body": "${1:B = }repelm(${2:A}, ${3:varargin})$0",
"description": "function B = repelm(A,varargin)" 
},
"resize_V2": {
"prefix": "resize_V2",
"body": "${1:varargout = }resize(${2:csize}, ${3:varargin})$0",
"description": "function varargout = resize(csize, varargin)" 
},
"rotarray": {
"prefix": "rotarray",
"body": "${1:B = }rotarray(${2:A}, ${3:n}, ${4:dim})$0",
"description": "function B = rotarray(A, n, dim)" 
},
"sexpand": {
"prefix": "sexpand",
"body": "${1:varargout = }sexpand(${2:varargin})$0",
"description": "function varargout = sexpand(varargin)" 
},
"sinc": {
"prefix": "sinc",
"body": "${1:y = }sinc(${2:x}, ${3:c})$0",
"description": "function y = sinc(x, c)" 
},
"splitarray": {
"prefix": "splitarray",
"body": "${1:B = }splitarray(${2:A}, ${3:siz})$0",
"description": "function B = splitarray(A, siz)" 
},
"subdivide": {
"prefix": "subdivide",
"body": "${1:y = }subdivide(${2:x}, ${3:p}, ${4:q})$0",
"description": "function y = subdivide(x, p, q)" 
},
"swapdims": {
"prefix": "swapdims",
"body": "${1:y = }swapdims(${2:x}, ${3:dim})$0",
"description": "function y = swapdims(x, dim)" 
},
"tanhminus1": {
"prefix": "tanhminus1",
"body": "${1:y = }tanhminus1(${2:x})$0",
"description": "function y = tanhminus1(x)" 
},
"tanpluspihalf": {
"prefix": "tanpluspihalf",
"body": "${1:y = }tanpluspihalf(${2:x})$0",
"description": "function y = tanpluspihalf(x)" 
},
"vecfill": {
"prefix": "vecfill",
"body": "${1:y = }vecfill(${2:x}, ${3:val})$0",
"description": "function y = vecfill(x, val)" 
},
"wraprad": {
"prefix": "wraprad",
"body": "${1:b = }wraprad(${2:a})$0",
"description": "function b = wraprad(a)" 
},
"xkron": {
"prefix": "xkron",
"body": "${1:Z = }xkron(${2:X}, ${3:Y})$0",
"description": "function Z = xkron(X,Y)" 
},
"xrepmat": {
"prefix": "xrepmat",
"body": "${1:B = }xrepmat(${2:A}, ${3:varargin})$0",
"description": "function B = xrepmat(A,varargin)" 
},
"zeroscls": {
"prefix": "zeroscls",
"body": "${1:x = }zeroscls(${2:varargin})$0",
"description": "function x = zeroscls( varargin )" 
},
"commaint": {
"prefix": "commaint",
"body": "${1:s = }commaint(${2:x}, ${3:sep})$0",
"description": "function s = commaint(x, sep)" 
},
"divisors": {
"prefix": "divisors",
"body": "${1:d = }divisors(${2:n})$0",
"description": "function d = divisors(n)" 
},
"fixdec": {
"prefix": "fixdec",
"body": "${1:y = }fixdec(${2:x}, ${3:n})$0",
"description": "function y = fixdec(x, n)" 
},
"fixdig": {
"prefix": "fixdig",
"body": "${1:y = }fixdig(${2:x}, ${3:n})$0",
"description": "function y = fixdig(x, n)" 
},
"hex_to_int16": {
"prefix": "hex_to_int16",
"body": "${1:p = }hex_to_int16(${2:h})$0",
"description": "function p = hex_to_int16(h)" 
},
"hex_to_int32": {
"prefix": "hex_to_int32",
"body": "${1:p = }hex_to_int32(${2:h})$0",
"description": "function p = hex_to_int32(h)" 
},
"hex_to_int8": {
"prefix": "hex_to_int8",
"body": "${1:p = }hex_to_int8(${2:h})$0",
"description": "function p = hex_to_int8(h)" 
},
"hex_to_uint16": {
"prefix": "hex_to_uint16",
"body": "${1:m = }hex_to_uint16(${2:h})$0",
"description": "function m = hex_to_uint16(h)" 
},
"hex_to_uint32": {
"prefix": "hex_to_uint32",
"body": "${1:m = }hex_to_uint32(${2:h})$0",
"description": "function m = hex_to_uint32(h)" 
},
"hex_to_uint64": {
"prefix": "hex_to_uint64",
"body": "${1:m = }hex_to_uint64(${2:h})$0",
"description": "function m = hex_to_uint64(h)" 
},
"hex_to_uint8": {
"prefix": "hex_to_uint8",
"body": "${1:m = }hex_to_uint8(${2:h})$0",
"description": "function m = hex_to_uint8(h)" 
},
"int16_to_hex": {
"prefix": "int16_to_hex",
"body": "${1:s = }int16_to_hex(${2:x})$0",
"description": "function s = int16_to_hex(x)" 
},
"int2digits": {
"prefix": "int2digits",
"body": "${1:d = }int2digits(${2:i})$0",
"description": "function d = int2digits(i)" 
},
"int32_to_hex": {
"prefix": "int32_to_hex",
"body": "${1:s = }int32_to_hex(${2:x})$0",
"description": "function s = int32_to_hex(x)" 
},
"int8_to_hex": {
"prefix": "int8_to_hex",
"body": "${1:s = }int8_to_hex(${2:x})$0",
"description": "function s = int8_to_hex(x)" 
},
"nextpow": {
"prefix": "nextpow",
"body": "${1:p = }nextpow(${2:x}, ${3:n})$0",
"description": "function p = nextpow(x, n)" 
},
"nextpowof10": {
"prefix": "nextpowof10",
"body": "${1:p = }nextpowof10(${2:x})$0",
"description": "function p = nextpowof10(x)" 
},
"nextpowof2": {
"prefix": "nextpowof2",
"body": "${1:p = }nextpowof2(${2:x})$0",
"description": "function p = nextpowof2(x)" 
},
"numlexcmp": {
"prefix": "numlexcmp",
"body": "${1:tf = }numlexcmp(${2:a}, ${3:b})$0",
"description": "function tf = numlexcmp(a, b)" 
},
"numlexeq": {
"prefix": "numlexeq",
"body": "${1:tf = }numlexeq(${2:a}, ${3:b})$0",
"description": "function tf = numlexeq(a, b)" 
},
"numlexge": {
"prefix": "numlexge",
"body": "${1:tf = }numlexge(${2:a}, ${3:b})$0",
"description": "function tf = numlexge(a, b)" 
},
"numlexgt": {
"prefix": "numlexgt",
"body": "${1:tf = }numlexgt(${2:a}, ${3:b})$0",
"description": "function tf = numlexgt(a, b)" 
},
"numlexle": {
"prefix": "numlexle",
"body": "${1:tf = }numlexle(${2:a}, ${3:b})$0",
"description": "function tf = numlexle(a, b)" 
},
"numlexlt": {
"prefix": "numlexlt",
"body": "${1:tf = }numlexlt(${2:a}, ${3:b})$0",
"description": "function tf = numlexlt(a, b)" 
},
"numlexne": {
"prefix": "numlexne",
"body": "${1:tf = }numlexne(${2:a}, ${3:b})$0",
"description": "function tf = numlexne(a, b)" 
},
"prevpow": {
"prefix": "prevpow",
"body": "${1:p = }prevpow(${2:x}, ${3:n})$0",
"description": "function p = prevpow(x, n)" 
},
"prevpowof10": {
"prefix": "prevpowof10",
"body": "${1:p = }prevpowof10(${2:x})$0",
"description": "function p = prevpowof10(x)" 
},
"prevpowof2": {
"prefix": "prevpowof2",
"body": "${1:p = }prevpowof2(${2:x})$0",
"description": "function p = prevpowof2(x)" 
},
"qnan": {
"prefix": "qnan",
"body": "${1:x = }qnan$0",
"description": "function x = qnan" 
},
"real48_as_double_to_uint8": {
"prefix": "real48_as_double_to_uint8",
"body": "${1:[u8, ok] = }real48_as_double_to_uint8(${2:x})$0",
"description": "function [u8, ok] = real48_as_double_to_uint8(x)" 
},
"real48_as_uint8_to_double": {
"prefix": "real48_as_uint8_to_double",
"body": "${1:y = }real48_as_uint8_to_double(${2:x})$0",
"description": "function y = real48_as_uint8_to_double(x)" 
},
"rounddec": {
"prefix": "rounddec",
"body": "${1:y = }rounddec(${2:x}, ${3:n})$0",
"description": "function y = rounddec(x, n)" 
},
"rounddig": {
"prefix": "rounddig",
"body": "${1:y = }rounddig(${2:x}, ${3:n})$0",
"description": "function y = rounddig(x, n)" 
},
"roundeven": {
"prefix": "roundeven",
"body": "${1:y = }roundeven(${2:x})$0",
"description": "function y = roundeven(x)" 
},
"single_as_uint16_to_double": {
"prefix": "single_as_uint16_to_double",
"body": "${1:y = }single_as_uint16_to_double(${2:x})$0",
"description": "function y = single_as_uint16_to_double(x)" 
},
"single_as_uint32_to_double": {
"prefix": "single_as_uint32_to_double",
"body": "${1:y = }single_as_uint32_to_double(${2:x})$0",
"description": "function y = single_as_uint32_to_double(x)" 
},
"single_as_uint8_to_double": {
"prefix": "single_as_uint8_to_double",
"body": "${1:y = }single_as_uint8_to_double(${2:x})$0",
"description": "function y = single_as_uint8_to_double(x)" 
},
"truncdec": {
"prefix": "truncdec",
"body": "${1:y = }truncdec(${2:x}, ${3:n})$0",
"description": "function y = truncdec(x, n)" 
},
"truncdig": {
"prefix": "truncdig",
"body": "${1:y = }truncdig(${2:varargin})$0",
"description": "function y = truncdig(varargin)" 
},
"uint16_to_hex": {
"prefix": "uint16_to_hex",
"body": "${1:s = }uint16_to_hex(${2:x})$0",
"description": "function s = uint16_to_hex(x)" 
},
"uint32_to_hex": {
"prefix": "uint32_to_hex",
"body": "${1:s = }uint32_to_hex(${2:x})$0",
"description": "function s = uint32_to_hex(x)" 
},
"uint64_to_hex": {
"prefix": "uint64_to_hex",
"body": "${1:s = }uint64_to_hex(${2:x})$0",
"description": "function s = uint64_to_hex(x)" 
},
"uint8_to_hex": {
"prefix": "uint8_to_hex",
"body": "${1:s = }uint8_to_hex(${2:x})$0",
"description": "function s = uint8_to_hex(x)" 
},
"unpacknum": {
"prefix": "unpacknum",
"body": "${1:[fr, er, fi, ei] = }unpacknum(${2:x}, ${3:base}, ${4:n})$0",
"description": "function [fr, er, fi, ei] = unpacknum(x, base, n)" 
},
"cheb2poly": {
"prefix": "cheb2poly",
"body": "${1:c = }cheb2poly(${2:n}, ${3:x})$0",
"description": "function c = cheb2poly(n, x)" 
},
"chebextr": {
"prefix": "chebextr",
"body": "${1:x = }chebextr(${2:n})$0",
"description": "function x = chebextr(n)" 
},
"chebpoly": {
"prefix": "chebpoly",
"body": "${1:c = }chebpoly(${2:n}, ${3:x})$0",
"description": "function c = chebpoly(n, x)" 
},
"chebroot": {
"prefix": "chebroot",
"body": "${1:x = }chebroot(${2:n})$0",
"description": "function x = chebroot(n)" 
},
"gaussquad": {
"prefix": "gaussquad",
"body": "${1:[xx, ww] = }gaussquad(${2:n}, ${3:a}, ${4:b})$0",
"description": "function [xx, ww] = gaussquad(n, a, b)" 
},
"gaussquaddemo": {
"prefix": "gaussquaddemo",
"body": "gaussquaddemo$0",
"description": "gaussquaddemo" 
},
"poly2str": {
"prefix": "poly2str",
"body": "${1:s = }poly2str(${2:coefs}, ${3:var})$0",
"description": "function s = poly2str(coefs, var)" 
},
"polyadd": {
"prefix": "polyadd",
"body": "${1:r = }polyadd(${2:p}, ${3:q})$0",
"description": "function r = polyadd(p, q)" 
},
"polydiv": {
"prefix": "polydiv",
"body": "${1:[q, r] = }polydiv(${2:a}, ${3:b})$0",
"description": "function [q, r] = polydiv(a, b)" 
},
"polyint": {
"prefix": "polyint",
"body": "${1:r = }polyint(${2:p}, ${3:a}, ${4:b})$0",
"description": "function r = polyint(p, a, b)" 
},
"polymul": {
"prefix": "polymul",
"body": "${1:r = }polymul(${2:p}, ${3:q})$0",
"description": "function r = polymul(p, q)" 
},
"polynder": {
"prefix": "polynder",
"body": "${1:r = }polynder(${2:p}, ${3:n})$0",
"description": "function r = polynder(p, n)" 
},
"polynint": {
"prefix": "polynint",
"body": "${1:r = }polynint(${2:p}, ${3:n})$0",
"description": "function r = polynint(p, n)" 
},
"polypow": {
"prefix": "polypow",
"body": "${1:r = }polypow(${2:p}, ${3:n})$0",
"description": "function r = polypow(p, n)" 
},
"polyreloc": {
"prefix": "polyreloc",
"body": "${1:r = }polyreloc(${2:p}, ${3:x}, ${4:y})$0",
"description": "function r = polyreloc(p, x, y)" 
},
"polyrescl": {
"prefix": "polyrescl",
"body": "${1:q = }polyrescl(${2:p}, ${3:x}, ${4:y})$0",
"description": "function q = polyrescl(p, x, y)" 
},
"polysub": {
"prefix": "polysub",
"body": "${1:r = }polysub(${2:p}, ${3:q})$0",
"description": "function r = polysub(p, q)" 
},
"polytrim": {
"prefix": "polytrim",
"body": "${1:r = }polytrim(${2:p})$0",
"description": "function r = polytrim(p)" 
},
"quadroot": {
"prefix": "quadroot",
"body": "${1:r = }quadroot(${2:p})$0",
"description": "function r = quadroot(p)" 
},
"cloglog": {
"prefix": "cloglog",
"body": "${1:y = }cloglog(${2:x})$0",
"description": "function y = cloglog( x )" 
},
"corrmat": {
"prefix": "corrmat",
"body": "${1:R = }corrmat(${2:X})$0",
"description": "function R = corrmat(X)" 
},
"corrsort": {
"prefix": "corrsort",
"body": "${1:out = }corrsort(${2:s}, ${3:f})$0",
"description": "function out = corrsort(s,f)" 
},
"covmat_V2": {
"prefix": "covmat_V2",
"body": "${1:S = }covmat(${2:X}, ${3:Y})$0",
"description": "function S = covmat(X, Y)" 
},
"empcdf": {
"prefix": "empcdf",
"body": "${1:[x, p] = }empcdf(${2:x})$0",
"description": "function [x, p] = empcdf(x)" 
},
"icloglog": {
"prefix": "icloglog",
"body": "${1:x = }icloglog(${2:y})$0",
"description": "function x = icloglog(y)" 
},
"ilogit": {
"prefix": "ilogit",
"body": "${1:x = }ilogit(${2:y})$0",
"description": "function x = ilogit(y)" 
},
"iqrange": {
"prefix": "iqrange",
"body": "${1:y = }iqrange(${2:x}, ${3:varargin})$0",
"description": "function y = iqrange(x, varargin)" 
},
"isvarmat": {
"prefix": "isvarmat",
"body": "${1:t = }isvarmat(${2:S})$0",
"description": "function t = isvarmat(S)" 
},
"logit_V2": {
"prefix": "logit_V2",
"body": "${1:y = }logit(${2:x})$0",
"description": "function y = logit(x)" 
},
"mad": {
"prefix": "mad",
"body": "${1:y = }mad(${2:x}, ${3:dim})$0",
"description": "function y = mad(x, dim)" 
},
"meanvar": {
"prefix": "meanvar",
"body": "${1:[M, S, Xc] = }meanvar(${2:X})$0",
"description": "function [M, S, Xc] = meanvar(X)" 
},
"medmad": {
"prefix": "medmad",
"body": "${1:y = }medmad(${2:x}, ${3:dim})$0",
"description": "function y = medmad(x, dim)" 
},
"nanmean": {
"prefix": "nanmean",
"body": "${1:y = }nanmean(${2:x}, ${3:dim})$0",
"description": "function y = nanmean(x, dim)" 
},
"nansum": {
"prefix": "nansum",
"body": "${1:y = }nansum(${2:x}, ${3:dim})$0",
"description": "function y = nansum(x, dim)" 
},
"order": {
"prefix": "order",
"body": "${1:[i, y] = }order(${2:x}, ${3:dim})$0",
"description": "function [i, y] = order(x, dim)" 
},
"quantile_V3": {
"prefix": "quantile_V3",
"body": "${1:y = }quantile(${2:x}, ${3:p}, ${4:dim})$0",
"description": "function y = quantile(x, p, dim)" 
},
"randw": {
"prefix": "randw",
"body": "${1:x = }randw(${2:w}, ${3:s})$0",
"description": "function x = randw(w, s)" 
},
"range_V2": {
"prefix": "range_V2",
"body": "${1:y = }range(${2:x}, ${3:dim})$0",
"description": "function y = range(x, dim)" 
},
"ranks": {
"prefix": "ranks",
"body": "${1:r = }ranks(${2:x})$0",
"description": "function r = ranks(x)" 
},
"scalevar": {
"prefix": "scalevar",
"body": "${1:R = }scalevar(${2:S})$0",
"description": "function R = scalevar(S)" 
},
"spherernd": {
"prefix": "spherernd",
"body": "${1:x = }spherernd(${2:n}, ${3:p})$0",
"description": "function x = spherernd(n, p)" 
},
"var2corr": {
"prefix": "var2corr",
"body": "${1:R = }var2corr(${2:S})$0",
"description": "function R = var2corr(S)" 
},
"varchk": {
"prefix": "varchk",
"body": "${1:msg = }varchk(${2:S})$0",
"description": "function msg = varchk(S)" 
},
"varfact": {
"prefix": "varfact",
"body": "${1:c = }varfact(${2:s})$0",
"description": "function c = varfact(s)" 
},
"varmat": {
"prefix": "varmat",
"body": "${1:S = }varmat(${2:X})$0",
"description": "function S = varmat(X)" 
},
"ddeblank": {
"prefix": "ddeblank",
"body": "${1:sout = }ddeblank(${2:s})$0",
"description": "function sout = ddeblank(s)" 
},
"ddewhite": {
"prefix": "ddewhite",
"body": "${1:sout = }ddewhite(${2:s})$0",
"description": "function sout = ddewhite(s)" 
},
"dewhite": {
"prefix": "dewhite",
"body": "${1:sout = }dewhite(${2:s})$0",
"description": "function sout = dewhite(s)" 
},
"rot13": {
"prefix": "rot13",
"body": "${1:varargout = }rot13(${2:varargin})$0",
"description": "function varargout = rot13(varargin)" 
},
"rstrrep": {
"prefix": "rstrrep",
"body": "${1:s = }rstrrep(${2:s1}, ${3:s2}, ${4:s3})$0",
"description": "function s = rstrrep(s1, s2, s3)" 
},
"sizestr": {
"prefix": "sizestr",
"body": "${1:str = }sizestr(${2:array}, ${3:before}, ${4:between}, ${5:after})$0",
"description": "function str = sizestr(array, before, between, after)" 
},
"strcenter": {
"prefix": "strcenter",
"body": "strcenter(${2:lines}, ${3:offset})$0",
"description": "function strcenter(lines, offset)" 
},
"strflushleft": {
"prefix": "strflushleft",
"body": "${1:lines = }strflushleft(${2:lines}, ${3:offset})$0",
"description": "function lines = strflushleft(lines, offset)" 
},
"strflushright": {
"prefix": "strflushright",
"body": "${1:lines = }strflushright(${2:lines}, ${3:offset})$0",
"description": "function lines = strflushright(lines, offset)" 
},
"strjoinLRW": {
"prefix": "strjoinLRW",
"body": "${1:str = }strjoinLRW(${2:sep}, ${3:varargin})$0",
"description": "function str = strjoin(sep, varargin)" 
},
"strlexcmp": {
"prefix": "strlexcmp",
"body": "${1:tf = }strlexcmp(${2:a}, ${3:b})$0",
"description": "function tf = strlexcmp(a, b)" 
},
"strlexeq": {
"prefix": "strlexeq",
"body": "${1:tf = }strlexeq(${2:a}, ${3:b})$0",
"description": "function tf = strlexeq(a, b)" 
},
"strlexge": {
"prefix": "strlexge",
"body": "${1:tf = }strlexge(${2:a}, ${3:b})$0",
"description": "function tf = strlexge(a, b)" 
},
"strlexgt": {
"prefix": "strlexgt",
"body": "${1:tf = }strlexgt(${2:a}, ${3:b})$0",
"description": "function tf = strlexgt(a, b)" 
},
"strlexle": {
"prefix": "strlexle",
"body": "${1:tf = }strlexle(${2:a}, ${3:b})$0",
"description": "function tf = strlexle(a, b)" 
},
"strlexlt": {
"prefix": "strlexlt",
"body": "${1:tf = }strlexlt(${2:a}, ${3:b})$0",
"description": "function tf = strlexlt(a, b)" 
},
"strlexne": {
"prefix": "strlexne",
"body": "${1:tf = }strlexne(${2:a}, ${3:b})$0",
"description": "function tf = strlexne(a, b)" 
},
"strsplit_V2": {
"prefix": "strsplit_V2",
"body": "${1:parts = }strsplit(${2:splitstr}, ${3:str}, ${4:option})$0",
"description": "function parts = strsplit(splitstr, str, option)" 
},
"substr": {
"prefix": "substr",
"body": "${1:outstr = }substr(${2:str}, ${3:offset}, ${4:len}, ${5:repl})$0",
"description": "function outstr = substr(str, offset, len, repl)" 
},
"unrot13": {
"prefix": "unrot13",
"body": "${1:varargout = }unrot13(${2:varargin})$0",
"description": "function varargout = unrot13(varargin)" 
},
"untabify": {
"prefix": "untabify",
"body": "${1:newstr = }untabify(${2:str}, ${3:n})$0",
"description": "function newstr = untabify(str, n)" 
},
"bathyscape": {
"prefix": "bathyscape",
"body": "bathyscape(${2:depth}, ${3:limit})$0",
"description": "function bathyscape(depth, limit)" 
},
"release": {
"prefix": "release",
"body": "${1:rel = }release$0",
"description": "function rel = release" 
},
"date2jd": {
"prefix": "date2jd",
"body": "${1:jd = }date2jd(${2:varargin})$0",
"description": "function jd = date2jd(varargin)" 
},
"date2mjd": {
"prefix": "date2mjd",
"body": "${1:mjd = }date2mjd(${2:varargin})$0",
"description": "function mjd = date2mjd(varargin)" 
},
"date2unixsecs": {
"prefix": "date2unixsecs",
"body": "${1:secs = }date2unixsecs(${2:varargin})$0",
"description": "function secs = date2unixsecs(varargin)" 
},
"dayofmonth": {
"prefix": "dayofmonth",
"body": "${1:md = }dayofmonth(${2:varargin})$0",
"description": "function md = dayofmonth(varargin)" 
},
"dayofweek": {
"prefix": "dayofweek",
"body": "${1:dow = }dayofweek(${2:varargin})$0",
"description": "function dow = dayofweek(varargin)" 
},
"dayofyear": {
"prefix": "dayofyear",
"body": "${1:yd = }dayofyear(${2:varargin})$0",
"description": "function yd = dayofyear(varargin)" 
},
"days2hms": {
"prefix": "days2hms",
"body": "${1:[hour, minute, second] = }days2hms(${2:days})$0",
"description": "function [hour, minute, second] = days2hms(days)" 
},
"daysinmonth": {
"prefix": "daysinmonth",
"body": "${1:dim = }daysinmonth(${2:varargin})$0",
"description": "function dim = daysinmonth(varargin)" 
},
"daysinyear": {
"prefix": "daysinyear",
"body": "${1:diy = }daysinyear(${2:year})$0",
"description": "function diy = daysinyear(year)" 
},
"easterday": {
"prefix": "easterday",
"body": "${1:[month, day] = }easterday(${2:year})$0",
"description": "function [month, day] = easterday(year)" 
},
"hms2days": {
"prefix": "hms2days",
"body": "${1:days = }hms2days(${2:HOUR}, ${3:MINUTE}, ${4:SECOND})$0",
"description": "function days = hms2days(HOUR, MINUTE, SECOND)" 
},
"hms2sec": {
"prefix": "hms2sec",
"body": "${1:sec = }hms2sec(${2:hour}, ${3:minute}, ${4:second})$0",
"description": "function sec = hms2sec(hour, minute, second)" 
},
"isdate": {
"prefix": "isdate",
"body": "${1:t = }isdate(${2:varargin})$0",
"description": "function t = isdate(varargin)" 
},
"isjdate": {
"prefix": "isjdate",
"body": "${1:t = }isjdate(${2:varargin})$0",
"description": "function t = isjdate(varargin)" 
},
"isleapyear": {
"prefix": "isleapyear",
"body": "${1:t = }isleapyear(${2:year})$0",
"description": "function t = isleapyear(year)" 
},
"istime": {
"prefix": "istime",
"body": "${1:t = }istime(${2:varargin})$0",
"description": "function t = istime(varargin)" 
},
"jd2date": {
"prefix": "jd2date",
"body": "${1:[year, month, day, hour, minute, second] = }jd2date(${2:jd})$0",
"description": "function [year, month, day, hour, minute, second] = jd2date(jd)" 
},
"jd2jdate": {
"prefix": "jd2jdate",
"body": "${1:[year, month, day, hour, minute, second] = }jd2jdate(${2:jday})$0",
"description": "function [year, month, day, hour, minute, second] = jd2jdate(jday)" 
},
"jd2mjd": {
"prefix": "jd2mjd",
"body": "${1:mjd = }jd2mjd(${2:jd})$0",
"description": "function mjd = jd2mjd(jd)" 
},
"jdate2jd": {
"prefix": "jdate2jd",
"body": "${1:jd = }jdate2jd(${2:varargin})$0",
"description": "function jd = jdate2jd(varargin)" 
},
"mjd2date": {
"prefix": "mjd2date",
"body": "${1:[year, month, day, hour, minute, second] = }mjd2date(${2:mjd})$0",
"description": "function [year, month, day, hour, minute, second] = mjd2date(mjd)" 
},
"mjd2jd": {
"prefix": "mjd2jd",
"body": "${1:jd = }mjd2jd(${2:mjd})$0",
"description": "function jd = mjd2jd(mjd)" 
},
"monthofyear": {
"prefix": "monthofyear",
"body": "${1:ym = }monthofyear(${2:varargin})$0",
"description": "function ym = monthofyear( varargin )" 
},
"sec2hms": {
"prefix": "sec2hms",
"body": "${1:[hour, minute, second] = }sec2hms(${2:sec})$0",
"description": "function [hour, minute, second] = sec2hms(sec)" 
},
"unixsecs2date": {
"prefix": "unixsecs2date",
"body": "${1:[year, month, day, hour, minute, second] = }unixsecs2date(${2:secs})$0",
"description": "function [year, month, day, hour, minute, second] = unixsecs2date(secs)" 
},
"weekofyear": {
"prefix": "weekofyear",
"body": "${1:[w, y] = }weekofyear(${2:varargin})$0",
"description": "function [w, y] = weekofyear(varargin)" 
},
"weeksinyear": {
"prefix": "weeksinyear",
"body": "${1:n = }weeksinyear(${2:year})$0",
"description": "function n = weeksinyear(year)" 
},
"yearnum": {
"prefix": "yearnum",
"body": "${1:y = }yearnum(${2:varargin})$0",
"description": "function y = yearnum(varargin)" 
},
"demo_Data2_DataSource_Monthly_CN_Wind": {
"prefix": "demo_Data2_DataSource_Monthly_CN_Wind",
"body": "demo_Data2_DataSource_Monthly_CN_Wind$0",
"description": "demo_Data2_DataSource_Monthly_CN_Wind" 
},
"windmatlab_demo": {
"prefix": "windmatlab_demo",
"body": "windmatlab_demo$0",
"description": "windmatlab_demo" 
}
}